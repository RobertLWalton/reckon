// Reckon Language Function Test Data
//
// File:	reckon_functions.rec
// Author:	Bob Walton (walton@acm.org)
// Date:	Tue Jul 29 06:30:10 EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Function Declarations:
//
function add (X) (Y):
    Z = X + Y
    return Z

Z = add (5) (7)

function (X) add (Y): return X + Y

next Z = (5) add (7)

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
	next X + = 1
    return S

sum from (1) to (10)

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
	next E = L[]
    return S

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

function multiplication table:
    function part table ( Y, L ):
        function part row ( Y, X, L ):
	    L[] = Y * X
	    if X == 9: return L
	    else: return part row ( Y, X + 1, L )
	L[] = part row ( Y, 1, [] )
	if Y == 9: return L
	else: return part table ( Y + 1, L )
    return part table ( 1, [] )

multiplication table

// Naked Arguments
//
X = 10
add (X) 1      // Instead of `add (X) (1)'
(X) add 2      // Instead of `(X) add (2)'
add 2 "HI"     // Instead of `add (2) ("HI")'
sum [1, 2, 3]  // Instead of `sum ([1, 2, 3])'
