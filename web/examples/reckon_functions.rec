// Reckon Language Function Test Data
//
// File:	reckon_functions.rec
// Author:	Bob Walton (walton@acm.org)
// Date:	Wed Aug  6 20:34:32 EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Function Declarations:
//
function add (X) (Y):
    Z = X + Y
    return Z

Z = add (5) (7)

function (X) add (Y): return X + Y

next Z = (5) add (7)

function add (X, Y): return X + Y

next Z = add ( 5, 7 )

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
	next X + = 1
    return S

sum from (1) to (10)

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
	next E = L[]
    return S

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

function multiplication table:
    function part table ( Y, L ):
        function part row ( Y, X, L ):
	    L[] = Y * X
	    if X == 9: return L
	    else: return part row ( Y, X + 1, L )
	L[] = part row ( Y, 1, [] )
	if Y == 9: return L
	else: return part table ( Y + 1, L )
    return part table ( 1, [] )

multiplication table

// Function Terms
//
function (X) "**" (Y): return X ^ Y
(2)**(6)

function "AND" (L):
    i = 0
    repeat:
        E = L[i]
        if E == *NONE*: return *TRUE*
        else if NOT E: return *FALSE*
        next i + = 1
AND ([*TRUE*, *TRUE*, *TRUE*])
AND ([*TRUE*, *FALSE*, *TRUE*])

function sum incrementing by (X) from (Y) to (Z):
    if X > 0 AND Y > Z: return 0
    else if X < 0 AND Y < Z: return 0
    else:
        return Y + sum incrementing by (X)
                       from ( Y + X ) to (Z)
sum incrementing by (1) from (1) to (100)
sum incrementing by (1) to (100) from (1)
sum incrementing by (-1) to (1) from (100)

function (X) (Y): return X[Y]
L = [1, 2, 3, 4, 5]
(L)(0)
(L)(3)
(L)(5)

// Default Arguments
//
function increment (X) by (Y ?= 1): return X + Y
increment (4) by (5)
increment (4)

function add (X ?= 1) to (Y): return X + Y
add (3) to (4)
add to (4)

function adjust ( X ?= 1, Y ): return X + Y

function (X ?= 1) adjust (Y): return X + Y

function look ( X ?= Q ): return X
look ( 0 )
Q = 100
look
next Q = 200
look

// Boolean Terms
//
function test (X) option ( Y ?= *TRUE* ): return X, Y
test (3)
test (3) no option
test (3) option
test (3) option ( *FALSE* )

// Naked Arguments
//
X = 10
add (X) 1      // Instead of `add (X) (1)'
(X) add 2      // Instead of `(X) add (2)'
add 2 "HI"     // Instead of `add (2) ("HI")'
sum [1, 2, 3]  // Instead of `sum ([1, 2, 3])'
