// Reckon Language List Test Data
//
// File:	reckon_lists.rec
// Author:	Bob Walton (walton@acm.org)
// Date:	Thu Feb 20 01:29:36 EST 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// List Construction
//
X = [1 + 0, 1 + 1, 1 + 2, 1 + 3]
Y = [10, 20, X, 30]  // Y is flattened
Z = [[1, 2, 3]]      // Z is flattened
next Z = [ "Baker", "Bill", "Bob", "Butch" ]
W = []
V = [ "Carol", "Clara" ]
next Y = [ 10, Z, 20, W, 30, V ]  // Y is flattened

// List Element Access
//
Y
Z3 = Y[3]
Z6 = Y[3 + 3]
Z10 = Y[10]     // Y[10] does not exist
Zm1 = Y[-1]     // Y[-1] does not exist

// List Element Assignment
//
X
X[1] = 20
X
X[0], X[2] = X[2], X[0]
X
TOP, X[3] = X[3], 400
X
X[10] = "Bozo"     // X[10] does not exist

// List Element Modification
//
X
X[1] + = 1000
X
X[0] * = 1000
X[2] / = 10
X
X[10] - = 5    // X[10] does not exist
               // It reads as *NONE* and causes
               // FATAL PROGRAM ERROR when written

// List Push and Pop
//
next X = [ 1, 2, 3 ]
X[] = 4
X
next Z = X[]
X
X[] + = 8
X
// Compute L = [ 1, 2, 3, ..., 10 ]
L = []
L[]       // List is empty
i = 1
while i <= 10:
    L[] = i
    next i + = 1
L
// Compute sum of elements of L
sum = 0
repeat:
    E = L[]
    if E == *NONE*: exit
    next sum + = E
sum

// List Assignment and Copying
//
next X = [ 1, 2, 3 ]
next Y = X
next Z = copy ( X )
// X and Y point at same list,
// Z points at different list
X[1] = 20
Z[1] = -2
X
Y
Z
next W = [ 1, 2 ]
next X = [ 1, 2, 3 ]
X[1] = W
next Y = copy ( X )
// X and Y point at different list,
// but second element of BOTH X and Y points at W
W[] = "B"
X
Y

// Cascaded List Labels
//
next X = [1, 2, 3]
next Y = [ 10, 20, 30 ]
Y[1] = X
Y
X[] = "Butch"
Y
Y[1][0]   // Y[1] and X point at same list
Y[1][]
Y[1][] = 5000
X
Y
