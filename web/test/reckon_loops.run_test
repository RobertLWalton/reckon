// Reckon Language Loops Test Data
//
// File:        reckon_loops.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Dec  3 18:06:40 EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Loop Statements
//
power = 1
1
i = 0
0
next power, next i = repeat:
    if i >= 10: exit
    next power * = 2
    next i + = 1
1024
10

next power = 1
1
next i = 0
0
repeat:
    if i >= 10: exit
    next power * = 2
    next i + = 1
1024
10

j = 1
1
repeat:
    next j = 0
        // This is discarded when iteration exits.
    exit
1

j
1

do:
    next j = 0
        // This is retained when block exits.
    exit
0

j
0


// Iterators
//
next power = 1
1
next i = 0
0
repeat while i < 6:
    next power * = 2
    next i + = 1
64
6

next power = 1
1
next i = 0
0
do while i < 6:
    next power * = 2
    next i + = 1
64
6

next power = 1
1
next i = 0
0
while i < 6:
    next power * = 2
    next i + = 1
64
6

next power = 1
1
next i = 0
0
until i >= 6:
    next power * = 2
    next i + = 1
64
6

next power = 1
1
next i = 0
0
while i < 6 at most 5 times:
    next power * = 2
    next i + = 1
0
32
5

next power = 1
1
do exactly 4 times:
    next power * = 2
0
16

next power = 1
1
do 4 times:
    next power * = 2
0
16

// Continue Statements
//
next i = 0
0
while i < 6:
    next i + = 1
    continue
    next i = 0  // This is never executed.
6

next i = 0
0
while i < 6:
    next i + = 1
    do:             // This is NOT a loop block.
        continue
        next i = 0  // This is never executed.
    next i = 0  // This is never executed.
6

next i = 0
0
do OUTER LOOP while i < 6:
    next i + = 1
    repeat INNER LOOP:
        continue OUTER LOOP
        next i = 0  // This is never executed.
    next i = 0  // This is never executed.
6
