// Reckon Snippet Test Data
//
// File:        reckon_overview_test.in
// Author:      Bob Walton (walton@acm.org)
// Date:        Thu Jul 24 08:54:12 PM EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

9
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|9|}
9 + 8
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|9|} + {|8|}|}
x = 9
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} = {|9|}|}
y = 9 + 8
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|y|} =
     {|{|9|} + {|8|}|}|}
x + y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} + {|y|}|}
f (b, c, x) = b * x + c
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|f ({|b|}, {|c|}, {|x|})|} = {|{|{|b|} * {|x|}|} + {|c|}|}|}
f (10, x, y)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|f
     ({|10|}, {|x|}, {|y|})|}

g = `hello'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|g|} = `hello'|}
`[g] there'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|`[g] there'|}
z = `I thought he said `[g]'.'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|z|} =
     `I thought he said `[g]' "."'|}

`When you add [x] and [y] you get [x + y].'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     `When you add [x] and [y] you get [{|x|} + {|y|}] "."'|}

notice = ***:
    This document is meant to be read.
    Reading this document is good, but ...

    A line with an insertion [z].
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|notice|} =
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
          [< "***" ":" >]|
          {p|This document is meant to be read "." Reading this document
             is good "," but "..."|p}
          {p|A line with an insertion [z] "."|p}|}|}

***:
    {section}
    This is the
    first section

    This is the first paragraph of
    the first section.

    This is the second paragraph of
    the first section.

    {quote}
    This is a quote in the first
    section.

    This is the third paragraph of the first
    section.

    {section}
    This is the second
    section

    This is the first paragraph of the second section.

    This is the
    second paragraph
    of the second
    section.

    ----------------
    | this is a row in the first table |
    ---
    | another row | X |
    ----------------
    X : [Y + Z] // An equation for the table.

    The third
    paragraph.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
          [< "***" ":" >]|{section|This is the first section|section}
          {p|This is the first paragraph of the first section "."|p}
          {p|This is the second paragraph of the first section "."|p}
          {quote|This is a quote in the first section "."|quote}
          {p|This is the third paragraph of the first section "."|p}
          {section|This is the second section|section}
          {p|This is the first paragraph of the second section "."|p}
          {p|This is the second paragraph of the second section "."|p}
          {table|{row|----------------|row}
                 {row|"|" this is a row in the first table "|"|row}
                 {row|---|row} {row|"|" another row "|" X "|"|row}
                 {row|----------------|row}
                 {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
                      X ":" [{|Y|} + {|Z|}]|}|table}
          {p|The third paragraph "."|p}|}|}

f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|f|} =
     {{{|{|10|} * {|{|x|} ^ {|2|}|}|} - {|{|3.67|} * {|x|}|} -
       {|0.04|}}}|}
h = {{- 0.96 + 0.67 * x}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|h|} =
     {{{|- {|0.96|}|} + {|{|0.67|} * {|x|}|}}}|}
{{f + h}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {{{|f|} + {|h|}}}|}
solve {{f + h = 0}} for {{x}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|solve
     {{{|{|f|} + {|h|}|} = {|0|}}} for {{x}}|}
value {{f + h}} for {{x}} in [3, 4, 5]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|value
     {{{|f|} + {|h|}}} for {{x}} in [{|3|}, {|4|}, {|5|}]|}
g = {{ integral (x ^ 2, dx) }}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|g|} =
     {{integral ({|{|x|} ^ {|2|}|}, {|dx|})}}|}
simplify (g)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|simplify (g)|}
integral (g) from 1 to 5
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|integral (g) from
     1 to 5|}
v = simplify ( integral (g) from 1 to 5 )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|v|} =
     {|simplify (integral (g) from 1 to 5)|}|}
out = ``The value of [integral (g) from 1 to 5]
        is [v].''
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|out|} =
     ``The value of [integral (g) from 1 to 5] is [v] "."''|}

V =# | 1 2 3 |
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|V|} =#
     {|"|" 1 2 3 "|"|}|}
M =#:
   |  0   1   1 |
   | -1   1   0 |
   |  1   0  -1 |
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|M|} =#|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|"|" 0 1
               1 "|"|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|"|" -1
               1 0 "|"|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|"|" 1 0
               -1 "|"|}|}|}
V ^ T
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|V|} ^ {|T|}|}
M * V ^ T
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|M|} *
     {|{|V|} ^ {|T|}|}|}

a person:
    name = `Jack'
    weight = 123 lb
    height = 5 ft 9 in
    age = 23 yr 2 mo
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|a {|person|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|name|} = `Jack'|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|weight|} = {|123 lb|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|height|} = {|5 ft 9 in|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|age|}
               = {|23 yr 2 mo|}|}|}|}
a person:
    name = `Jill'
    weight = 110 lb
    height = 5 ft 7 in
    age = 21 yr 8 mo
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|a {|person|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|name|} = `Jill'|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|weight|} = {|110 lb|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|height|} = {|5 ft 7 in|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|age|}
               = {|21 yr 8 mo|}|}|}|}
the height of the person with name Jack
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|the {|height|}
     [< of the >] {|person|} with {|name Jack|}|}
the weight of the person with name Jack
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|the {|weight|}
     [< of the >] {|person|} with {|name Jack|}|}

for every person:
    body mass index = 703.06958 * weight in lbs
                    / height in inches ^ 2
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|for {|every {|person|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|body mass index|} =
               {|{|{|703.06958|} * {|weight in lbs|}|} /
                 {|{|height in inches|} ^ {|2|}|}|}|}|}|}

function sum from (X) through (Y) <-- X is integer,
                                      Y is integer:
    ``Sum of integers from X through Y.''
    if X > Y:     return 0
    else:         return X + sum (X + 1) through Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum from (X) through (Y)|} <--
     {|{|{|X|} [< is integer >]|}, {|{|Y|} [< is integer >]|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               ``Sum of integers from X through Y "."''|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|X|} > {|Y|}|} ":" {|return {|0|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
               ":"
               {|return {|{|X|} + {|sum ({|X|} + {|1|}) through Y|}|}|}|}|}|}
sum from 5 through 10
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum from 5
     through 10|}
trace (sum from 5 through 10)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|trace
     (sum from 5 through 10)|}

function sum from (X) through (Y) <-- X is integer,
                                      Y is integer:
    ``Sum of integers from X through Y.''
    value = 0
    while X <= Y:
        next value = value + X
        next X = X + 1
    return value
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum from (X) through (Y)|} <--
     {|{|{|X|} [< is integer >]|}, {|{|Y|} [< is integer >]|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               ``Sum of integers from X through Y "."''|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|value|} = {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|while {|{|X|} <= {|Y|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next value|} =
                         {|{|value|} + {|X|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next X|} = {|{|X|} + {|1|}|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|value|}|}|}|}
sum from 5 through 10
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum from 5
     through 10|}
trace (sum from 5 through 10)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|trace
     (sum from 5 through 10)|}

function average weight of (X) <--
            X is list, every Y in X is a person:
    count = 0
    sum = 0
    while NOT X is empty:
        next count = count + 1
        next sum = sum + the weight of (first X)
        next X = rest X
    if count == 0:
        return error ``Cannot average 0 things.''
    else:
        return sum / count
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|average weight of (X)|} <--
     {|{|X is list|},
       {|{|every {|Y|} in {|X|}|} [< is a >] {|person|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|count|} = {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|sum|}
               = {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|while {|NOT {|X is empty|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next count|} =
                         {|{|count|} + {|1|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next sum|} =
                         {|{|sum|} + {|the {|weight|} of (first X)|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next X|} = {|rest X|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|count|} == {|0|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|return
                         {|error ``Cannot average 0 things "."''|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|return {|{|sum|} / {|count|}|}|}|}|}|}|}
average weight of (every person)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|average weight of
     (every {|person|})|}
z = 10 + average weight of
         (the person with name `Bill')
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|z|} =
     {|{|10|} +
       {|average weight of (the {|person|} with {|name `Bill'|})|}|}|}

raw (every person)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|raw
     (every {|person|})|}
really raw (every person)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|really raw
     (every {|person|})|}

x = [1, [2, 3], 4]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} =
     [{|1|}, [{|2|}, {|3|}], {|4|}]|}
first (x)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|first (x)|}
rest (x)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|rest (x)|}
rest (rest (x))
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|rest (rest (x))|}
rest (rest (rest (x)))
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|rest
     (rest (rest (x)))|}
rest 4
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|rest 4|}

(Y) is wife of (X) <-- (X) is husband of (Y)!
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(Y) is wife of (X)|} <-- {|(X) is husband of (Y)|} "!"|}
(the person with name `Jack') is husband of
    (the person with name `Jill')!
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(the {|person|} with {|name `Jack'|}) is husband of
       (the {|person|} with {|name `Jill'|})|} "!"|}

(the person with name `Jill') is wife of
    (the person with name `Jack')?
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(the {|person|} with {|name `Jill'|}) is wife of
       (the {|person|} with {|name `Jack'|})|} "?"|}
(the person with name `Jack') is wife of
    (the person with name `Jill')?
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(the {|person|} with {|name `Jack'|}) is wife of
       (the {|person|} with {|name `Jill'|})|} "?"|}
(the person with name (X)) is wife of
    (the person with name `Jack')?
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(the {|person|} with {|name (X)|}) is wife of
       (the {|person|} with {|name `Jack'|})|} "?"|}
(X) is wife of (the person with name `Jack')?
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|(X) is wife of (the {|person|} with {|name `Jack'|})|} "?"|}

--------------------------------------------------------
| header 1 | header 2 | header 3 | header 4 | header 5 |
--------------------------------------------------------
| entry 11 | entry 12 | entry 13 | entry 14 | entry 15 |
| entry 21 | entry 22 | entry 23 | entry 24 | entry 25 |
| entry 31 | entry 32 | entry 33 | entry 34 | entry 35 |
--------------------------------------------------------
{table|{row|--------------------------------------------------------|row}
       {row|"|" header 1 "|" header 2 "|" header 3 "|" header 4 "|"
            header 5 "|"|row}
       {row|--------------------------------------------------------|row}
       {row|"|" entry 11 "|" entry 12 "|" entry 13 "|" entry 14 "|"
            entry 15 "|"|row}
       {row|"|" entry 21 "|" entry 22 "|" entry 23 "|" entry 24 "|"
            entry 25 "|"|row}
       {row|"|" entry 31 "|" entry 32 "|" entry 33 "|" entry 34 "|"
            entry 35 "|"|row}
       {row|--------------------------------------------------------|row}|table}

------------------------------------
| H  1 | H  2 | H  3 | H  4 | H  5 |
------------------------------------
| E 11 | E 12 | E 13 | E 14 | E 15 |
| E 21 | E 22 | E 23 | E 24 | E 25 |
| E 31 | E 32 | E 33 | E 34 | E 35 |
------------------------------------
H: header
E: entry
{table|{row|------------------------------------|row}
       {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
       {row|------------------------------------|row}
       {row|"|" E 11 "|" E 12 "|" E 13 "|" E 14 "|" E 15 "|"|row}
       {row|"|" E 21 "|" E 22 "|" E 23 "|" E 24 "|" E 25 "|"|row}
       {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
       {row|------------------------------------|row}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|H ":"
            header|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E ":"
            entry|}|table}

------------------------------------
| H  1 | H  2 | H  3 | H  4 | H  5 |
------------------------------------
| E 11 | E 12 | ABOT | <    | E 15 |
| E 21 | E 22 |    > | ^    | E 25 |
| E 31 | E 32 | E 33 | E 34 | E 35 |
------------------------------------
H: header
E: entry
ABOT: a bit of text
{table|{row|------------------------------------|row}
       {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
       {row|------------------------------------|row}
       {row|"|" E 11 "|" E 12 "|" ABOT "|" < "|" E 15 "|"|row}
       {row|"|" E 21 "|" E 22 "|" > "|" ^ "|" E 25 "|"|row}
       {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
       {row|------------------------------------|row}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|H ":"
            header|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E ":"
            entry|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|ABOT ":" a
            bit of text|}|table}

------------------------------------
| H  1 | H  2 | H  3 | H  4 | H  5 | /ib/
------------------------------------
| /l/  | /r/  | c    | P    | cb   |
|   11 |   12 |   13 | 5.4% | E 15 |
| E 21 | E 22 | E23  | 0.8% | E 25 |
| E 31 | E 32 | E 33 | 0.09 | E 35 | /!b/
------------------------------------
H: header
E: entry
E23: /b/ entry 23
P: /.0u%r/
{table|{row|------------------------------------|row}
       {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|" /ib/|row}
       {row|------------------------------------|row}
       {row|"|" /l/ "|" /r/ "|" c "|" P "|" cb "|"|row}
       {row|"|" 11 "|" 12 "|" 13 "|" 5.4% "|" E 15 "|"|row}
       {row|"|" E 21 "|" E 22 "|" E23 "|" 0.8% "|" E 25 "|"|row}
       {row|"|" E 31 "|" E 32 "|" E 33 "|" 0.09 "|" E 35 "|" /!b/|row}
       {row|------------------------------------|row}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|H ":"
            header|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E ":"
            entry|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E23 ":"
            /b/ entry 23|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|P ":"
            /.0u%r/|}|table}

---------------------------------
| Value | Factor | Contribution |
---------------------------------
| <V>   | <F>    |              |
| /u$/  | /u%/   | /u$.00/      |
| 100   | 20     | C            |
| 200   | 5      | C            |
| 300   | 8      | C            |
---------------------------------
| /lb/ Total | < | T            |
---------------------------------
C: [(0, <V>) * (@, <F>)]
T: [sum([<FIRST>, ..., @ - 1], @)]
{table|{row|---------------------------------|row}
       {row|"|" Value "|" Factor "|" Contribution "|"|row}
       {row|---------------------------------|row}
       {row|"|" <V> "|" <F> "|" "|"|row}
       {row|"|" /u$/ "|" /u%/ "|" /u$.00/ "|"|row}
       {row|"|" 100 "|" 20 "|" C "|"|row}
       {row|"|" 200 "|" 5 "|" C "|"|row}
       {row|"|" 300 "|" 8 "|" C "|"|row}
       {row|---------------------------------|row}
       {row|"|" /lb/ Total "|" < "|" T "|"|row}
       {row|---------------------------------|row}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|C ":"
            [({|0|}, {|<V>|}) * ({|@|}, {|<F>|})]|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|T ":"
            [sum ([{|<FIRST>|}, {|"..."|}, {|{|@|} - {|1|}|}], {|@|})]|}|table}

--------------------------------------------------------
| Name   | Weight   | Height     | Age       | BMI  | /ib/
--------------------------------------------------------
| <name> | <weight> | <height>   | <age>     | B
----------------------------------------------
| /l/    | /U`lb'/  | /U`ft_in'/ | /u`yr'.0/ | /.2/
----------------------------------------------
| George | 205lb    | 6ft 3in    | 25        |
| Mary   | 135lb    | 5ft 5in    | 26        |
----------------------------------------------
BMI: Body Mass Index
B: <body mass index>
ROW_TYPE: person
SORT ROWS BY: name
{table|{row|--------------------------------------------------------|row}
       {row|"|" Name "|" Weight "|" Height "|" Age "|" BMI "|" /ib/|row}
       {row|--------------------------------------------------------|row}
       {row|"|" <name> "|" <weight> "|" <height> "|" <age> "|" B|row}
       {row|----------------------------------------------|row}
       {row|"|" /l/ "|" /U`lb'/ "|" /U`ft_in'/ "|" /u`yr'.0/ "|"
            /.2/|row}
       {row|----------------------------------------------|row}
       {row|"|" George "|" 205lb "|" 6ft 3in "|" 25 "|"|row}
       {row|"|" Mary "|" 135lb "|" 5ft 5in "|" 26 "|"|row}
       {row|----------------------------------------------|row}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|BMI ":"
            Body Mass Index|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|B ":"
            <body mass index>|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|ROW_TYPE
            ":" person|}
       {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|SORT ROWS
            BY ":" name|}|table}

x = {{circle 0.4}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} =
     {{circle 0.4}}|}
y = {{rectangle (0.4, 0.2)}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|y|} =
     {{rectangle ({|0.4|}, {|0.2|})}}|}
z = {{(circle 0.4) labeled `Jack'}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|z|} =
     {{(circle 0.4) labeled `Jack'}}|}
{{([x] right of [y]) above [z]}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {{([x] right of [y]) above [z]}}|}
{{row([x], [y], [z])}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {{row ([x], [y], [z])}}|}
p = {{column ( row([x], [y], [z]),
               row([z], [y], [x]) )}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|p|} =
     {{column ({|row ([x], [y], [z])|}, {|row ([z], [y], [x])|})}}|}
raw x
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|raw x|}
raw p
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|raw p|}

function display ( P ) <-- P is a person with name X:
    return {{oval (0.4, 0.2) labeled [X]}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|display (P)|} <-- {|{|P|} [< is a >] {|person|} with {|name X|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {{oval ({|0.4|}, {|0.2|}) labeled [X]}}|}|}|}
the person named `Jack'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|the
     {|person named `Jack'|}|}
``[the person named `Jill'] is the wife of
  [the person named `Jack']''
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     ``[the {|person named `Jill'|}] is the wife of
       [the {|person named `Jack'|}]''|}

for every demo:
    on a demo with angle X:
        angle = X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|for {|every {|demo|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|on
               {|a {|demo|} with {|angle X|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|angle|} = {|X|}|}|}|}|}|}
x = a demo with angle 30 degrees
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} =
     {|a {|demo|} with {|angle 30 degrees|}|}|}

for every demo:
    on update (THIS) to (X):
        next angle = X
    on increment (THIS) by (X):
        next angle = angle + X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|for {|every {|demo|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|on
               {|update (THIS) to (X)|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next angle|} = {|X|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|on
               {|increment (THIS) by (X)|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next angle|} =
                         {|{|angle|} + {|X|}|}|}|}|}|}|}
update x to ( 40 degrees )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|update x to
     (40 degrees)|}

function display D <-- D is a demo with angle X:
    c = {{circle dotted diameter 1.0 center (0.0, 0.0)}}
    x axis = {{arrow from (-0.75, 0.0) to (0.75, 0.0)}}
    y axis = {{arrow from (0.0, -0.75) to (0.0, 0.75)}}
    line = {{line from (0.0, 0.0)
                  to [(0.5 * cos X, 0.5 * sin X)]}}
    arc = {{arc arrow from (0.3, 0.0)
                  to [(0.3 * cos X, 0.3 * sin X)]}}
    theta = {{Greek th}}
    value = {{label (
                `Depiction of Angle [theta] = [X]',
                overlap (
                    [c],
                    [x axis] labeled `X Axis',
                    [y axis] labeled `Y Axis',
                    [line],
                    [arc] labeled `[theta]' ))}}
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|display D|} <-- {|{|D|} [< is a >] {|demo|} with {|angle X|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|c|} =
               {{circle dotted diameter 1 center ({|0|}, {|0|})}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|x axis|} =
               {{arrow from ({|-0.75|}, {|0|}) to ({|0.75|}, {|0|})}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|y axis|} =
               {{arrow from ({|0|}, {|-0.75|}) to ({|0|}, {|0.75|})}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|line|} =
               {{line from ({|0|}, {|0|}) to
                 [({|{|0.5|} * {|cos X|}|}, {|{|0.5|} * {|sin X|}|})]}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|arc|}
               =
               {{arc arrow from ({|0.3|}, {|0|}) to
                 [({|{|0.3|} * {|cos X|}|}, {|{|0.3|} * {|sin X|}|})]}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|theta|} = {{Greek th}}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|value|} =
               {{label
                 (`Depiction of Angle [theta] = [X]',
                  {|overlap
                    ([c], {|[x axis] labeled `X Axis'|},
                     {|[y axis] labeled `Y Axis'|}, [line],
                     {|[arc] labeled `... ... ...'|})|})}}|}|}|}
show x
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|show x|}

increment x by ( -15 degrees )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|increment x by
     (-15 degrees)|}

x = y + z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|x|} =
     {|{|y|} + {|z|}|}|}
w = {|u|} + ( v )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|w|} =
     {|{|u|} + (v)|}|}
