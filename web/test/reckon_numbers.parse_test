// Reckon Language Numbers Test Data
//
// File:        reckon_numbers.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Fri Nov  1 02:36:00 AM EDT 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Integers
//
456
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|456|}
456 is integer
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|456|}
     [< is integer >]|}
4.56e2
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|456|}
4.56e2 is integer
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|456|}
     [< is integer >]|}
456 == 4.56e2
    // x == y tests whether x equals y
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|456|} ==
     {|456|}|}
-456 == -45.6e1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|-456|} ==
     {|-456|}|}
123 == 12300e-2
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|123|} ==
     {|123|}|}
1e20 is integer
    // FALSE because value not in range (-1e15,+1e15)
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1e+20|}
     [< is integer >]|}
9 / 2 is integer
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|9|} / {|2|}|} [< is integer >]|}
4.5 is integer
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|4.5|}
     [< is integer >]|}
9 / 3 is integer
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|9|} / {|3|}|} [< is integer >]|}
-0 == +0
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|-0|} ==
     {|0|}|}
-1 == +1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|-1|} ==
     {|1|}|}

// Finites
//
3.14
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|3.14|}
3.14 is finite
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|3.14|}
     [< is finite >]|}
-3.14 is finite
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|-3.14|}
     [< is finite >]|}
314e-2 is finite
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|3.14|}
     [< is finite >]|}
3.14 == 314e-2
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|3.14|} ==
     {|3.14|}|}
3 is finite
    // integers are also finite numbers
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|3|}
     [< is finite >]|}
5.7e-4
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0.00057|}
123 / 1000 == 0.123
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|123|} / {|1000|}|} == {|0.123|}|}
1 + 1e-16
    // Sum differs from 1 in 17'th place which is not stored
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|1e-16|}|}
1 + 1e-16 == 1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|1|} + {|1e-16|}|} == {|1|}|}
1 + 1e-15
    // Sum differs from 1 in 16'th place which is stored in
    // part but is not output
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|1e-15|}|}
1 + 1e-15 == 1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|1|} + {|1e-15|}|} == {|1|}|}
1 + 4e-15
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|4e-15|}|}
1 + 5e-15
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|5e-15|}|}
1 + 1e-14
    // Sum differs from 1 in 15'th place which is stored
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|1e-14|}|}
1 + 1e-14 == 1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
     {|{|1|} + {|1e-14|}|} == {|1|}|}
+0
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0|}
-0
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|-0|}
+0 == -0
    // +0 and -0 are stored as different values,
    // But they are equal.
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|0|} ==
     {|-0|}|}
1e309 is finite
    // Outside the range of a finite number, i.e., outside
    // (-1e308.+1e308).
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|}
     [< is finite >]|}

// Infinities
//
inf
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|inf|}
Inf
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|inf|}
-INF
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|-inf|}
-1e500
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|-inf|}
+inf + +inf
    // Sum of two large unknown numbers is a large unknown number
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} +
     {|inf|}|}
+inf + -inf
    // Difference of two large unknown numbers is unknown
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} +
     {|-inf|}|}
+inf * -inf
    // Product of two large unknown numbers is a large unknown number
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} *
     {|-inf|}|}
+inf / +inf
    // Ratio of two large unknown numbers is unknown
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} /
     {|inf|}|}
1 / +0
    // Finite number divided by very small but unknown
    // number is a large unknown number
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} /
     {|0|}|}
1 / -0
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} /
     {|-0|}|}
+inf == +inf
    // Equality of two large unknown numbers is unknown
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} ==
     {|inf|}|}
+inf == -inf
    // Two large unknown numbers of different signs are not equal
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|inf|} ==
     {|-inf|}|}

// Not-A-Numbers (more properly, unknown or uncomputable numbers)
//
// Also see +inf + -inf and +inf / +inf above
//
nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|nan|}
NaN
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|nan|}
-Nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|-nan|}
1 + nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} +
     {|nan|}|}
nan + 1
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|nan|} +
     {|1|}|}
5 * nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|5|} *
     {|nan|}|}
1 / nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|1|} /
     {|nan|}|}
nan / 5
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|nan|} /
     {|5|}|}
nan == 8
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|nan|} ==
     {|8|}|}
2 < nan
{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|{|2|} <
     {|nan|}|}
