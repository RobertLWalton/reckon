// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Nov 19 07:05:53 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
5
Z = 8
8
Y = Z
8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
10

next Z = - Z
-8
next Z = X + Z
-3
next Z = X + Y - Z
18
next Z = X + ( Y - Z )
-3

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
5
10

next M, next N = N, M
10
5


P, Q = M * N, M + N
50
15

R, next P = P / Q, P + 1
3.33333333333333
51

// Block Assignments
//
E, F =:
    E = 25
    F = -25
25
-25

E, F // Outputs first the value of E and then the value of F.
25
-25

next E, next F =:
    next E = 35
       // This does not take effect until after
       // this subblock has executed
    next F = E
       // The value of E is the value before the
       // subblock executes
35
25

E, F
35
25

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
next E = 25
25
SIGN E = do:
    // The `do' here is cosmetic and has no effect.
    if E < 0: SIGN E = -1
        // SIGN E = -1 is a restricted statement (it
        // is an operand of `if ... : ...') that
        // cannot allocate new variables, but it can
        // write write-only variables.
    else if E == 0: SIGN E = 0
    else: SIGN E = +1
1

do:
    if E < 20:
        JX = 5
        next E = -1
    else if E < 40:
        JX = 6
        next E = 0
    else:
        JX = 7
        next E = +1
0
E, JX
ERROR: in line ##: cannot understand expression:
E, JX
   ^^
[no output due to compile error]


// Next variable promotion
//
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
11

// Exit statements in blocks.
//
exit
ERROR: in line ##: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
15

X1
15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
15

X2
15
