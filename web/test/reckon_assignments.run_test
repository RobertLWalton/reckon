// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Sun Nov 24 11:31:26 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
5
Z = 8
8
Y = Z
8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
10

next Z = - Z
-8
next Z = X + Z
-3
next Z = X + Y - Z
18
next Z = X + ( Y - Z )
-3

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
5
10

next M, next N = N, M
10
5


P, Q = M * N, M + N
50
15

R, next P = P / Q, P + 1
3.33333333333333
51

// Block Assignments
//
E, F =:
    E = 25
    F = -25
25
-25

E, F // Outputs first the value of E and then the value of F.
25
-25

next E, next F = do:
    // The `do' here is cosmetic and has no effect.
    next E = 35
        // This does not take effect until after
        // this subblock has executed
    next F = E
        // The value of E is the value before the
        // subblock executes
35
25
E, F
35
25

J, K = do:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
S = 25
25
next S =:
    if S > 20: next S = 20
        // S = 20 is a restricted statement.  It is an
        // operand of `if ... : ... ' and cannot have
        // operators with precedence 0000.  It cannot
        // allocate variables, but can write variables
        // that are write-only.
20
S
20

T = 25
25
SIGN T = do:
    if T < 0: SIGN T = -1
    else if T == 0: SIGN T = 0
    else: SIGN T = +1
1
SIGN T
1

next T = do:
    if T < -20:
        JX = 5        // Allocates JX to block.
        next T = -20   // Just writes next SIGN T.
        // JX is deallocated here (end of its block)
    else if T > 20:
        JX = 6
        next T = 20
20
T
20
JX    // JX has been deallocated.
ERROR: in line ##: cannot understand expression:
JX    // JX has been deallocated.
^^
[no output due to compile error]


// Next variable implication
//
D = 95
95
do:
    // In `next D = do' the next D is implied by the
    // following statement.
    next D = D + 10
105
D
105
do:
    // In `next D = do' the next D is implied by the
    // statement `next D = 33'.

    JX = 50
    do:
        // In `next JX = do' the next JX is implied by
        // the statement `next JX = 60'.

        next D = 33
        next JX = 60
    // JX is deallocated here
33
D
33

// Variable modifying statements
//
W = 13
13
next W =:
    next W + = 4
17
next W =:
    next W * = 10
170
W
170

do:
    next W / = 10
    next W - = 4
13

do:
    next W = 1
    do:
        next W << = 10
1024

do:
    next W >> = 10
1

next W = 13
13
do:
    if W < 20: next W + = 7
    // Here W == 13 and next W == 20
    if W < 20: next W + = 20
40

// Exit statements in blocks.
//
exit
ERROR: in line ###: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
15

X1
15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
15

X2
15
