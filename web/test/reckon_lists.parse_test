// Reckon Language List Test Data
//
// File:        reckon_lists.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Fri Feb 21 02:57:55 EST 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// List Construction
//
X = [1 + 0, 1 + 1, 1 + 2, 1 + 3]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X|} =
     [{|{|1|} + {|0|}|}, {|{|1|} + {|1|}|}, {|{|1|} + {|2|}|},
      {|{|1|} + {|3|}|}]|}
Y = [10, 20, X, 30]  // Y is flattened
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y|} =
     [{|10|}, {|20|}, {|X|}, {|30|}]|}
Z = [[1, 2, 3]]      // Z is flattened
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
     [[{|1|}, {|2|}, {|3|}]]|}
next Z = [ "Baker", "Bill", "Bob", "Butch" ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     [{|"Baker"|}, {|"Bill"|}, {|"Bob"|}, {|"Butch"|}]|}
W = []
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|W|} = []|}
V = [ "Carol", "Clara" ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|V|} =
     [{|"Carol"|}, {|"Clara"|}]|}
next Y = [ 10, Z, 20, W, 30, V ]  // Y is flattened
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     [{|10|}, {|Z|}, {|20|}, {|W|}, {|30|}, {|V|}]|}

// List Element Access
//
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}
Z3 = Y[3]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z3|} =
     {|Y [3]|}|}
Z6 = Y[3 + 3]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z6|} =
     {|Y [{|3|} + {|3|}]|}|}
Z10 = Y[10]         // Y[10] does not exist
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z10|} =
     {|Y [10]|}|}
Zm1 = Y[-1]         // Y[-1] does not exist
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Zm1|} =
     {|Y [-1]|}|}
Zl = length ( Y )   // The number of elements in Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Zl|} =
     {|length (Y)|}|}
next X = [ 1, 5, 2, 8, 9 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|5|}, {|2|}, {|8|}, {|9|}]|}
Xl = length ( X )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Xl|} =
     {|length (X)|}|}
sum = 0
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|sum|} = {|0|}|}
i = 0
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|i|} = {|0|}|}
while i < Xl:
    next sum + = X[i]
    next i + = 1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|while {|{|i|} < {|Xl|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next sum|} [< + = >] {|X [i]|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next i|} [< + = >] {|1|}|}|}|}
sum
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum|}


// List Element Assignment
//
next X = [ 1, 2, 3, 4 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|2|}, {|3|}, {|4|}]|}
X[1] = 20
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [1]|} =
     {|20|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[0], X[2] = X[2], X[0]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|X [0]|}, {|X [2]|}|} = {|{|X [2]|}, {|X [0]|}|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
TOP, X[3] = X[3], 400
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|TOP|}, {|X [3]|}|} = {|{|X [3]|}, {|400|}|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[10] = "Bozo"     // X[10] does not exist
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [10]|} =
     {|"Bozo"|}|}

// List Element Modification
//
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[1] + = 1000
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [1]|}
     [< + = >] {|1000|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[0] * = 1000
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [0]|}
     [< * = >] {|1000|}|}
X[2] / = 10
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [2]|}
     [< / = >] {|10|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[10] - = 5    // X[10] does not exist
               // It reads as *NONE* and causes
               // FATAL PROGRAM ERROR when written
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [10]|}
     [< - = >] {|5|}|}

// List Push and Pop
//
next X = [ 1, 2, 3 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|2|}, {|3|}]|}
X[] = 4    // Push 4 to end of list
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X []|} =
     {|4|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
next Z = X[]    // Pop 4 from end of list
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|X []|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
X[] + = 8    // Add 8 to last element of list
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X []|}
     [< + = >] {|8|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
// Compute L = [ 1, 2, 3, ..., 10 ]
L = []
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|L|} = []|}
L[]       // Popping empty list
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|L []|}
next i = 1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next i|} =
     {|1|}|}
while i <= 10:
    L[] = i
    next i + = 1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|while {|{|i|} <= {|10|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|L []|} = {|i|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next i|} [< + = >] {|1|}|}|}|}
L
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|L|}
// Compute sum of elements of L
next sum = 0
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next sum|} =
     {|0|}|}
repeat:
    E = L[]
    if E == *NONE*: exit
    next sum + = E
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|repeat|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|L []|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|E|} == {|*NONE*|}|} ":" {|exit|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next sum|} [< + = >] {|E|}|}|}|}
L
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|L|}
sum
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum|}

// List Assignment and Copying
//
next X = [ 1, 2, 3 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|2|}, {|3|}]|}
next Y = X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     {|X|}|}
next Z = copy ( X )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|copy (X)|}|}
// X and Y point at same list,
// Z points at different list
X[1] = 20
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [1]|} =
     {|20|}|}
Z[1] = -2
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z [1]|} =
     {|-2|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}
Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Z|}
next W = [ 1, 2 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next W|} =
     [{|1|}, {|2|}]|}
next X = [ 1, 2, 3 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|2|}, {|3|}]|}
X[1] = W
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [1]|} =
     {|W|}|}
next Y = copy ( X )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     {|copy (X)|}|}
// X and Y point at different lists,
// but second element of BOTH lists points at W
X[0] = 100
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X [0]|} =
     {|100|}|}
Y[0] = "A"
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y [0]|} =
     {|"A"|}|}
W[] = "B"
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|W []|} =
     {|"B"|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}

// Cascaded List Labels
//
next X = [1, 2, 3]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next X|} =
     [{|1|}, {|2|}, {|3|}]|}
next Y = [ 10, 20, 30 ]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     [{|10|}, {|20|}, {|30|}]|}
Y[1] = X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y [1]|} =
     {|X|}|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}
X[] = "Butch"
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X []|} =
     {|"Butch"|}|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}
Y[1][0]        // Y[1] and X point at same list
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y [1] [0]|}
Y[1][]         // Pops X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y [1] []|}
Y[1][] = 5000  // Pushes 5000 to X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y [1] []|} =
     {|5000|}|}
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}
