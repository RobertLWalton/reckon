// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Wed Nov 20 01:32:40 EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X|} = {|5|}|}
Z = 8
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} = {|8|}|}
Y = Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y|} = {|Z|}|}

Y = 10
    // It is illegal to reassign Y.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y|} = {|10|}|}
next Y = 10
    // It is legal to assign a next Y.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     {|10|}|}

next Z = - Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|- {|Z|}|}|}
next Z = X + Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + {|Z|}|}|}
next Z = X + Y - Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + {|Y|} - {|Z|}|}|}
next Z = X + ( Y - Z )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + ({|Y|} - {|Z|})|}|}

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|M|}, {|N|}|}
     = {|{|5|}, {|10|}|}|}

next M, next N = N, M
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|next M|}, {|next N|}|} = {|{|N|}, {|M|}|}|}


P, Q = M * N, M + N
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|P|}, {|Q|}|}
     = {|{|{|M|} * {|N|}|}, {|{|M|} + {|N|}|}|}|}

R, next P = P / Q, P + 1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|R|}, {|next P|}|} = {|{|{|P|} / {|Q|}|}, {|{|P|} + {|1|}|}|}|}

// Block Assignments
//
E, F =:
    E = 25
    F = -25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|E|}, {|F|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|25|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|F|} =
               {|-25|}|}|}|}

E, F // Outputs first the value of E and then the value of F.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*, .separator =
     ","|{|E|} {|F|}|}

next E, next F =:
    next E = 35
        // This does not take effect until after
        // this subblock has executed
    next F = E
        // The value of E is the value before the
        // subblock executes
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|next E|}, {|next F|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next E|} = {|35|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next F|} = {|E|}|}|}|}
E, F
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*, .separator =
     ","|{|E|} {|F|}|}

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|J|}, {|K|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|J|} =
               {|E|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|K|} =
               {|{|J|} + {|1|}|}|}|}|}

// If statements in blocks.
//
S = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} = {|25|}|}
next S =:
    if S > 20: next S = 20
        // S = 20 is a restricted statement.  It is an
        // operand of `if ... : ... ' and cannot have
        // operators with precedence 0000.  It cannot
        // allocate variables, but can write variables
        // that are write-only.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|next S|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|S|} > {|20|}|} ":" {|{|next S|} = {|20|}|}|}|}|}
S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|S|}

T = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|T|} = {|25|}|}
SIGN T = do:
    // The `do' here is cosmetic and has no effect.
    if T < 0: SIGN T = -1
    else if T == 0: SIGN T = 0
    else: SIGN T = +1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|SIGN T|} = {|do|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|T|} < {|0|}|} ":" {|{|SIGN T|} = {|-1|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               [< else if >] {|{|T|} == {|0|}|} ":"
               {|{|SIGN T|} = {|0|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
               ":" {|{|SIGN T|} = {|1|}|}|}|}|}
SIGN T
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|SIGN T|}

next T = do:
    if T < -20:
        JX = 5        // Allocates JX to block.
        next T = -20   // Just writes next SIGN T.
        // JX is deallocated here (end of its block)
    else if T > 20:
        JX = 6
        next T = 20
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|next T|} = {|do|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|T|} < {|-20|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|JX|} = {|5|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next T|} = {|-20|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               [< else if >] {|{|T|} > {|20|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|JX|} = {|6|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next T|} = {|20|}|}|}|}|}|}
T
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|T|}
JX    // JX has been deallocated.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|JX|}


// Next variable promotion
//
E
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E|}
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|do|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next E|} = {|{|E|} + {|10|}|}|}|}|}

// Exit statements in blocks.
//
exit
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|exit|}

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|X1|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|5|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|15|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|exit|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|25|}|}|}|}

X1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X1|}

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|X2|} = {|do {|BLOCK2|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|5|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|15|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|do {|BLOCK3|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|exit {|BLOCK2|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|25|}|}|}|}

X2
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X2|}
