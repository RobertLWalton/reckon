// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Sun Nov 17 07:21:59 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Simple Expression Assignments
//
X = 5
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X|} = {|5|}|}
Z = 8
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} = {|8|}|}
Y = Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y|} = {|Z|}|}

Y = 10
    // It is illegal to reassign Y.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Y|} = {|10|}|}
next Y = 10
    // It is legal to assign a next Y.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Y|} =
     {|10|}|}

next Z = - Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|- {|Z|}|}|}
next Z = X + Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + {|Z|}|}|}
next Z = X + Y - Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + {|Y|} - {|Z|}|}|}
next Z = X + ( Y - Z )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|{|X|} + ({|Y|} - {|Z|})|}|}

// Multi-Variable Expression Assignments
//
X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}

next X, next Y = Y, X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|next X|}, {|next Y|}|} = {|{|Y|}, {|X|}|}|}

X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X|}
Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|Y|}

P, Q = X * Y, X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|P|}, {|Q|}|}
     = {|{|{|X|} * {|Y|}|}, {|{|X|} + {|Y|}|}|}|}

// Block Assignments
//
E, F =:
    E = 25
    F = -25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|E|}, {|F|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|25|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|F|} =
               {|-25|}|}|}|}

E
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E|}
F
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|F|}

next E, next F =:
    next E = 35
       // This does not take effect until after
       // this subblock has executed
    next F = E
       // The value of E is the value before the
       // subblock executes
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|next E|}, {|next F|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next E|} = {|35|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next F|} = {|E|}|}|}|}

E
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|E|}
F
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|F|}

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|{|J|}, {|K|}|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|J|} =
               {|E|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|K|} =
               {|{|J|} + {|1|}|}|}|}|}

// Use of if. else if, else inside subblock
//
next E = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next E|} =
     {|25|}|}
SIGN E = do:
    // The `do' here is cosmetic and has no effect.
    if E < 0: SIGN E = -1
        // SIGN E = -1 is a restricted statement (it
        // is an operand of `if ... : ...') that
        // cannot allocate new variables, but it can
        // write write-only variables.
    else if E == 0: SIGN E = 0
    else: SIGN E = +1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|SIGN E|} = {|do|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|E|} < {|0|}|} ":" {|{|SIGN E|} = {|-1|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               [< else if >] {|{|E|} == {|0|}|} ":"
               {|{|SIGN E|} = {|0|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
               ":" {|{|SIGN E|} = {|1|}|}|}|}|}

// Next promotion
//
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|do|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|next E|} = {|{|E|} + {|10|}|}|}|}|}

// Exit statements
//
exit
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|exit|}

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|{|X1|} =|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|5|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|15|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|exit|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X1|}
               = {|25|}|}|}|}

X1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X1|}

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|X2|} = {|do {|BLOCK2|}|}|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|5|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|15|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|do {|BLOCK3|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|exit {|BLOCK2|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X2|}
               = {|25|}|}|}|}

X2
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|X2|}
