// Reckon Language Function Test Data
//
// File:        reckon_functions.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Aug  5 10:59:11 PM EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Function Declarations:
//
function add (X) (Y):
    Z = X + Y
    return Z

Z = add (5) (7)
12

function (X) add (Y): return X + Y

next Z = (5) add (7)
12

function add (X, Y): return X + Y

next Z = add ( 5, 7 )
12

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
        next X + = 1
    return S

sum from (1) to (10)
55

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
        next E = L[]
    return S

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
55

function multiplication table:
    function part table ( Y, L ):
        function part row ( Y, X, L ):
            L[] = Y * X
            if X == 9: return L
            else: return part row ( Y, X + 1, L )
        L[] = part row ( Y, 1, [] )
        if Y == 9: return L
        else: return part table ( Y + 1, L )
    return part table ( 1, [] )

multiplication table
[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8, 10, 12, 14, 16, 18],
 [3, 6, 9, 12, 15, 18, 21, 24, 27], [4, 8, 12, 16, 20, 24, 28, 32, 36],
 [5, 10, 15, 20, 25, 30, 35, 40, 45],
 [6, 12, 18, 24, 30, 36, 42, 48, 54],
 [7, 14, 21, 28, 35, 42, 49, 56, 63],
 [8, 16, 24, 32, 40, 48, 56, 64, 72],
 [9, 18, 27, 36, 45, 54, 63, 72, 81]]

// Function Terms
//
function (X) "**" (Y): return X ^ Y
(2)**(6)
64

function "AND" (L):
    i = 0
    repeat:
        E = L[i]
        if E == *NONE*: return *TRUE*
        else if NOT E: return *FALSE*
        next i + = 1
AND ([*TRUE*, *TRUE*, *TRUE*])
*TRUE*
AND ([*TRUE*, *FALSE*, *TRUE*])
*FALSE*

function sum incrementing by (X) from (Y) to (Z):
    if X > 0 AND Y > Z: return 0
    else if X < 0 AND Y < Z: return 0
    else:
        return Y + sum incrementing by (X)
                       from ( Y + X ) to (Z)
sum incrementing by (1) from (1) to (100)
5050
sum incrementing by (1) to (100) from (1)
5050
sum incrementing by (-1) to (1) from (100)
5050

function (X) (Y): return X[Y]
L = [1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]
(L)(0)
1
(L)(3)
4
(L)(5)
*NONE*

// Default Arguments
//
function increment (X) by (Y ?= 1): return X + Y
increment (4) by (5)
9
increment (4)
5




// Naked Arguments
//
X = 10
10
add (X) 1      // Instead of `add (X) (1)'
11
(X) add 2      // Instead of `(X) add (2)'
12
add 2 "HI"     // Instead of `add (2) ("HI")'
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: invalid operand(s)
*** {14:3,24,7999} ADD: Z = nan <= 2 + "HI"
nan
sum [1, 2, 3]  // Instead of `sum ([1, 2, 3])'
6
