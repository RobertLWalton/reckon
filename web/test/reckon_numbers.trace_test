* {0:0,1,1} PUSHI: *FALSE* <= *FALSE*
* {0:1,2,2} PUSHI: *TRUE* <= *TRUE*
* {0:2,3,3} PUSHI: *NONE* <= *NONE*
// Reckon Language Numbers Test Data
//
// File:        reckon_numbers.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Wed Mar  5 02:37:17 EST 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Numbers
//
100 is number
* {13:3,4,4} PUSHI: * <= *FALSE*
* {13:4,5,5} PUSHI: * <= 100
* {13:5,4,6} JMPNUM location 7 is successful: true <= 100
* {13:7,3,7} POPS: * <= * = *FALSE*
* {13:8,4,8} PUSHI: * <= *TRUE*
3.141529 is number
* {14:9,5,9} PUSHI: * <= *FALSE*
* {14:10,6,10} PUSHI: * <= 3.141529
* {14:11,5,11} JMPNUM location 13 is successful: true <= 3.141529
* {14:13,4,12} POPS: * <= * = *FALSE*
* {14:14,5,13} PUSHI: * <= *TRUE*
+inf is number
* {15:15,6,14} PUSHI: * <= *FALSE*
* {15:16,7,15} PUSHI: * <= inf
* {15:17,6,16} JMPNUM location 19 is successful: true <= inf
* {15:19,5,17} POPS: * <= * = *FALSE*
* {15:20,6,18} PUSHI: * <= *TRUE*
nan is number
* {16:21,7,19} PUSHI: * <= *FALSE*
* {16:22,8,20} PUSHI: * <= nan
* {16:23,7,21} JMPNUM location 25 is successful: true <= nan
* {16:25,6,22} POPS: * <= * = *FALSE*
* {16:26,7,23} PUSHI: * <= *TRUE*

// Integers
//
456 is integer
* {20:27,8,24} PUSHI: * <= *FALSE*
* {20:28,9,25} PUSHI: * <= 456
* {20:29,8,26} JMPINT location 31 is successful: true <= 456
* {20:31,7,27} POPS: * <= * = *FALSE*
* {20:32,8,28} PUSHI: * <= *TRUE*
4.56e2 is integer
* {21:33,9,29} PUSHI: * <= *FALSE*
* {21:34,10,30} PUSHI: * <= 456
* {21:35,9,31} JMPINT location 37 is successful: true <= 456
* {21:37,8,32} POPS: * <= * = *FALSE*
* {21:38,9,33} PUSHI: * <= *TRUE*
456 == 4.56e2
    // x == y tests whether x equals y
* {23:39,10,34} PUSHI: * <= *FALSE*
* {22:40,11,35} PUSHI: * <= 456
* {22:41,12,36} PUSHI: * <= 456
* {22:42,10,37} JMPNEQ location 45 is UNsuccessful: false <= 456 != 456
* {23:43,9,38} POPS: * <= * = *FALSE*
* {23:44,10,39} PUSHI: * <= *TRUE*
-456 == -45.6e1
* {24:45,11,40} PUSHI: * <= *FALSE*
* {24:46,12,41} PUSHI: * <= -456
* {24:47,13,42} PUSHI: * <= -456
* {24:48,11,43} JMPNEQ location 51 is UNsuccessful: false <= -456
                != -456
* {24:49,10,44} POPS: * <= * = *FALSE*
* {24:50,11,45} PUSHI: * <= *TRUE*
123 == 12300e-2
* {25:51,12,46} PUSHI: * <= *FALSE*
* {25:52,13,47} PUSHI: * <= 123
* {25:53,14,48} PUSHI: * <= 123
* {25:54,12,49} JMPNEQ location 57 is UNsuccessful: false <= 123 != 123
* {25:55,11,50} POPS: * <= * = *FALSE*
* {25:56,12,51} PUSHI: * <= *TRUE*
1e20 is integer
    // *FALSE* because value not in range (-1e15,+1e15)
* {27:57,13,52} PUSHI: * <= *FALSE*
* {26:58,14,53} PUSHI: * <= 1e+20
* {27:59,13,54} JMPINT location 61 is UNsuccessful: false <= 1e+20
* {27:60,13,55} JMP location 63
9 / 2 is integer
* {28:63,14,56} PUSHI: * <= *FALSE*
* {28:64,15,57} PUSHI: * <= 9
* {28:65,16,58} PUSHI: * <= 2
* {28:66,15,59} DIV: * = 4.5 <= 9 / 2
* {28:67,14,60} JMPINT location 69 is UNsuccessful: false <= 4.5
* {28:68,14,61} JMP location 71
4.5 is integer
* {29:71,15,62} PUSHI: * <= *FALSE*
* {29:72,16,63} PUSHI: * <= 4.5
* {29:73,15,64} JMPINT location 75 is UNsuccessful: false <= 4.5
* {29:74,15,65} JMP location 77
9 / 3 is integer
* {30:77,16,66} PUSHI: * <= *FALSE*
* {30:78,17,67} PUSHI: * <= 9
* {30:79,18,68} PUSHI: * <= 3
* {30:80,17,69} DIV: * = 3 <= 9 / 3
* {30:81,16,70} JMPINT location 83 is successful: true <= 3
* {30:83,15,71} POPS: * <= * = *FALSE*
* {30:84,16,72} PUSHI: * <= *TRUE*
-0 == +0
* {31:85,17,73} PUSHI: * <= *FALSE*
* {31:86,18,74} PUSHI: * <= -0
* {31:87,19,75} PUSHI: * <= 0
* {31:88,17,76} JMPNEQ location 91 is UNsuccessful: false <= -0 != 0
* {31:89,16,77} POPS: * <= * = *FALSE*
* {31:90,17,78} PUSHI: * <= *TRUE*
-1 == +1
* {32:91,18,79} PUSHI: * <= *FALSE*
* {32:92,19,80} PUSHI: * <= -1
* {32:93,20,81} PUSHI: * <= 1
* {32:94,18,82} JMPNEQ location 97 is successful: true <= -1 != 1

// Finites
//
3.14 is finite
* {36:97,19,83} PUSHI: * <= *FALSE*
* {36:98,20,84} PUSHI: * <= 3.14
* {36:99,19,85} JMPFIN location 101 is successful: true <= 3.14
* {36:101,18,86} POPS: * <= * = *FALSE*
* {36:102,19,87} PUSHI: * <= *TRUE*
-3.14 is finite
* {37:103,20,88} PUSHI: * <= *FALSE*
* {37:104,21,89} PUSHI: * <= -3.14
* {37:105,20,90} JMPFIN location 107 is successful: true <= -3.14
* {37:107,19,91} POPS: * <= * = *FALSE*
* {37:108,20,92} PUSHI: * <= *TRUE*
1e10 is finite     // integers are also finite numbers
* {38:109,21,93} PUSHI: * <= *FALSE*
* {38:110,22,94} PUSHI: * <= 10000000000
* {38:111,21,95} JMPFIN location 113 is successful: true <= 10000000000
* {38:113,20,96} POPS: * <= * = *FALSE*
* {38:114,21,97} PUSHI: * <= *TRUE*
5.7e-4 is finite
* {39:115,22,98} PUSHI: * <= *FALSE*
* {39:116,23,99} PUSHI: * <= 0.00057
* {39:117,22,100} JMPFIN location 119 is successful: true <= 0.00057
* {39:119,21,101} POPS: * <= * = *FALSE*
* {39:120,22,102} PUSHI: * <= *TRUE*
5.7e-4 == 0.00057
* {40:121,23,103} PUSHI: * <= *FALSE*
* {40:122,24,104} PUSHI: * <= 0.00057
* {40:123,25,105} PUSHI: * <= 0.00057
* {40:124,23,106} JMPNEQ location 127 is UNsuccessful: false <= 0.00057
                  != 0.00057
* {40:125,22,107} POPS: * <= * = *FALSE*
* {40:126,23,108} PUSHI: * <= *TRUE*
123 / 1000 == 0.123
* {41:127,24,109} PUSHI: * <= *FALSE*
* {41:128,25,110} PUSHI: * <= 123
* {41:129,26,111} PUSHI: * <= 1000
* {41:130,25,112} DIV: * = 0.123 <= 123 / 1000
* {41:131,26,113} PUSHI: * <= 0.123
* {41:132,24,114} JMPNEQ location 135 is UNsuccessful: false <= 0.123
                  != 0.123
* {41:133,23,115} POPS: * <= * = *FALSE*
* {41:134,24,116} PUSHI: * <= *TRUE*
1 + 1e-16
    // Sum differs from 1 in 17'th place which is not
    // stored
* {42:135,25,117} PUSHI: * <= 1
* {42:136,26,118} PUSHI: * <= 1e-16
* {44:137,25,119} ADD: * = 1 <= 1 + 1e-16
1 + 1e-16 == 1
* {45:138,26,120} PUSHI: * <= *FALSE*
* {45:139,27,121} PUSHI: * <= 1
* {45:140,28,122} PUSHI: * <= 1e-16
* {45:141,27,123} ADD: * = 1 <= 1 + 1e-16
* {45:142,28,124} PUSHI: * <= 1
* {45:143,26,125} JMPNEQ location 146 is UNsuccessful: false <= 1 != 1
* {45:144,25,126} POPS: * <= * = *FALSE*
* {45:145,26,127} PUSHI: * <= *TRUE*
1 + 1e-15
    // Sum differs from 1 in 16'th place which is stored
    // in part but is not output
* {46:146,27,128} PUSHI: * <= 1
* {46:147,28,129} PUSHI: * <= 1e-15
* {48:148,27,130} ADD: * = 1 <= 1 + 1e-15
1 + 1e-15 == 1
* {49:149,28,131} PUSHI: * <= *FALSE*
* {49:150,29,132} PUSHI: * <= 1
* {49:151,30,133} PUSHI: * <= 1e-15
* {49:152,29,134} ADD: * = 1 <= 1 + 1e-15
* {49:153,30,135} PUSHI: * <= 1
* {49:154,28,136} JMPNEQ location 157 is successful: true <= 1 != 1
1 + 4e-15
* {50:157,29,137} PUSHI: * <= 1
* {50:158,30,138} PUSHI: * <= 4e-15
* {50:159,29,139} ADD: * = 1 <= 1 + 4e-15
1 + 5e-15
* {51:160,30,140} PUSHI: * <= 1
* {51:161,31,141} PUSHI: * <= 5e-15
* {51:162,30,142} ADD: * = 1.00000000000001 <= 1 + 5e-15
1 + 1e-14
    // Sum differs from 1 in 15'th place which is stored
* {52:163,31,143} PUSHI: * <= 1
* {52:164,32,144} PUSHI: * <= 1e-14
* {53:165,31,145} ADD: * = 1.00000000000001 <= 1 + 1e-14
1 + 1e-14 == 1
* {54:166,32,146} PUSHI: * <= *FALSE*
* {54:167,33,147} PUSHI: * <= 1
* {54:168,34,148} PUSHI: * <= 1e-14
* {54:169,33,149} ADD: * = 1.00000000000001 <= 1 + 1e-14
* {54:170,34,150} PUSHI: * <= 1
* {54:171,32,151} JMPNEQ location 174 is successful: true
                  <= 1.00000000000001 != 1
+0
* {55:174,33,152} PUSHI: * <= 0
-0
* {56:175,34,153} PUSHI: * <= -0
+0 == -0   // +0 and -0 are stored as different values,
           // But they are equal.
* {58:176,35,154} PUSHI: * <= *FALSE*
* {57:177,36,155} PUSHI: * <= 0
* {57:178,37,156} PUSHI: * <= -0
* {57:179,35,157} JMPNEQ location 182 is UNsuccessful: false <= 0 != -0
* {58:180,34,158} POPS: * <= * = *FALSE*
* {58:181,35,159} PUSHI: * <= *TRUE*
-0 < +0    // Ditto
* {59:182,36,160} PUSHI: * <= *FALSE*
* {59:183,37,161} PUSHI: * <= -0
* {59:184,38,162} PUSHI: * <= 0
* {59:185,36,163} JMPGEQ location 188 is successful: true <= -0 >= 0
1e309 is finite
    // Outside the range of a finite number, i.e.,
    // outside (-1e308.+1e308).
* {62:188,37,164} PUSHI: * <= *FALSE*
* {60:189,38,165} PUSHI: * <= inf
* {62:190,37,166} JMPFIN location 192 is UNsuccessful: false <= inf
* {62:191,37,167} JMP location 194

// Infinities
//
inf is infinite
* {66:194,38,168} PUSHI: * <= *FALSE*
* {66:195,39,169} PUSHI: * <= inf
* {66:196,38,170} JMPINF location 198 is successful: true <= inf
* {66:198,37,171} POPS: * <= * = *FALSE*
* {66:199,38,172} PUSHI: * <= *TRUE*
-Inf is infinite    // Letter case does not matter
* {67:200,39,173} PUSHI: * <= *FALSE*
* {67:201,40,174} PUSHI: * <= -inf
* {67:202,39,175} JMPINF location 204 is successful: true <= -inf
* {67:204,38,176} POPS: * <= * = *FALSE*
* {67:205,39,177} PUSHI: * <= *TRUE*
-1e500
    // If a number is too large to store, it is changed
    // to an infinity.
* {68:206,40,178} PUSHI: * <= -inf
+1e308 is finite
* {71:207,41,179} PUSHI: * <= *FALSE*
* {71:208,42,180} PUSHI: * <= 1e+308
* {71:209,41,181} JMPFIN location 211 is successful: true <= 1e+308
* {71:211,40,182} POPS: * <= * = *FALSE*
* {71:212,41,183} PUSHI: * <= *TRUE*
+1e309 is infinite
* {72:213,42,184} PUSHI: * <= *FALSE*
* {72:214,43,185} PUSHI: * <= inf
* {72:215,42,186} JMPINF location 217 is successful: true <= inf
* {72:217,41,187} POPS: * <= * = *FALSE*
* {72:218,42,188} PUSHI: * <= *TRUE*
-1e308 is finite
* {73:219,43,189} PUSHI: * <= *FALSE*
* {73:220,44,190} PUSHI: * <= -1e+308
* {73:221,43,191} JMPFIN location 223 is successful: true <= -1e+308
* {73:223,42,192} POPS: * <= * = *FALSE*
* {73:224,43,193} PUSHI: * <= *TRUE*
-1e309 is infinite
* {74:225,44,194} PUSHI: * <= *FALSE*
* {74:226,45,195} PUSHI: * <= -inf
* {74:227,44,196} JMPINF location 229 is successful: true <= -inf
* {74:229,43,197} POPS: * <= * = *FALSE*
* {74:230,44,198} PUSHI: * <= *TRUE*
+inf + +inf
    // Sum of two large unknown numbers is a large
    // unknown number
* {75:231,45,199} PUSHI: * <= inf
* {75:232,46,200} PUSHI: * <= inf
* {77:233,45,201} ADD: * = inf <= inf + inf
+inf + -inf
    // Difference of two large unknown numbers is
    // unknown
* {78:234,46,202} PUSHI: * <= inf
* {78:235,47,203} PUSHI: * <= -inf
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: invalid operand(s)
* {80:236,46,204} ADD: * = -nan <= inf + -inf
+inf * -inf
    // Product of two large unknown numbers is a large
    // unknown number
* {81:237,47,205} PUSHI: * <= inf
* {81:238,48,206} PUSHI: * <= -inf
* {83:239,47,207} MUL: * = -inf <= inf * -inf
+inf / +inf
    // Ratio of two large unknown numbers is unknown
* {84:240,48,208} PUSHI: * <= inf
* {84:241,49,209} PUSHI: * <= inf
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: invalid operand(s)
* {85:242,48,210} DIV: * = -nan <= inf / inf
1 / +0
    // Positive finite number divided by very small but
    // unknown positive number is a large unknown
    // positive number
* {86:243,49,211} PUSHI: * <= 1
* {86:244,50,212} PUSHI: * <= 0
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: divide by zero
* {89:245,49,213} DIV: * = inf <= 1 / 0
1 / -0
    // Positive finite number divided by very small but
    // unknown negative number is a large unknown
    // negative number
* {90:246,50,214} PUSHI: * <= 1
* {90:247,51,215} PUSHI: * <= -0
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: divide by zero
* {93:248,50,216} DIV: * = -inf <= 1 / -0
+inf == +inf
    // Equality of two large unknown numbers is unknown
* {95:249,51,217} PUSHI: * <= *FALSE*
* {94:250,52,218} PUSHI: * <= inf
* {94:251,53,219} PUSHI: * <= inf
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    line ##:
    invalid operands to a conditional jump instruction
+inf == +inf
     ^^
* {94:252,51,220} JMPNEQ location 255 with invalid operand(s)
                  ARGS = inf inf
[no output due to run-time error]
+inf == -inf
    // Two large unknown numbers of different signs are
    // not equal
* {98:249,51,220} PUSHI: * <= *FALSE*
* {96:250,52,221} PUSHI: * <= inf
* {96:251,53,222} PUSHI: * <= -inf
* {96:252,51,223} JMPNEQ location 255 is successful: true <= inf != -inf
-inf < +inf        // Ditto
* {99:255,52,224} PUSHI: * <= *FALSE*
* {99:256,53,225} PUSHI: * <= -inf
* {99:257,54,226} PUSHI: * <= inf
* {99:258,52,227} JMPGEQ location 261 is UNsuccessful: false <= -inf
                  >= inf
* {99:259,51,228} POPS: * <= * = *FALSE*
* {99:260,52,229} PUSHI: * <= *TRUE*

// Not-A-Numbers (more properly, unknown or uncomputable
//                numbers)
//
// Also see +inf + -inf and +inf / +inf above
//
nan is undefined number
* {106:261,53,230} PUSHI: * <= *FALSE*
* {106:262,54,231} PUSHI: * <= nan
* {106:263,53,232} JMPNAN location 265 is successful: true <= nan
* {106:265,52,233} POPS: * <= * = *FALSE*
* {106:266,53,234} PUSHI: * <= *TRUE*
NaN is undefined number   // Letter case does not matter
* {107:267,54,235} PUSHI: * <= *FALSE*
* {107:268,55,236} PUSHI: * <= nan
* {107:269,54,237} JMPNAN location 271 is successful: true <= nan
* {107:271,53,238} POPS: * <= * = *FALSE*
* {107:272,54,239} PUSHI: * <= *TRUE*
-Nan is undefined number
* {108:273,55,240} PUSHI: * <= *FALSE*
* {108:274,56,241} PUSHI: * <= -nan
* {108:275,55,242} JMPNAN location 277 is successful: true <= -nan
* {108:277,54,243} POPS: * <= * = *FALSE*
* {108:278,55,244} PUSHI: * <= *TRUE*
1 + nan
* {109:279,56,245} PUSHI: * <= 1
* {109:280,57,246} PUSHI: * <= nan
* {109:281,56,247} ADD: * = nan <= 1 + nan
nan + 1
* {110:282,57,248} PUSHI: * <= nan
* {110:283,58,249} PUSHI: * <= 1
* {110:284,57,250} ADD: * = nan <= nan + 1
5 * nan
* {111:285,58,251} PUSHI: * <= 5
* {111:286,59,252} PUSHI: * <= nan
* {111:287,58,253} MUL: * = nan <= 5 * nan
1 / nan
* {112:288,59,254} PUSHI: * <= 1
* {112:289,60,255} PUSHI: * <= nan
* {112:290,59,256} DIV: * = nan <= 1 / nan
nan / 5
* {113:291,60,257} PUSHI: * <= nan
* {113:292,61,258} PUSHI: * <= 5
* {113:293,60,259} DIV: * = nan <= nan / 5
nan == 8
* {114:294,61,260} PUSHI: * <= *FALSE*
* {114:295,62,261} PUSHI: * <= nan
* {114:296,63,262} PUSHI: * <= 8
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    line ###:
    invalid operands to a conditional jump instruction
nan == 8
    ^^
* {114:297,61,263} JMPNEQ location 300 with invalid operand(s)
                   ARGS = nan 8
[no output due to run-time error]
2 < nan
* {115:294,61,263} PUSHI: * <= *FALSE*
* {115:295,62,264} PUSHI: * <= 2
* {115:296,63,265} PUSHI: * <= nan
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    line ###:
    invalid operands to a conditional jump instruction
2 < nan
  ^
* {115:297,61,266} JMPGEQ location 300 with invalid operand(s)
                   ARGS = 2 nan
[no output due to run-time error]
nan == nan
* {116:294,61,266} PUSHI: * <= *FALSE*
* {116:295,62,267} PUSHI: * <= nan
* {116:296,63,268} PUSHI: * <= nan
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    line ###:
    invalid operands to a conditional jump instruction
nan == nan
    ^^
* {116:297,61,269} JMPNEQ location 300 with invalid operand(s)
                   ARGS = nan nan
[no output due to run-time error]
