// Reckon Language Numbers Test Data
//
// File:        reckon_numbers.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Wed Mar  5 02:37:17 EST 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Numbers
//
100 is number
* {13:0,1,1} PUSHI: * <= *FALSE*
* {13:1,2,2} PUSHI: * <= 100
* {13:2,1,3} JMPNUM location 4 is successful: true <= 100
* {13:4,0,4} POPS: * <= * = *FALSE*
* {13:5,1,5} PUSHI: * <= *TRUE*
3.141529 is number
* {14:6,2,6} PUSHI: * <= *FALSE*
* {14:7,3,7} PUSHI: * <= 3.141529
* {14:8,2,8} JMPNUM location 10 is successful: true <= 3.141529
* {14:10,1,9} POPS: * <= * = *FALSE*
* {14:11,2,10} PUSHI: * <= *TRUE*
+inf is number
* {15:12,3,11} PUSHI: * <= *FALSE*
* {15:13,4,12} PUSHI: * <= inf
* {15:14,3,13} JMPNUM location 16 is successful: true <= inf
* {15:16,2,14} POPS: * <= * = *FALSE*
* {15:17,3,15} PUSHI: * <= *TRUE*
nan is number
* {16:18,4,16} PUSHI: * <= *FALSE*
* {16:19,5,17} PUSHI: * <= nan
* {16:20,4,18} JMPNUM location 22 is successful: true <= nan
* {16:22,3,19} POPS: * <= * = *FALSE*
* {16:23,4,20} PUSHI: * <= *TRUE*

// Integers
//
456 is integer
* {20:24,5,21} PUSHI: * <= *FALSE*
* {20:25,6,22} PUSHI: * <= 456
* {20:26,5,23} JMPINT location 28 is successful: true <= 456
* {20:28,4,24} POPS: * <= * = *FALSE*
* {20:29,5,25} PUSHI: * <= *TRUE*
4.56e2 is integer
* {21:30,6,26} PUSHI: * <= *FALSE*
* {21:31,7,27} PUSHI: * <= 456
* {21:32,6,28} JMPINT location 34 is successful: true <= 456
* {21:34,5,29} POPS: * <= * = *FALSE*
* {21:35,6,30} PUSHI: * <= *TRUE*
456 == 4.56e2
    // x == y tests whether x equals y
* {23:36,7,31} PUSHI: * <= *FALSE*
* {22:37,8,32} PUSHI: * <= 456
* {22:38,9,33} PUSHI: * <= 456
* {22:39,7,34} JMPNEQ location 42 is UNsuccessful: false <= 456 != 456
* {23:40,6,35} POPS: * <= * = *FALSE*
* {23:41,7,36} PUSHI: * <= *TRUE*
-456 == -45.6e1
* {24:42,8,37} PUSHI: * <= *FALSE*
* {24:43,9,38} PUSHI: * <= -456
* {24:44,10,39} PUSHI: * <= -456
* {24:45,8,40} JMPNEQ location 48 is UNsuccessful: false <= -456 != -456
* {24:46,7,41} POPS: * <= * = *FALSE*
* {24:47,8,42} PUSHI: * <= *TRUE*
123 == 12300e-2
* {25:48,9,43} PUSHI: * <= *FALSE*
* {25:49,10,44} PUSHI: * <= 123
* {25:50,11,45} PUSHI: * <= 123
* {25:51,9,46} JMPNEQ location 54 is UNsuccessful: false <= 123 != 123
* {25:52,8,47} POPS: * <= * = *FALSE*
* {25:53,9,48} PUSHI: * <= *TRUE*
1e20 is integer
    // *FALSE* because value not in range (-1e15,+1e15)
* {27:54,10,49} PUSHI: * <= *FALSE*
* {26:55,11,50} PUSHI: * <= 1e+20
* {27:56,10,51} JMPINT location 58 is UNsuccessful: false <= 1e+20
* {27:57,10,52} JMP location 60
9 / 2 is integer
* {28:60,11,53} PUSHI: * <= *FALSE*
* {28:61,12,54} PUSHI: * <= 9
* {28:62,13,55} PUSHI: * <= 2
* {28:63,12,56} DIV: * = 4.5 <= 9 / 2
* {28:64,11,57} JMPINT location 66 is UNsuccessful: false <= 4.5
* {28:65,11,58} JMP location 68
4.5 is integer
* {29:68,12,59} PUSHI: * <= *FALSE*
* {29:69,13,60} PUSHI: * <= 4.5
* {29:70,12,61} JMPINT location 72 is UNsuccessful: false <= 4.5
* {29:71,12,62} JMP location 74
9 / 3 is integer
* {30:74,13,63} PUSHI: * <= *FALSE*
* {30:75,14,64} PUSHI: * <= 9
* {30:76,15,65} PUSHI: * <= 3
* {30:77,14,66} DIV: * = 3 <= 9 / 3
* {30:78,13,67} JMPINT location 80 is successful: true <= 3
* {30:80,12,68} POPS: * <= * = *FALSE*
* {30:81,13,69} PUSHI: * <= *TRUE*
-0 == +0
* {31:82,14,70} PUSHI: * <= *FALSE*
* {31:83,15,71} PUSHI: * <= -0
* {31:84,16,72} PUSHI: * <= 0
* {31:85,14,73} JMPNEQ location 88 is UNsuccessful: false <= -0 != 0
* {31:86,13,74} POPS: * <= * = *FALSE*
* {31:87,14,75} PUSHI: * <= *TRUE*
-1 == +1
* {32:88,15,76} PUSHI: * <= *FALSE*
* {32:89,16,77} PUSHI: * <= -1
* {32:90,17,78} PUSHI: * <= 1
* {32:91,15,79} JMPNEQ location 94 is successful: true <= -1 != 1

// Finites
//
3.14 is finite
* {36:94,16,80} PUSHI: * <= *FALSE*
* {36:95,17,81} PUSHI: * <= 3.14
* {36:96,16,82} JMPFIN location 98 is successful: true <= 3.14
* {36:98,15,83} POPS: * <= * = *FALSE*
* {36:99,16,84} PUSHI: * <= *TRUE*
-3.14 is finite
* {37:100,17,85} PUSHI: * <= *FALSE*
* {37:101,18,86} PUSHI: * <= -3.14
* {37:102,17,87} JMPFIN location 104 is successful: true <= -3.14
* {37:104,16,88} POPS: * <= * = *FALSE*
* {37:105,17,89} PUSHI: * <= *TRUE*
1e10 is finite     // integers are also finite numbers
* {38:106,18,90} PUSHI: * <= *FALSE*
* {38:107,19,91} PUSHI: * <= 10000000000
* {38:108,18,92} JMPFIN location 110 is successful: true <= 10000000000
* {38:110,17,93} POPS: * <= * = *FALSE*
* {38:111,18,94} PUSHI: * <= *TRUE*
5.7e-4 is finite
* {39:112,19,95} PUSHI: * <= *FALSE*
* {39:113,20,96} PUSHI: * <= 0.00057
* {39:114,19,97} JMPFIN location 116 is successful: true <= 0.00057
* {39:116,18,98} POPS: * <= * = *FALSE*
* {39:117,19,99} PUSHI: * <= *TRUE*
5.7e-4 == 0.00057
* {40:118,20,100} PUSHI: * <= *FALSE*
* {40:119,21,101} PUSHI: * <= 0.00057
* {40:120,22,102} PUSHI: * <= 0.00057
* {40:121,20,103} JMPNEQ location 124 is UNsuccessful: false <= 0.00057
                  != 0.00057
* {40:122,19,104} POPS: * <= * = *FALSE*
* {40:123,20,105} PUSHI: * <= *TRUE*
123 / 1000 == 0.123
* {41:124,21,106} PUSHI: * <= *FALSE*
* {41:125,22,107} PUSHI: * <= 123
* {41:126,23,108} PUSHI: * <= 1000
* {41:127,22,109} DIV: * = 0.123 <= 123 / 1000
* {41:128,23,110} PUSHI: * <= 0.123
* {41:129,21,111} JMPNEQ location 132 is UNsuccessful: false <= 0.123
                  != 0.123
* {41:130,20,112} POPS: * <= * = *FALSE*
* {41:131,21,113} PUSHI: * <= *TRUE*
1 + 1e-16
    // Sum differs from 1 in 17'th place which is not
    // stored
* {42:132,22,114} PUSHI: * <= 1
* {42:133,23,115} PUSHI: * <= 1e-16
* {44:134,22,116} ADD: * = 1 <= 1 + 1e-16
1 + 1e-16 == 1
* {45:135,23,117} PUSHI: * <= *FALSE*
* {45:136,24,118} PUSHI: * <= 1
* {45:137,25,119} PUSHI: * <= 1e-16
* {45:138,24,120} ADD: * = 1 <= 1 + 1e-16
* {45:139,25,121} PUSHI: * <= 1
* {45:140,23,122} JMPNEQ location 143 is UNsuccessful: false <= 1 != 1
* {45:141,22,123} POPS: * <= * = *FALSE*
* {45:142,23,124} PUSHI: * <= *TRUE*
1 + 1e-15
    // Sum differs from 1 in 16'th place which is stored
    // in part but is not output
* {46:143,24,125} PUSHI: * <= 1
* {46:144,25,126} PUSHI: * <= 1e-15
* {48:145,24,127} ADD: * = 1 <= 1 + 1e-15
1 + 1e-15 == 1
* {49:146,25,128} PUSHI: * <= *FALSE*
* {49:147,26,129} PUSHI: * <= 1
* {49:148,27,130} PUSHI: * <= 1e-15
* {49:149,26,131} ADD: * = 1 <= 1 + 1e-15
* {49:150,27,132} PUSHI: * <= 1
* {49:151,25,133} JMPNEQ location 154 is successful: true <= 1 != 1
1 + 4e-15
* {50:154,26,134} PUSHI: * <= 1
* {50:155,27,135} PUSHI: * <= 4e-15
* {50:156,26,136} ADD: * = 1 <= 1 + 4e-15
1 + 5e-15
* {51:157,27,137} PUSHI: * <= 1
* {51:158,28,138} PUSHI: * <= 5e-15
* {51:159,27,139} ADD: * = 1.00000000000001 <= 1 + 5e-15
1 + 1e-14
    // Sum differs from 1 in 15'th place which is stored
* {52:160,28,140} PUSHI: * <= 1
* {52:161,29,141} PUSHI: * <= 1e-14
* {53:162,28,142} ADD: * = 1.00000000000001 <= 1 + 1e-14
1 + 1e-14 == 1
* {54:163,29,143} PUSHI: * <= *FALSE*
* {54:164,30,144} PUSHI: * <= 1
* {54:165,31,145} PUSHI: * <= 1e-14
* {54:166,30,146} ADD: * = 1.00000000000001 <= 1 + 1e-14
* {54:167,31,147} PUSHI: * <= 1
* {54:168,29,148} JMPNEQ location 171 is successful: true
                  <= 1.00000000000001 != 1
+0
* {55:171,30,149} PUSHI: * <= 0
-0
* {56:172,31,150} PUSHI: * <= -0
+0 == -0   // +0 and -0 are stored as different values,
           // But they are equal.
* {58:173,32,151} PUSHI: * <= *FALSE*
* {57:174,33,152} PUSHI: * <= 0
* {57:175,34,153} PUSHI: * <= -0
* {57:176,32,154} JMPNEQ location 179 is UNsuccessful: false <= 0 != -0
* {58:177,31,155} POPS: * <= * = *FALSE*
* {58:178,32,156} PUSHI: * <= *TRUE*
-0 < +0    // Ditto
* {59:179,33,157} PUSHI: * <= *FALSE*
* {59:180,34,158} PUSHI: * <= -0
* {59:181,35,159} PUSHI: * <= 0
* {59:182,33,160} JMPGEQ location 185 is successful: true <= -0 >= 0
1e309 is finite
    // Outside the range of a finite number, i.e.,
    // outside (-1e308.+1e308).
* {62:185,34,161} PUSHI: * <= *FALSE*
* {60:186,35,162} PUSHI: * <= inf
* {62:187,34,163} JMPFIN location 189 is UNsuccessful: false <= inf
* {62:188,34,164} JMP location 191

// Infinities
//
inf is infinite
* {66:191,35,165} PUSHI: * <= *FALSE*
* {66:192,36,166} PUSHI: * <= inf
* {66:193,35,167} JMPINF location 195 is successful: true <= inf
* {66:195,34,168} POPS: * <= * = *FALSE*
* {66:196,35,169} PUSHI: * <= *TRUE*
-Inf is infinite    // Letter case does not matter
* {67:197,36,170} PUSHI: * <= *FALSE*
* {67:198,37,171} PUSHI: * <= -inf
* {67:199,36,172} JMPINF location 201 is successful: true <= -inf
* {67:201,35,173} POPS: * <= * = *FALSE*
* {67:202,36,174} PUSHI: * <= *TRUE*
-1e500
    // If a number is too large to store, it is changed
    // to an infinity.
* {68:203,37,175} PUSHI: * <= -inf
+1e308 is finite
* {71:204,38,176} PUSHI: * <= *FALSE*
* {71:205,39,177} PUSHI: * <= 1e+308
* {71:206,38,178} JMPFIN location 208 is successful: true <= 1e+308
* {71:208,37,179} POPS: * <= * = *FALSE*
* {71:209,38,180} PUSHI: * <= *TRUE*
+1e309 is infinite
* {72:210,39,181} PUSHI: * <= *FALSE*
* {72:211,40,182} PUSHI: * <= inf
* {72:212,39,183} JMPINF location 214 is successful: true <= inf
* {72:214,38,184} POPS: * <= * = *FALSE*
* {72:215,39,185} PUSHI: * <= *TRUE*
-1e308 is finite
* {73:216,40,186} PUSHI: * <= *FALSE*
* {73:217,41,187} PUSHI: * <= -1e+308
* {73:218,40,188} JMPFIN location 220 is successful: true <= -1e+308
* {73:220,39,189} POPS: * <= * = *FALSE*
* {73:221,40,190} PUSHI: * <= *TRUE*
-1e309 is infinite
* {74:222,41,191} PUSHI: * <= *FALSE*
* {74:223,42,192} PUSHI: * <= -inf
* {74:224,41,193} JMPINF location 226 is successful: true <= -inf
* {74:226,40,194} POPS: * <= * = *FALSE*
* {74:227,41,195} PUSHI: * <= *TRUE*
+inf + +inf
    // Sum of two large unknown numbers is a large
    // unknown number
* {75:228,42,196} PUSHI: * <= inf
* {75:229,43,197} PUSHI: * <= inf
* {77:230,42,198} ADD: * = inf <= inf + inf
+inf + -inf
    // Difference of two large unknown numbers is
    // unknown
* {78:231,43,199} PUSHI: * <= inf
* {78:232,44,200} PUSHI: * <= -inf
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: invalid operand(s)
* {80:233,43,201} ADD: * = -nan <= inf + -inf
+inf * -inf
    // Product of two large unknown numbers is a large
    // unknown number
* {81:234,44,202} PUSHI: * <= inf
* {81:235,45,203} PUSHI: * <= -inf
* {83:236,44,204} MUL: * = -inf <= inf * -inf
+inf / +inf
    // Ratio of two large unknown numbers is unknown
* {84:237,45,205} PUSHI: * <= inf
* {84:238,46,206} PUSHI: * <= inf
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: invalid operand(s)
* {85:239,45,207} DIV: * = -nan <= inf / inf
1 / +0
    // Positive finite number divided by very small but
    // unknown positive number is a large unknown
    // positive number
* {86:240,46,208} PUSHI: * <= 1
* {86:241,47,209} PUSHI: * <= 0
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: divide by zero
* {89:242,46,210} DIV: * = inf <= 1 / 0
1 / -0
    // Positive finite number divided by very small but
    // unknown negative number is a large unknown
    // negative number
* {90:243,47,211} PUSHI: * <= 1
* {90:244,48,212} PUSHI: * <= -0
!!!!!!!!!!!!!!!!!!!!!!!!! ERROR: divide by zero
* {93:245,47,213} DIV: * = -inf <= 1 / -0
+inf == +inf
    // Equality of two large unknown numbers is unknown
* {95:246,48,214} PUSHI: * <= *FALSE*
* {94:247,49,215} PUSHI: * <= inf
* {94:248,50,216} PUSHI: * <= inf
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    invalid operands to a conditional jump instruction
    line ##:
+inf == +inf
     ^^
* {94:249,48,217} JMPNEQ location 252 with invalid operand(s)
                  ARGS = inf inf
[no output due to run-time error]
+inf == -inf
    // Two large unknown numbers of different signs are
    // not equal
* {98:246,48,217} PUSHI: * <= *FALSE*
* {96:247,49,218} PUSHI: * <= inf
* {96:248,50,219} PUSHI: * <= -inf
* {96:249,48,220} JMPNEQ location 252 is successful: true <= inf != -inf
-inf < +inf        // Ditto
* {99:252,49,221} PUSHI: * <= *FALSE*
* {99:253,50,222} PUSHI: * <= -inf
* {99:254,51,223} PUSHI: * <= inf
* {99:255,49,224} JMPGEQ location 258 is UNsuccessful: false <= -inf
                  >= inf
* {99:256,48,225} POPS: * <= * = *FALSE*
* {99:257,49,226} PUSHI: * <= *TRUE*

// Not-A-Numbers (more properly, unknown or uncomputable
//                numbers)
//
// Also see +inf + -inf and +inf / +inf above
//
nan is undefined number
* {106:258,50,227} PUSHI: * <= *FALSE*
* {106:259,51,228} PUSHI: * <= nan
* {106:260,50,229} JMPNAN location 262 is successful: true <= nan
* {106:262,49,230} POPS: * <= * = *FALSE*
* {106:263,50,231} PUSHI: * <= *TRUE*
NaN is undefined number   // Letter case does not matter
* {107:264,51,232} PUSHI: * <= *FALSE*
* {107:265,52,233} PUSHI: * <= nan
* {107:266,51,234} JMPNAN location 268 is successful: true <= nan
* {107:268,50,235} POPS: * <= * = *FALSE*
* {107:269,51,236} PUSHI: * <= *TRUE*
-Nan is undefined number
* {108:270,52,237} PUSHI: * <= *FALSE*
* {108:271,53,238} PUSHI: * <= -nan
* {108:272,52,239} JMPNAN location 274 is successful: true <= -nan
* {108:274,51,240} POPS: * <= * = *FALSE*
* {108:275,52,241} PUSHI: * <= *TRUE*
1 + nan
* {109:276,53,242} PUSHI: * <= 1
* {109:277,54,243} PUSHI: * <= nan
* {109:278,53,244} ADD: * = nan <= 1 + nan
nan + 1
* {110:279,54,245} PUSHI: * <= nan
* {110:280,55,246} PUSHI: * <= 1
* {110:281,54,247} ADD: * = nan <= nan + 1
5 * nan
* {111:282,55,248} PUSHI: * <= 5
* {111:283,56,249} PUSHI: * <= nan
* {111:284,55,250} MUL: * = nan <= 5 * nan
1 / nan
* {112:285,56,251} PUSHI: * <= 1
* {112:286,57,252} PUSHI: * <= nan
* {112:287,56,253} DIV: * = nan <= 1 / nan
nan / 5
* {113:288,57,254} PUSHI: * <= nan
* {113:289,58,255} PUSHI: * <= 5
* {113:290,57,256} DIV: * = nan <= nan / 5
nan == 8
* {114:291,58,257} PUSHI: * <= *FALSE*
* {114:292,59,258} PUSHI: * <= nan
* {114:293,60,259} PUSHI: * <= 8
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    invalid operands to a conditional jump instruction
    line ###:
nan == 8
    ^^
* {114:294,58,260} JMPNEQ location 297 with invalid operand(s)
                   ARGS = nan 8
[no output due to run-time error]
2 < nan
* {115:291,58,260} PUSHI: * <= *FALSE*
* {115:292,59,261} PUSHI: * <= 2
* {115:293,60,262} PUSHI: * <= nan
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    invalid operands to a conditional jump instruction
    line ###:
2 < nan
  ^
* {115:294,58,263} JMPGEQ location 297 with invalid operand(s)
                   ARGS = 2 nan
[no output due to run-time error]
nan == nan
* {116:291,58,263} PUSHI: * <= *FALSE*
* {116:292,59,264} PUSHI: * <= nan
* {116:293,60,265} PUSHI: * <= nan
!!!!!!!!!!!!!!!!!!!!!!!!! FATAL PROGRAM ERROR:
    invalid operands to a conditional jump instruction
    line ###:
nan == nan
    ^^
* {116:294,58,266} JMPNEQ location 297 with invalid operand(s)
                   ARGS = nan nan
[no output due to run-time error]
