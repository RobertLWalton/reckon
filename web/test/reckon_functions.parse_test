// Reckon Language Function Test Data
//
// File:        reckon_functions.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Jul 29 21:02:57 EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Function Declarations:
//
function add (X) (Y):
    Z = X + Y
    return Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add (X) (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
               {|{|X|} + {|Y|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|Z|}|}|}|}

Z = add (5) (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
     {|add (5) (7)|}|}

function (X) add (Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|(X) add (Y)|} ":" {|return {|{|X|} + {|Y|}|}|}|}

next Z = (5) add (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|(5) add (7)|}|}

function add (X, Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add ({|X|}, {|Y|})|} ":" {|return {|{|X|} + {|Y|}|}|}|}

next Z = add ( 5, 7 )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|add ({|5|}, {|7|})|}|}

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
        next X + = 1
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum from (X) to (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|while {|{|X|} <= {|Y|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|X|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next X|} [< + = >] {|1|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum from (1) to (10)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum from (1) to
     (10)|}

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
        next E = L[]
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum (L)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|L []|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|until {|{|E|} == {|*NONE*|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|E|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next E|} = {|L []|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum
     ([{|1|}, {|2|}, {|3|}, {|4|}, {|5|}, {|6|}, {|7|}, {|8|}, {|9|},
       {|10|}])|}

function multiplication table:
    function part table ( Y, L ):
        function part row ( Y, X, L ):
            L[] = Y * X
            if X == 9: return L
            else: return part row ( Y, X + 1, L )
        L[] = part row ( Y, 1, [] )
        if Y == 9: return L
        else: return part table ( Y + 1, L )
    return part table ( 1, [] )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|multiplication table|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               function {|part table ({|Y|}, {|L|})|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|function
                         {|part row ({|Y|}, {|X|}, {|L|})|}
                         {"": .terminator = *INDENTED_PARAGRAPH*,
                              .initiator = ":"|
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|{|L []|} =
                                   {|{|Y|} * {|X|}|}|}
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|if {|{|X|} == {|9|}|}
                                   ":" {|return {|L|}|}|}
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|else ":"
                                   {|return
                                     {|part row
                                       ... ... ... ... ... ... ...|}|}|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|L []|} =
                         {|part row ({|Y|}, {|1|}, [])|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|if {|{|Y|} == {|9|}|} ":"
                         {|return {|L|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|else ":"
                         {|return
                           {|part table ({|{|...|} + {|...|}|}, {|L|})|}|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|part table ({|1|}, [])|}|}|}|}

multiplication table
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|multiplication
     table|}

// Naked Arguments
//
X = 10
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X|} = {|10|}|}
add (X) 1      // Instead of `add (X) (1)'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add (X) 1|}
(X) add 2      // Instead of `(X) add (2)'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(X) add 2|}
add 2 "HI"     // Instead of `add (2) ("HI")'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add 2 "HI"|}
sum [1, 2, 3]  // Instead of `sum ([1, 2, 3])'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum
     [{|1|}, {|2|}, {|3|}]|}
