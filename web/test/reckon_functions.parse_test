// Reckon Language Function Test Data
//
// File:        reckon_functions.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Aug 19 17:35:20 EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Function Declarations:
//
function add (X) (Y):
    Z = X + Y
    return Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add (X) (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
               {|{|X|} + {|Y|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|Z|}|}|}|}

Z = add (5) (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
     {|add (5) (7)|}|}

function (X) add (Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|(X) add (Y)|} ":" {|return {|{|X|} + {|Y|}|}|}|}

next Z = (5) add (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|(5) add (7)|}|}

function add (X, Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add ({|X|}, {|Y|})|} ":" {|return {|{|X|} + {|Y|}|}|}|}

next Z = add ( 5, 7 )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Z|} =
     {|add ({|5|}, {|7|})|}|}

function add and subtract (X, Y):
    return X + Y, X - Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add and subtract ({|X|}, {|Y|})|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|{|{|X|} + {|Y|}|}, {|{|X|} - {|Y|}|}|}|}|}|}

Z1, Z2 = add and subtract (10, 3)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
     {|{|Z1|}, {|Z2|}|} = {|add and subtract ({|10|}, {|3|})|}|}

Z3 = add and subtract ( 10, 3 )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z3|} =
     {|add and subtract ({|10|}, {|3|})|}|}

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
        next X + = 1
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum from (X) to (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|while {|{|X|} <= {|Y|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|X|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next X|} [< + = >] {|1|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum from (1) to (10)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum from (1) to
     (10)|}

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
        next E = L[]
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum (L)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|L []|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|until {|{|E|} == {|*NONE*|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|E|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next E|} = {|L []|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum
     ([{|1|}, {|2|}, {|3|}, {|4|}, {|5|}, {|6|}, {|7|}, {|8|}, {|9|},
       {|10|}])|}

function multiplication table:
    function part table ( Y, L ):
        function part row ( Y, X, L ):
            L[] = Y * X
            if X == 9: return L
            else: return part row ( Y, X + 1, L )
        L[] = part row ( Y, 1, [] )
        if Y == 9: return L
        else: return part table ( Y + 1, L )
    return part table ( 1, [] )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|multiplication table|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               function {|part table ({|Y|}, {|L|})|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|function
                         {|part row ({|Y|}, {|X|}, {|L|})|}
                         {"": .terminator = *INDENTED_PARAGRAPH*,
                              .initiator = ":"|
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|{|L []|} =
                                   {|{|Y|} * {|X|}|}|}
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|if {|{|X|} == {|9|}|}
                                   ":" {|return {|L|}|}|}
                              {"": .terminator = "<LF>", .initiator =
                                   *LOGICAL_LINE*|else ":"
                                   {|return
                                     {|part row
                                       ... ... ... ... ... ... ...|}|}|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|L []|} =
                         {|part row ({|Y|}, {|1|}, [])|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|if {|{|Y|} == {|9|}|} ":"
                         {|return {|L|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|else ":"
                         {|return
                           {|part table ({|{|...|} + {|...|}|}, {|L|})|}|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|part table ({|1|}, [])|}|}|}|}

multiplication table
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|multiplication
     table|}

// Function Terms
//
function (X) "**" (Y): return X ^ Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|(X) "**" (Y)|} ":" {|return {|{|X|} ^ {|Y|}|}|}|}
(2)**(6)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(2) ** (6)|}

function "AND" (L):
    i = 0
    repeat:
        E = L[i]
        if E == *NONE*: return *TRUE*
        else if NOT E: return *FALSE*
        next i + = 1
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|"AND" (L)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|i|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|repeat|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|E|} = {|L [i]|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|if {|{|E|} == {|*NONE*|}|} ":"
                         {|return {|*TRUE*|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|[< else if >] {|NOT {|E|}|} ":"
                         {|return {|*FALSE*|}|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next i|} [< + = >] {|1|}|}|}|}|}|}
AND ([*TRUE*, *TRUE*, *TRUE*])
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|AND
     ([{|*TRUE*|}, {|*TRUE*|}, {|*TRUE*|}])|}
AND ([*TRUE*, *FALSE*, *TRUE*])
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|AND
     ([{|*TRUE*|}, {|*FALSE*|}, {|*TRUE*|}])|}

function sum incrementing by (X) from (Y) to (Z):
    if X > 0 AND Y > Z: return 0
    else if X < 0 AND Y < Z: return 0
    else:
        return Y + sum incrementing by (X)
                       from ( Y + X ) to (Z)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum incrementing by (X) from (Y) to (Z)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
               {|{|{|X|} > {|0|}|} AND {|{|Y|} > {|Z|}|}|} ":"
               {|return {|0|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               [< else if >] {|{|{|X|} < {|0|}|} AND {|{|Y|} < {|Z|}|}|}
               ":" {|return {|0|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|return
                         {|{|Y|} +
                           {|sum incrementing by (X) from
                             ({|Y|} + {|X|}) to (Z)|}|}|}|}|}|}|}
sum incrementing by (1) from (1) to (20)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum incrementing
     by (1) from (1) to (20)|}
sum incrementing by (1) to (20) from (1)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum incrementing
     by (1) to (20) from (1)|}
sum incrementing by (-1) to (1) from (20)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum incrementing
     by (-1) to (1) from (20)|}

function (X) (Y): return X[Y]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|(X) (Y)|} ":" {|return {|X [Y]|}|}|}
L = [1, 2, 3, 4, 5]
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|L|} =
     [{|1|}, {|2|}, {|3|}, {|4|}, {|5|}]|}
(L)(0)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(L) (0)|}
(L)(3)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(L) (3)|}
(L)(5)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(L) (5)|}

// Default Arguments
//
function increment (X) by (Y ?= 1): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|increment (X) by ({|Y|} ?= {|1|})|} ":"
     {|return {|{|X|} + {|Y|}|}|}|}
increment (4) by (5)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|increment (4) by
     (5)|}
increment (4)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|increment (4)|}

function add (X ?= 1) to (Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add ({|X|} ?= {|1|}) to (Y)|} ":" {|return {|{|X|} + {|Y|}|}|}|}
add (3) to (4)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add (3) to (4)|}
add to (4)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add to (4)|}

function look ( X ?= Q ): return X
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|look ({|X|} ?= {|Q|})|} ":" {|return {|X|}|}|}
look ( 0 )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|look (0)|}
Q = 100
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Q|} = {|100|}|}
look
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|look|}
next Q = 200
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|next Q|} =
     {|200|}|}
look
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|look|}

function adjust ( X ?= 1, Y ): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|adjust ({|{|X|} ?= {|1|}|}, {|Y|})|} ":"
     {|return {|{|X|} + {|Y|}|}|}|}

function (X ?= 1) adjust (Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|({|X|} ?= {|1|}) adjust (Y)|} ":" {|return {|{|X|} + {|Y|}|}|}|}

function my adder (X ?= 1) (Y): return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|my adder ({|X|} ?= {|1|}) (Y)|} ":"
     {|return {|{|X|} + {|Y|}|}|}|}

function my adder 2 (X ?= 1) [Y ?= 2]: return X + Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|my adder 2 ({|X|} ?= {|1|}) [{|Y|} ?= {|2|}]|} ":"
     {|return {|{|X|} + {|Y|}|}|}|}


// Boolean Terms
//
function test (X) option ( Y ?= *TRUE* ): return X, Y
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|test (X) option ({|Y|} ?= {|*TRUE*|})|} ":"
     {|return {|{|X|}, {|Y|}|}|}|}
test (3)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|test (3)|}
test (3) no option
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|test (3) no
     option|}
test (3) option
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|test (3) option|}
test (3) option ( *FALSE* )
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|test (3) option
     (*FALSE*)|}

// Naked Arguments
//
X = 10
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|X|} = {|10|}|}
add (X) 1      // Instead of `add (X) (1)'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add (X) 1|}
(X) add 2      // Instead of `(X) add (2)'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|(X) add 2|}
add 2 "HI"     // Instead of `add (2) ("HI")'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|add 2 "HI"|}
sum [1, 2, 3]  // Instead of `sum ([1, 2, 3])'
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum
     [{|1|}, {|2|}, {|3|}]|}
