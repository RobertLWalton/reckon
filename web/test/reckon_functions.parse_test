// Reckon Language Function Test Data
//
// File:        reckon_functions.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Sat May 17 12:36:45 AM EDT 2025
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

function add (X) (Y):
    Z = X + Y
    return Z
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|add (X) (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
               {|{|X|} + {|Y|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|Z|}|}|}|}

Z = add (5) (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|Z|} =
     {|add (5) (7)|}|}

function (X) sub (Y): return X - Y;
{"": .terminator = ";", .initiator = *LOGICAL_LINE*|function
     {|(X) sub (Y)|} ":" {|return {|{|X|} - {|Y|}|}|}|}

W = (5) sub (7)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|W|} =
     {|(5) sub (7)|}|}

function sum from (X) to (Y):
    S = 0
    while X <= Y:
        next S + = X
        next X + = 1
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum from (X) to (Y)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|while {|{|X|} <= {|Y|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|X|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next X|} [< + = >] {|1|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum from (1) to (10)
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum from (1) to
     (10)|}

function sum (L):
    S = 0
    E = L[]
    until E == *NONE*:
        next S + = E
        next E = L[]
    return S
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|function
     {|sum (L)|}
     {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|S|} =
               {|0|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|{|E|} =
               {|L []|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
               {|until {|{|E|} == {|*NONE*|}|}|}
               {"": .terminator = *INDENTED_PARAGRAPH*, .initiator =
                    ":"|
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next S|} [< + = >] {|E|}|}
                    {"": .terminator = "<LF>", .initiator =
                         *LOGICAL_LINE*|{|next E|} = {|L []|}|}|}|}
          {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
               {|S|}|}|}|}

sum ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
{"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|sum
     ([{|1|}, {|2|}, {|3|}, {|4|}, {|5|}, {|6|}, {|7|}, {|8|}, {|9|},
       {|10|}])|}
