* {0:0,1,1} PUSHI: *FALSE* <= *FALSE*
* {0:1,2,2} PUSHI: *TRUE* <= *TRUE*
// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Tue Nov 19 07:05:53 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
* {12:2,3,3} PUSHI: X <= 5
Z = 8
* {13:3,4,4} PUSHI: Z <= 8
Y = Z
* {14:4,5,5} PUSHS: Y <= Z = 8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
* {16:5,6,6} PUSHI: * <= 10

next Z = - Z
* {16:6,7,7} PUSHS: * <= * = 8
* {18:7,7,8} NEG: next Y = -8 <= - 8
next Z = X + Z
* {21:8,8,9} PUSHS: * <= Z = 5
* {21:9,9,10} PUSHS: Z <= next = -8
* {22:10,8,11} ADD: X "*" = -3 <= 5 + -8
next Z = X + Y - Z
* {22:11,9,12} PUSHS: * <= Z = 5
* {22:12,10,13} PUSHS: Z <= next = 10
* {23:13,9,14} ADD: X "*" = 15 <= 5 + 10
* {23:14,10,15} PUSHS: * <= Y = -3
* {23:15,9,16} SUB: * = 18 <= 15 - -3
next Z = X + ( Y - Z )
* {23:16,10,17} PUSHS: * <= Z = 5
* {23:17,11,18} PUSHS: Z <= next = 10
* {24:18,12,19} PUSHS: * <= X = 18
* {24:19,11,20} SUB: Y "*" = -8 <= 10 - 18
* {24:20,10,21} ADD: Z "*" = -3 <= 5 + -8

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
* {24:21,11,22} PUSHI: * <= 5
* {24:22,12,23} PUSHI: next Z <= 10

next M, next N = N, M
* {28:23,13,24} PUSHS: * <= * = 10
* {28:24,14,25} PUSHS: * <= * = 5


P, Q = M * N, M + N
* {32:25,15,26} PUSHS: next M <= N = 10
* {32:26,16,27} PUSHS: next N <= M = 5
* {35:27,15,28} MUL: M "*" = 50 <= 10 * 5
* {35:28,16,29} PUSHS: * <= N = 10
* {35:29,17,30} PUSHS: * <= * = 5
* {35:30,16,31} ADD: M "*" = 15 <= 10 + 5

R, next P = P / Q, P + 1
* {35:31,17,32} PUSHS: * <= N = 50
* {35:32,18,33} PUSHS: * <= * = 15
* {37:33,17,34} DIV: P "*" = 3.33333333333333 <= 50 / 15
* {37:34,18,35} PUSHS: * <= Q = 50
* {37:35,19,36} PUSHI: R <= 1
* {37:36,18,37} ADD: P "*" = 51 <= 50 + 1

// Block Assignments
//
E, F =:
    E = 25
    F = -25
* {37:37,19,38} PUSHI: * <= 0
* {37:38,20,39} PUSHI: next P <= 0
* {41:39,20,40} BEG
*** {41:40,21,41} PUSHI: F <= 25
*** {43:41,20,42} POPS: * <= * = 25
*** {42:42,21,43} PUSHI: E <= -25
*** {41:43,20,44} POPS: E <= * = -25
*** {43:44,20,45} END

E, F // Outputs first the value of E and then the value of F.
* {41:45,21,46} PUSHS: F <= * = 25
* {43:46,22,47} PUSHS: * <= * = -25

next E, next F =:
    next E = 35
       // This does not take effect until after
       // this subblock has executed
    next F = E
       // The value of E is the value before the
       // subblock executes
* {45:47,23,48} PUSHS: * <= E = 25
* {45:48,24,49} PUSHS: * <= F = -25
* {47:49,24,50} BEG: E, E=-25
*** {47:50,25,51} PUSHI: F F <= 35
*** {53:51,24,52} POPS: * <= * = 35
*** {48:52,25,53} PUSHS: E <= next = 25
*** {47:53,24,54} POPS: next E <= * = 25
*** {51:54,24,55} END: E, next F=25

E, F
* {47:55,25,56} PUSHS: next F <= * = 35
* {53:56,26,57} PUSHS: * <= * = 25

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
next E = 25
* {55:57,27,58} PUSHI: E "*" <= 25
SIGN E = do:
    // The `do' here is cosmetic and has no effect.
    if E < 0: SIGN E = -1
        // SIGN E = -1 is a restricted statement (it
        // is an operand of `if ... : ...') that
        // cannot allocate new variables, but it can
        // write write-only variables.
    else if E == 0: SIGN E = 0
    else: SIGN E = +1
* {55:58,28,59} PUSHI: F "*" <= 0
* {57:59,28,60} BEG
*** {57:60,29,61} PUSHS: * <= * = 25
*** {60:61,30,62} PUSHI: *MISSING* <= 0
*** {58:62,28,63} JMPGEQ E J is successful: true <= 25 >= 0
*** {59:66,29,64} PUSHS: * <= * = 25
*** {57:67,30,65} PUSHI: "*" K <= 0
*** {60:68,28,66} JMPNEQ location 72 is successful: true <= 25 != 0
*** {67:72,29,67} PUSHI: E "*" <= 1
*** {67:73,28,68} POPS: * <= * = 1
*** {67:74,28,69} END

do:
    if E < 20:
        JX = 5
        next E = -1
    else if E < 40:
        JX = 6
        next E = 0
    else:
        JX = 7
        next E = +1
* {67:75,29,70} PUSHS: E <= SIGN = 25
* {65:76,29,71} BEG: *, SIGN E=25
*** {67:77,30,72} PUSHS: * <= * = 25
*** {72:78,31,73} PUSHI: E "*" <= 20
*** {72:79,29,74} JMPGEQ * is successful: true <= 25 >= 20
*** {73:86,30,75} PUSHS: * <= * = 25
*** {78:87,31,76} PUSHI: E E <= 40
*** {84:88,29,77} JMPGEQ location 95 is UNsuccessful: false <= 25 >= 40
*** {76:89,29,78} BEG: E, *=25
***** {76:90,30,79} PUSHI: * <= 6
***** {76:91,31,80} PUSHI: 11 <= 0
***** {78:92,30,81} POPS: * <= * = 0
***** {77:93,29,82} END
*** {78:94,29,83} JMP next E
*** {79:100,29,84} END
E, JX
ERROR: in line ##: cannot understand expression:
E, JX
   ^^
[no output due to compile error]


// Next variable promotion
//
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
* {81:101,30,85} PUSHS: * <= * = 1
* {80:102,30,86} BEG
*** {81:103,31,87} PUSHS: E <= next = 1
*** {78:104,32,88} PUSHI: "*" next E <= 10
*** {81:105,31,89} ADD: *MISSING* = 11 <= 1 + 10
*** {79:106,30,90} POPS: * <= * = 11
*** {84:107,30,91} END

// Exit statements in blocks.
//
exit
ERROR: in line ##: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
* {83:108,31,92} PUSHI: JX <= 0
* {84:109,31,93} BEG: next, E=0
*** {78:110,32,94} PUSHI: "*" next E <= 5
*** {84:111,31,95} POPS: * <= * = 5
*** {84:112,32,96} PUSHI: *MISSING* <= 15
*** {85:113,31,97} POPS: * <= E = 15
*** {91:114,31,98} JMP E E

X1
* {91:118,32,99} PUSHS: E <= next = 15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
* {91:119,33,100} PUSHI: "*" next E <= 0
* {93:120,33,101} BEG
*** {99:121,34,102} PUSHI: X1 <= 5
*** {103:122,33,103} POPS: * <= * = 5
*** {100:123,34,104} PUSHI: X1 <= 15
*** {99:124,33,105} POPS: X1 <= * = 15
*** {101:125,33,106} BEG
***** {99:126,33,107} JMP "*" X1

X2
* {105:131,34,108} PUSHS: * <= X1 = 15
