// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Sun Nov 24 11:31:26 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
* {13:0,1,1} PUSHI: X <= 5
Z = 8
* {14:1,2,2} PUSHI: Z <= 8
Y = Z
* {15:2,3,3} PUSHS: Y <= Z = 8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
* {19:3,4,4} PUSHI: next Y <= 10

next Z = - Z
* {22:4,5,5} PUSHS: * <= Z = 8
* {22:5,5,6} NEG: next Z = -8 <= - 8
next Z = X + Z
* {23:6,6,7} PUSHS: * <= X = 5
* {23:7,7,8} PUSHS: * <= Z = -8
* {23:8,6,9} ADD: next Z = -3 <= 5 + -8
next Z = X + Y - Z
* {24:9,7,10} PUSHS: * <= X = 5
* {24:10,8,11} PUSHS: * <= Y = 10
* {24:11,7,12} ADD: * = 15 <= 5 + 10
* {24:12,8,13} PUSHS: * <= Z = -3
* {24:13,7,14} SUB: next Z = 18 <= 15 - -3
next Z = X + ( Y - Z )
* {25:14,8,15} PUSHS: * <= X = 5
* {25:15,9,16} PUSHS: * <= Y = 10
* {25:16,10,17} PUSHS: * <= Z = 18
* {25:17,9,18} SUB: * = -8 <= 10 - 18
* {25:18,8,19} ADD: next Z = -3 <= 5 + -8

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
* {29:19,9,20} PUSHI: M <= 5
* {29:20,10,21} PUSHI: N <= 10

next M, next N = N, M
* {33:21,11,22} PUSHS: next M <= N = 10
* {33:22,12,23} PUSHS: next N <= M = 5


P, Q = M * N, M + N
* {36:23,13,24} PUSHS: * <= M = 10
* {36:24,14,25} PUSHS: * <= N = 5
* {36:25,13,26} MUL: P = 50 <= 10 * 5
* {36:26,14,27} PUSHS: * <= M = 10
* {36:27,15,28} PUSHS: * <= N = 5
* {36:28,14,29} ADD: Q = 15 <= 10 + 5

R, next P = P / Q, P + 1
* {38:29,15,30} PUSHS: * <= P = 50
* {38:30,16,31} PUSHS: * <= Q = 15
* {38:31,15,32} DIV: R = 3.33333333333333 <= 50 / 15
* {38:32,16,33} PUSHS: * <= P = 50
* {38:33,17,34} PUSHI: * <= 1
* {38:34,16,35} ADD: next P = 51 <= 50 + 1

// Block Assignments
//
E, F =:
    E = 25
    F = -25
* {42:35,17,36} PUSHI: E <= 0
* {42:36,18,37} PUSHI: F <= 0
* {44:37,18,38} BEG
*** {43:38,19,39} PUSHI: * <= 25
*** {43:39,18,40} POPS: E <= * = 25
*** {44:40,19,41} PUSHI: * <= -25
*** {44:41,18,42} POPS: F <= * = -25
*** {44:42,18,43} END

E, F // Outputs first the value of E and then the value of F.
* {46:43,19,44} PUSHS: * <= E = 25
* {46:44,20,45} PUSHS: * <= F = -25

next E, next F = do:
    // The `do' here is cosmetic and has no effect.
    next E = 35
        // This does not take effect until after
        // this subblock has executed
    next F = E
        // The value of E is the value before the
        // subblock executes
* {48:45,21,46} PUSHS: E <= E = 25
* {48:46,22,47} PUSHS: F <= F = -25
* {55:47,22,48} BEG
*** {50:48,23,49} PUSHI: * <= 35
*** {50:49,22,50} POPS: next E <= * = 35
*** {53:50,23,51} PUSHS: * <= E = 25
*** {53:51,22,52} POPS: next F <= * = 25
*** {55:52,22,53} END
E, F
* {56:53,23,54} PUSHS: * <= E = 35
* {56:54,24,55} PUSHS: * <= F = 25

J, K = do:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
S = 25
* {65:55,25,56} PUSHI: S <= 25
next S =:
    if S > 20: next S = 20
        // S = 20 is a restricted statement.  It is an
        // operand of `if ... : ... ' and cannot have
        // operators with precedence 0000.  It cannot
        // allocate variables, but can write variables
        // that are write-only.
* {66:56,26,57} PUSHS: S <= S = 25
* {72:57,26,58} BEG
*** {67:58,27,59} PUSHS: * <= S = 25
*** {67:59,28,60} PUSHI: * <= 20
*** {67:60,26,61} JMPLEQ location 63 is UNsuccessful: false <= 25 <= 20
*** {67:61,27,62} PUSHI: * <= 20
*** {67:62,26,63} POPS: next S <= * = 20
*** {72:63,26,64} END
S
* {73:64,27,65} PUSHS: * <= S = 20

T = 25
* {75:65,28,66} PUSHI: T <= 25
SIGN T = do:
    if T < 0: SIGN T = -1
    else if T == 0: SIGN T = 0
    else: SIGN T = +1
* {76:66,29,67} PUSHI: SIGN T <= 0
* {79:67,29,68} BEG
*** {77:68,30,69} PUSHS: * <= T = 25
*** {77:69,31,70} PUSHI: * <= 0
*** {77:70,29,71} JMPGEQ location 74 is successful: true <= 25 >= 0
*** {78:74,30,72} PUSHS: * <= T = 25
*** {78:75,31,73} PUSHI: * <= 0
*** {78:76,29,74} JMPNEQ location 80 is successful: true <= 25 != 0
*** {79:80,30,75} PUSHI: * <= 1
*** {79:81,29,76} POPS: SIGN T <= * = 1
*** {79:82,29,77} END
SIGN T
* {80:83,30,78} PUSHS: * <= SIGN T = 1

next T = do:
    if T < -20:
        JX = 5        // Allocates JX to block.
        next T = -20   // Just writes next SIGN T.
        // JX is deallocated here (end of its block)
    else if T > 20:
        JX = 6
        next T = 20
* {82:84,31,79} PUSHS: T <= T = 25
* {89:85,31,80} BEG
*** {83:86,32,81} PUSHS: * <= T = 25
*** {83:87,33,82} PUSHI: * <= -20
*** {83:88,31,83} JMPGEQ location 95 is successful: true <= 25 >= -20
*** {87:95,32,84} PUSHS: * <= T = 25
*** {87:96,33,85} PUSHI: * <= 20
*** {87:97,31,86} JMPLEQ location 103 is UNsuccessful: false <= 25 <= 20
*** {89:98,31,87} BEG
***** {88:99,32,88} PUSHI: JX <= 6
***** {89:100,33,89} PUSHI: * <= 20
***** {89:101,32,90} POPS: next T <= * = 20
***** {89:102,31,91} END
*** {89:103,31,92} END
T
* {90:104,32,93} PUSHS: * <= T = 20
JX    // JX has been deallocated.
ERROR: in line ##: cannot understand expression:
JX    // JX has been deallocated.
^^
[no output due to compile error]


// Next variable implication
//
D = 95
* {96:105,33,94} PUSHI: D <= 95
do:
    // In `next D = do' the next D is implied by the
    // following statement.
    next D = D + 10
* {100:106,34,95} PUSHS: D <= D = 95
* {100:107,34,96} BEG
*** {100:108,35,97} PUSHS: * <= D = 95
*** {100:109,36,98} PUSHI: * <= 10
*** {100:110,35,99} ADD: * = 105 <= 95 + 10
*** {100:111,34,100} POPS: next D <= * = 105
*** {100:112,34,101} END
D
* {101:113,35,102} PUSHS: * <= D = 105
do:
    // In `next D = do' the next D is implied by the
    // statement `next D = 33'.

    JX = 50
    do:
        // In `next JX = do' the next JX is implied by
        // the statement `next JX = 60'.

        next D = 33
        next JX = 60
    // JX is deallocated here
* {111:114,36,103} PUSHS: D <= D = 105
* {112:115,36,104} BEG
*** {106:116,37,105} PUSHI: JX <= 50
*** {112:117,38,106} PUSHS: JX <= JX = 50
*** {112:118,38,107} BEG
***** {111:119,39,108} PUSHI: * <= 33
***** {111:120,38,109} POPS: next D <= * = 33
***** {112:121,39,110} PUSHI: * <= 60
***** {112:122,38,111} POPS: next JX <= * = 60
***** {112:123,38,112} END
*** {112:124,36,113} END
D
* {114:125,37,114} PUSHS: * <= D = 33

// Variable modifying statements
//
W = 13
* {118:126,38,115} PUSHI: W <= 13
next W =:
    next W + = 4
* {119:127,39,116} PUSHS: W <= W = 13
* {120:128,39,117} BEG
*** {119:129,40,118} PUSHS: W <= W = 13
*** {120:130,41,119} PUSHI: * <= 4
*** {120:131,40,120} ADD: * = 17 <= 13 + 4
*** {119:132,39,121} POPS: next W <= * = 17
*** {120:133,39,122} END
next W =:
    next W * = 10
* {121:134,40,123} PUSHS: W <= W = 17
* {122:135,40,124} BEG
*** {121:136,41,125} PUSHS: W <= W = 17
*** {122:137,42,126} PUSHI: * <= 10
*** {122:138,41,127} MUL: * = 170 <= 17 * 10
*** {121:139,40,128} POPS: next W <= * = 170
*** {122:140,40,129} END
W
* {123:141,41,130} PUSHS: * <= W = 170

do:
    next W / = 10
    next W - = 4
* {126:142,42,131} PUSHS: W <= W = 170
* {127:143,42,132} BEG
*** {126:144,43,133} PUSHS: W <= W = 170
*** {126:145,44,134} PUSHI: * <= 10
*** {126:146,43,135} DIV: * = 17 <= 170 / 10
*** {126:147,42,136} POPS: next W <= * = 17
*** {126:148,43,137} PUSHS: W <= W = 17
*** {127:149,44,138} PUSHI: * <= 4
*** {127:150,43,139} SUB: * = 13 <= 17 - 4
*** {126:151,42,140} POPS: next W <= * = 13
*** {127:152,42,141} END

do:
    next W = 1
    do:
        next W << = 10
* {130:153,43,142} PUSHS: W <= W = 13
* {132:154,43,143} BEG
*** {130:155,44,144} PUSHI: * <= 1
*** {130:156,43,145} POPS: next W <= * = 1
*** {132:157,43,146} BEG
***** {130:158,44,147} PUSHS: W <= W = 1
***** {132:159,45,148} PUSHI: * <= 10
***** {132:160,44,149} LSH: * = 1024 <= 1 << 10
***** {130:161,43,150} POPS: next W <= * = 1024
***** {132:162,43,151} END
*** {132:163,43,152} END

do:
    next W >> = 10
* {135:164,44,153} PUSHS: W <= W = 1024
* {135:165,44,154} BEG
*** {135:166,45,155} PUSHS: W <= W = 1024
*** {135:167,46,156} PUSHI: * <= 10
*** {135:168,45,157} RSH: * = 1 <= 1024 >> 10
*** {135:169,44,158} POPS: next W <= * = 1
*** {135:170,44,159} END

next W = 13
* {137:171,45,160} PUSHI: next W <= 13
do:
    if W < 20: next W + = 7
    // Here W == 13 and next W == 20
    if W < 20: next W + = 20
* {139:172,46,161} PUSHS: W <= W = 13
* {141:173,46,162} BEG
*** {139:174,47,163} PUSHS: * <= W = 13
*** {139:175,48,164} PUSHI: * <= 20
*** {139:176,46,165} JMPGEQ location 181 is UNsuccessful: false <= 13
                     >= 20
*** {139:177,47,166} PUSHS: W <= W = 13
*** {139:178,48,167} PUSHI: * <= 7
*** {139:179,47,168} ADD: * = 20 <= 13 + 7
*** {139:180,46,169} POPS: next W <= * = 20
*** {141:181,47,170} PUSHS: * <= W = 13
*** {141:182,48,171} PUSHI: * <= 20
*** {141:183,46,172} JMPGEQ location 188 is UNsuccessful: false <= 13
                     >= 20
*** {139:184,47,173} PUSHS: W <= W = 20
*** {141:185,48,174} PUSHI: * <= 20
*** {141:186,47,175} ADD: * = 40 <= 20 + 20
*** {139:187,46,176} POPS: next W <= * = 40
*** {141:188,46,177} END

// Exit statements in blocks.
//
exit
ERROR: in line ###: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
* {147:189,47,178} PUSHI: X1 <= 0
* {151:190,47,179} BEG
*** {148:191,48,180} PUSHI: * <= 5
*** {148:192,47,181} POPS: X1 <= * = 5
*** {149:193,48,182} PUSHI: * <= 15
*** {149:194,47,183} POPS: X1 <= * = 15
*** {150:195,47,184} JMP location 199

X1
* {153:199,48,185} PUSHS: * <= X1 = 15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
* {155:200,49,186} PUSHI: X2 <= 0
* {160:201,49,187} BEG
*** {156:202,50,188} PUSHI: * <= 5
*** {156:203,49,189} POPS: X2 <= * = 5
*** {157:204,50,190} PUSHI: * <= 15
*** {157:205,49,191} POPS: X2 <= * = 15
*** {159:206,49,192} BEG
***** {159:207,49,193} JMP location 212

X2
* {162:212,50,194} PUSHS: * <= X2 = 15
