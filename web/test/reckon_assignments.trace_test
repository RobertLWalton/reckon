* {0:0,1,1} PUSHI: *FALSE* <= *FALSE*
* {0:1,2,2} PUSHI: *TRUE* <= *TRUE*
// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Mon Nov 18 05:33:24 EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
* {12:2,3,3} PUSHI: X <= 5
Z = 8
* {13:3,4,4} PUSHI: Z <= 8
Y = Z
* {14:4,5,5} PUSHS: Y <= Z = 8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
ERROR: in lines ##-##: statement ignored due to previous errors:
Y = 10
^^^^^^
    // It is illegal to reassign Y.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
* {18:5,6,6} PUSHI: next Y <= 10

next Z = - Z
* {21:6,7,7} PUSHS: * <= Z = 8
* {21:7,7,8} NEG: next Z = -8 <= - 8
next Z = X + Z
* {22:8,8,9} PUSHS: * <= X = 5
* {22:9,9,10} PUSHS: * <= Z = -8
* {22:10,8,11} ADD: next Z = -3 <= 5 + -8
next Z = X + Y - Z
* {23:11,9,12} PUSHS: * <= X = 5
* {23:12,10,13} PUSHS: * <= Y = 10
* {23:13,9,14} ADD: * = 15 <= 5 + 10
* {23:14,10,15} PUSHS: * <= Z = -3
* {23:15,9,16} SUB: next Z = 18 <= 15 - -3
next Z = X + ( Y - Z )
* {24:16,10,17} PUSHS: * <= X = 5
* {24:17,11,18} PUSHS: * <= Y = 10
* {24:18,12,19} PUSHS: * <= Z = 18
* {24:19,11,20} SUB: * = -8 <= 10 - 18
* {24:20,10,21} ADD: next Z = -3 <= 5 + -8

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
* {28:21,11,22} PUSHI: M <= 5
* {28:22,12,23} PUSHI: N <= 10

next M, next N = N, M
* {32:23,13,24} PUSHS: next M <= N = 10
* {32:24,14,25} PUSHS: next N <= M = 5


P, Q = M * N, M + N
* {35:25,15,26} PUSHS: * <= M = 10
* {35:26,16,27} PUSHS: * <= N = 5
* {35:27,15,28} MUL: P = 50 <= 10 * 5
* {35:28,16,29} PUSHS: * <= M = 10
* {35:29,17,30} PUSHS: * <= N = 5
* {35:30,16,31} ADD: Q = 15 <= 10 + 5

R, next P = P / Q, P + 1
* {37:31,17,32} PUSHS: * <= P = 50
* {37:32,18,33} PUSHS: * <= Q = 15
* {37:33,17,34} DIV: R = 3.33333333333333 <= 50 / 15
* {37:34,18,35} PUSHS: * <= P = 50
* {37:35,19,36} PUSHI: * <= 1
* {37:36,18,37} ADD: next P = 51 <= 50 + 1

// Block Assignments
//
E, F =:
    E = 25
    F = -25
* {41:37,19,38} PUSHI: E <= 0
* {41:38,20,39} PUSHI: F <= 0
* {43:39,20,40} BEG
*** {42:40,21,41} PUSHI: E <= 25
*** {41:41,20,42} POPS: E <= * = 25
*** {43:42,21,43} PUSHI: F <= -25
*** {41:43,20,44} POPS: F <= * = -25
*** {43:44,20,45} END

E
* {45:45,21,46} PUSHS: * <= E = 25
F
* {46:46,22,47} PUSHS: * <= F = -25

next E, next F =:
    next E = 35
       // This does not take effect until after
       // this subblock has executed
    next F = E
       // The value of E is the value before the
       // subblock executes
* {48:47,23,48} PUSHS: E <= E = 25
* {48:48,24,49} PUSHS: F <= F = -25
* {54:49,24,50} BEG
*** {49:50,25,51} PUSHI: next E <= 35
*** {48:51,24,52} POPS: next E <= * = 35
*** {52:52,25,53} PUSHS: next F <= E = 25
*** {48:53,24,54} POPS: next F <= * = 25
*** {54:54,24,55} END

E
* {56:55,25,56} PUSHS: * <= E = 35
F
* {57:56,26,57} PUSHS: * <= F = 25

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// Use of if. else if, else inside subblock
//
next E = 25
* {59:57,27,58} PUSHI: J <= 25
SIGN E = do:
    // The `do' here is cosmetic and has no effect.
    if E < 0: SIGN E = -1
        // SIGN E = -1 is a restricted statement (it
        // is an operand of `if ... : ...') that
        // cannot allocate new variables, but it can
        // write write-only variables.
    else if E == 0: SIGN E = 0
    else: SIGN E = +1
* {59:58,28,59} PUSHI: K <= 0
* {62:59,28,60} BEG
*** {60:60,29,61} PUSHS: J <= E = 25
*** {59:61,30,62} PUSHI: "*" J <= 0
*** {61:62,28,63} JMPGEQ * is successful: true <= 25 >= 0
*** {62:66,29,64} PUSHS: * <= * = 25
*** {66:67,30,65} PUSHI: next E <= 0
*** {67:68,28,66} JMPNEQ SIGN E is successful: true <= 25 != 0
*** {69:72,29,67} PUSHI: 5 <= 1
*** {69:73,28,68} POPS: E <= SIGN = 1
*** {67:74,28,69} END: *, SIGN E=1

// Next variable promotion
//
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
* {69:75,29,70} PUSHS: * <= * = 25
* {74:76,29,71} BEG: E, *=25
*** {74:77,30,72} PUSHS: * <= * = 25
*** {74:78,31,73} PUSHI: 8 <= 10
*** {74:79,30,74} ADD: SIGN E = 35 <= 25 + 10
*** {67:80,29,75} POPS: SIGN E <= * = 35
*** {74:81,29,76} END

// Exit statements
//
exit
ERROR: in line ##: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
* {75:82,30,77} PUSHI: SIGN E <= 0
* {67:83,30,78} BEG: *, SIGN E=0
*** {75:84,31,79} PUSHI: *MISSING* <= 5
*** {80:85,30,80} POPS: E <= E = 5
*** {82:86,31,81} PUSHI: *MISSING* <= 15
*** {80:87,30,82} POPS: * <= E = 15
*** {80:88,30,83} JMP *

X1
* {88:92,31,84} PUSHS: * <= * = 15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
* {92:93,32,85} PUSHI: *MISSING* <= 0
* {89:94,32,86} BEG
*** {88:95,33,87} PUSHI: "*" X1 <= 5
*** {90:96,32,88} POPS: * <= * = 5
*** {88:97,33,89} PUSHI: "*" X1 <= 15
*** {91:98,32,90} POPS: * <= * = 15
*** {92:99,32,91} BEG
***** {88:100,32,92} JMP "*" X1

X2
* {97:105,33,93} PUSHS: * <= * = 15
