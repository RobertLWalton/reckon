* {0:0,1,1} PUSHI: *FALSE* <= *FALSE*
* {0:1,2,2} PUSHI: *TRUE* <= *TRUE*
* {0:2,3,3} PUSHI: *NONE* <= *NONE*
// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Sun Nov 24 11:31:26 PM EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
* {13:3,4,4} PUSHI: X <= 5
Z = 8
* {14:4,5,5} PUSHI: Z <= 8
Y = Z
* {15:5,6,6} PUSHS: Y <= Z = 8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
* {19:6,7,7} PUSHI: next Y <= 10

next Z = - Z
* {22:7,8,8} PUSHS: * <= Z = 8
* {22:8,8,9} NEG: next Z = -8 <= - 8
next Z = X + Z
* {23:9,9,10} PUSHS: * <= X = 5
* {23:10,10,11} PUSHS: * <= Z = -8
* {23:11,9,12} ADD: next Z = -3 <= 5 + -8
next Z = X + Y - Z
* {24:12,10,13} PUSHS: * <= X = 5
* {24:13,11,14} PUSHS: * <= Y = 10
* {24:14,10,15} ADD: * = 15 <= 5 + 10
* {24:15,11,16} PUSHS: * <= Z = -3
* {24:16,10,17} SUB: next Z = 18 <= 15 - -3
next Z = X + ( Y - Z )
* {25:17,11,18} PUSHS: * <= X = 5
* {25:18,12,19} PUSHS: * <= Y = 10
* {25:19,13,20} PUSHS: * <= Z = 18
* {25:20,12,21} SUB: * = -8 <= 10 - 18
* {25:21,11,22} ADD: next Z = -3 <= 5 + -8

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
* {29:22,12,23} PUSHI: M <= 5
* {29:23,13,24} PUSHI: N <= 10

next M, next N = N, M
* {33:24,14,25} PUSHS: next M <= N = 10
* {33:25,15,26} PUSHS: next N <= M = 5


P, Q = M * N, M + N
* {36:26,16,27} PUSHS: * <= M = 10
* {36:27,17,28} PUSHS: * <= N = 5
* {36:28,16,29} MUL: P = 50 <= 10 * 5
* {36:29,17,30} PUSHS: * <= M = 10
* {36:30,18,31} PUSHS: * <= N = 5
* {36:31,17,32} ADD: Q = 15 <= 10 + 5

R, next P = P / Q, P + 1
* {38:32,18,33} PUSHS: * <= P = 50
* {38:33,19,34} PUSHS: * <= Q = 15
* {38:34,18,35} DIV: R = 3.33333333333333 <= 50 / 15
* {38:35,19,36} PUSHS: * <= P = 50
* {38:36,20,37} PUSHI: * <= 1
* {38:37,19,38} ADD: next P = 51 <= 50 + 1

// Block Assignments
//
E, F =:
    E = 25
    F = -25
* {42:38,20,39} PUSHI: E <= 0
* {42:39,21,40} PUSHI: F <= 0
* {44:40,21,41} BEG
*** {43:41,22,42} PUSHI: E <= 25
*** {42:42,21,43} POPS: E <= * = 25
*** {44:43,22,44} PUSHI: F <= -25
*** {42:44,21,45} POPS: F <= * = -25
*** {44:45,21,46} END

E, F // Outputs first the value of E and then the value of F.
* {46:46,22,47} PUSHS: * <= E = 25
* {46:47,23,48} PUSHS: * <= F = -25

next E, next F = do:
    // The `do' here is cosmetic and has no effect.
    next E = 35
        // This does not take effect until after
        // this subblock has executed
    next F = E
        // The value of E is the value before the
        // subblock executes
* {48:48,24,49} PUSHS: E <= E = 25
* {48:49,25,50} PUSHS: F <= F = -25
* {55:50,25,51} BEG
*** {50:51,26,52} PUSHI: next E <= 35
*** {48:52,25,53} POPS: next E <= * = 35
*** {53:53,26,54} PUSHS: next F <= E = 25
*** {48:54,25,55} POPS: next F <= * = 25
*** {55:55,25,56} END
E, F
* {56:56,26,57} PUSHS: * <= E = 35
* {56:57,27,58} PUSHS: * <= F = 25

J, K = do:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
S = 25
* {65:58,28,59} PUSHI: S <= 25
next S =:
    if S > 20: next S = 20
        // S = 20 is a restricted statement.  It is an
        // operand of `if ... : ... ' and cannot have
        // operators with precedence 0000.  It cannot
        // allocate variables, but can write variables
        // that are write-only.
* {66:59,29,60} PUSHS: S <= S = 25
* {72:60,29,61} BEG
*** {67:61,30,62} PUSHS: * <= S = 25
*** {67:62,31,63} PUSHI: * <= 20
*** {67:63,29,64} JMPLEQ location 66 is UNsuccessful: false <= 25 <= 20
*** {67:64,30,65} PUSHI: next S <= 20
*** {66:65,29,66} POPS: next S <= * = 20
*** {72:66,29,67} END
S
* {73:67,30,68} PUSHS: * <= S = 20

T = 25
* {75:68,31,69} PUSHI: T <= 25
SIGN T = do:
    if T < 0: SIGN T = -1
    else if T == 0: SIGN T = 0
    else: SIGN T = +1
* {76:69,32,70} PUSHI: SIGN T <= 0
* {79:70,32,71} BEG
*** {77:71,33,72} PUSHS: * <= T = 25
*** {77:72,34,73} PUSHI: * <= 0
*** {77:73,32,74} JMPGEQ location 77 is successful: true <= 25 >= 0
*** {78:77,33,75} PUSHS: * <= T = 25
*** {78:78,34,76} PUSHI: * <= 0
*** {78:79,32,77} JMPNEQ location 83 is successful: true <= 25 != 0
*** {79:83,33,78} PUSHI: SIGN T <= 1
*** {76:84,32,79} POPS: SIGN T <= * = 1
*** {79:85,32,80} END
SIGN T
* {80:86,33,81} PUSHS: * <= SIGN T = 1

next T = do:
    if T < -20:
        JX = 5        // Allocates JX to block.
        next T = -20   // Just writes next SIGN T.
        // JX is deallocated here (end of its block)
    else if T > 20:
        JX = 6
        next T = 20
* {82:87,34,82} PUSHS: T <= T = 25
* {89:88,34,83} BEG
*** {83:89,35,84} PUSHS: * <= T = 25
*** {83:90,36,85} PUSHI: * <= -20
*** {83:91,34,86} JMPGEQ location 98 is successful: true <= 25 >= -20
*** {87:98,35,87} PUSHS: * <= T = 25
*** {87:99,36,88} PUSHI: * <= 20
*** {87:100,34,89} JMPLEQ location 106 is UNsuccessful: false <= 25
                   <= 20
*** {89:101,34,90} BEG
***** {88:102,35,91} PUSHI: JX <= 6
***** {89:103,36,92} PUSHI: next T <= 20
***** {82:104,35,93} POPS: next T <= * = 20
***** {89:105,34,94} END
*** {89:106,34,95} END
T
* {90:107,35,96} PUSHS: * <= T = 20
JX    // JX has been deallocated.
ERROR: in line ##: cannot understand expression:
JX    // JX has been deallocated.
^^
[no output due to compile error]


// Next variable implication
//
D = 95
* {96:108,36,97} PUSHI: D <= 95
do:
    // In `next D = do' the next D is implied by the
    // following statement.
    next D = D + 10
* {100:109,37,98} PUSHS: D <= D = 95
* {100:110,37,99} BEG
*** {100:111,38,100} PUSHS: * <= D = 95
*** {100:112,39,101} PUSHI: * <= 10
*** {100:113,38,102} ADD: next D = 105 <= 95 + 10
*** {100:114,37,103} POPS: next D <= * = 105
*** {100:115,37,104} END
D
* {101:116,38,105} PUSHS: * <= D = 105
do:
    // In `next D = do' the next D is implied by the
    // statement `next D = 33'.

    JX = 50
    do:
        // In `next JX = do' the next JX is implied by
        // the statement `next JX = 60'.

        next D = 33
        next JX = 60
    // JX is deallocated here
* {111:117,39,106} PUSHS: D <= D = 105
* {112:118,39,107} BEG
*** {106:119,40,108} PUSHI: JX <= 50
*** {112:120,41,109} PUSHS: JX <= JX = 50
*** {112:121,41,110} BEG
***** {111:122,42,111} PUSHI: next D <= 33
***** {111:123,41,112} POPS: next D <= * = 33
***** {112:124,42,113} PUSHI: next JX <= 60
***** {112:125,41,114} POPS: next JX <= * = 60
***** {112:126,41,115} END
*** {112:127,39,116} END
D
* {114:128,40,117} PUSHS: * <= D = 33

// Variable modifying statements
//
W = 13
* {118:129,41,118} PUSHI: W <= 13
next W =:
    next W + = 4
* {119:130,42,119} PUSHS: W <= W = 13
* {120:131,42,120} BEG
*** {119:132,43,121} PUSHS: * <= next W = 13
*** {120:133,44,122} PUSHI: * <= 4
*** {120:134,43,123} ADD: *MISSING* = 17 <= 13 + 4
*** {119:135,42,124} POPS: next W <= * = 17
*** {120:136,42,125} END
next W =:
    next W * = 10
* {121:137,43,126} PUSHS: W <= W = 17
* {122:138,43,127} BEG
*** {121:139,44,128} PUSHS: * <= next W = 17
*** {122:140,45,129} PUSHI: * <= 10
*** {122:141,44,130} MUL: *MISSING* = 170 <= 17 * 10
*** {121:142,43,131} POPS: next W <= * = 170
*** {122:143,43,132} END
W
* {123:144,44,133} PUSHS: * <= W = 170

do:
    next W / = 10
    next W - = 4
* {126:145,45,134} PUSHS: W <= W = 170
* {127:146,45,135} BEG
*** {126:147,46,136} PUSHS: * <= next W = 170
*** {126:148,47,137} PUSHI: * <= 10
*** {126:149,46,138} DIV: *MISSING* = 17 <= 170 / 10
*** {126:150,45,139} POPS: next W <= * = 17
*** {126:151,46,140} PUSHS: * <= next W = 17
*** {127:152,47,141} PUSHI: * <= 4
*** {127:153,46,142} SUB: *MISSING* = 13 <= 17 - 4
*** {126:154,45,143} POPS: next W <= * = 13
*** {127:155,45,144} END

do:
    next W = 1
    do:
        next W << = 10
* {130:156,46,145} PUSHS: W <= W = 13
* {132:157,46,146} BEG
*** {130:158,47,147} PUSHI: next W <= 1
*** {130:159,46,148} POPS: next W <= * = 1
*** {132:160,46,149} BEG
***** {130:161,47,150} PUSHS: * <= next W = 1
***** {132:162,48,151} PUSHI: * <= 10
***** {132:163,47,152} LSH: *MISSING* = 1024 <= 1 << 10
***** {130:164,46,153} POPS: next W <= * = 1024
***** {132:165,46,154} END
*** {132:166,46,155} END

do:
    next W >> = 10
* {135:167,47,156} PUSHS: W <= W = 1024
* {135:168,47,157} BEG
*** {135:169,48,158} PUSHS: * <= next W = 1024
*** {135:170,49,159} PUSHI: * <= 10
*** {135:171,48,160} RSH: *MISSING* = 1 <= 1024 >> 10
*** {135:172,47,161} POPS: next W <= * = 1
*** {135:173,47,162} END

next W = 13
* {137:174,48,163} PUSHI: next W <= 13
do:
    if W < 20: next W + = 7
    // Here W == 13 and next W == 20
    if W < 20: next W + = 20
* {139:175,49,164} PUSHS: W <= W = 13
* {141:176,49,165} BEG
*** {139:177,50,166} PUSHS: * <= W = 13
*** {139:178,51,167} PUSHI: * <= 20
*** {139:179,49,168} JMPGEQ location 184 is UNsuccessful: false <= 13
                     >= 20
*** {139:180,50,169} PUSHS: * <= next W = 13
*** {139:181,51,170} PUSHI: * <= 7
*** {139:182,50,171} ADD: *MISSING* = 20 <= 13 + 7
*** {139:183,49,172} POPS: next W <= * = 20
*** {141:184,50,173} PUSHS: * <= W = 13
*** {141:185,51,174} PUSHI: * <= 20
*** {141:186,49,175} JMPGEQ location 191 is UNsuccessful: false <= 13
                     >= 20
*** {139:187,50,176} PUSHS: * <= next W = 20
*** {141:188,51,177} PUSHI: * <= 20
*** {141:189,50,178} ADD: *MISSING* = 40 <= 20 + 20
*** {139:190,49,179} POPS: next W <= * = 40
*** {141:191,49,180} END

// Exit statements in blocks.
//
exit
ERROR: in line ###: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
* {147:192,50,181} PUSHI: X1 <= 0
* {151:193,50,182} BEG
*** {148:194,51,183} PUSHI: X1 <= 5
*** {147:195,50,184} POPS: X1 <= * = 5
*** {149:196,51,185} PUSHI: X1 <= 15
*** {147:197,50,186} POPS: X1 <= * = 15
*** {150:198,50,187} JMP location 202

X1
* {153:202,51,188} PUSHS: * <= X1 = 15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
* {155:203,52,189} PUSHI: X2 <= 0
* {160:204,52,190} BEG
*** {156:205,53,191} PUSHI: X2 <= 5
*** {155:206,52,192} POPS: X2 <= * = 5
*** {157:207,53,193} PUSHI: X2 <= 15
*** {155:208,52,194} POPS: X2 <= * = 15
*** {159:209,52,195} BEG
***** {159:210,52,196} JMP location 215

X2
* {162:215,53,197} PUSHS: * <= X2 = 15
