* {0:0,1,1} PUSHI: *FALSE* <= *FALSE*
* {0:1,2,2} PUSHI: *TRUE* <= *TRUE*
// Reckon Language Assignments Test Data
//
// File:        reckon_assignments.rec
// Author:      Bob Walton (walton@acm.org)
// Date:        Wed Nov 20 01:32:40 EST 2024
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

// Single Variable Expression Assignments
//
X = 5
* {12:2,3,3} PUSHI: X <= 5
Z = 8
* {13:3,4,4} PUSHI: Z <= 8
Y = Z
* {14:4,5,5} PUSHS: Y <= Z = 8

Y = 10
    // It is illegal to reassign Y.
ERROR: in line ##: NON-next variable `Y' has a predecessor of the same
       variable name and lexical level:
Y = 10
^
[no output due to compile error]
next Y = 10
    // It is legal to assign a next Y.
* {16:5,6,6} PUSHI: * <= 10

next Z = - Z
* {16:6,7,7} PUSHS: * <= * = 8
* {18:7,7,8} NEG: next Y = -8 <= - 8
next Z = X + Z
* {21:8,8,9} PUSHS: * <= Z = 5
* {21:9,9,10} PUSHS: Z <= next = -8
* {22:10,8,11} ADD: X "*" = -3 <= 5 + -8
next Z = X + Y - Z
* {22:11,9,12} PUSHS: * <= Z = 5
* {22:12,10,13} PUSHS: Z <= next = 10
* {23:13,9,14} ADD: X "*" = 15 <= 5 + 10
* {23:14,10,15} PUSHS: * <= Y = -3
* {23:15,9,16} SUB: * = 18 <= 15 - -3
next Z = X + ( Y - Z )
* {23:16,10,17} PUSHS: * <= Z = 5
* {23:17,11,18} PUSHS: Z <= next = 10
* {24:18,12,19} PUSHS: * <= X = 18
* {24:19,11,20} SUB: Y "*" = -8 <= 10 - 18
* {24:20,10,21} ADD: Z "*" = -3 <= 5 + -8

// Multi-Variable Expression Assignments
//
M, N = 5, 10
    // The values of M and N are printed in order
    // after the statement
* {24:21,11,22} PUSHI: * <= 5
* {24:22,12,23} PUSHI: next Z <= 10

next M, next N = N, M
* {28:23,13,24} PUSHS: * <= * = 10
* {28:24,14,25} PUSHS: * <= * = 5


P, Q = M * N, M + N
* {32:25,15,26} PUSHS: next M <= N = 10
* {32:26,16,27} PUSHS: next N <= M = 5
* {35:27,15,28} MUL: M "*" = 50 <= 10 * 5
* {35:28,16,29} PUSHS: * <= N = 10
* {35:29,17,30} PUSHS: * <= * = 5
* {35:30,16,31} ADD: M "*" = 15 <= 10 + 5

R, next P = P / Q, P + 1
* {35:31,17,32} PUSHS: * <= N = 50
* {35:32,18,33} PUSHS: * <= * = 15
* {37:33,17,34} DIV: P "*" = 3.33333333333333 <= 50 / 15
* {37:34,18,35} PUSHS: * <= Q = 50
* {37:35,19,36} PUSHI: R <= 1
* {37:36,18,37} ADD: P "*" = 51 <= 50 + 1

// Block Assignments
//
E, F =:
    E = 25
    F = -25
* {37:37,19,38} PUSHI: * <= 0
* {37:38,20,39} PUSHI: next P <= 0
* {41:39,20,40} BEG
*** {41:40,21,41} PUSHI: F <= 25
*** {43:41,20,42} POPS: * <= * = 25
*** {42:42,21,43} PUSHI: E <= -25
*** {41:43,20,44} POPS: E <= * = -25
*** {43:44,20,45} END

E, F // Outputs first the value of E and then the value of F.
* {41:45,21,46} PUSHS: F <= * = 25
* {43:46,22,47} PUSHS: * <= * = -25

next E, next F =:
    next E = 35
        // This does not take effect until after
        // this subblock has executed
    next F = E
        // The value of E is the value before the
        // subblock executes
* {45:47,23,48} PUSHS: * <= E = 25
* {45:48,24,49} PUSHS: * <= F = -25
* {47:49,24,50} BEG: E, E=-25
*** {47:50,25,51} PUSHI: F F <= 35
*** {53:51,24,52} POPS: * <= * = 35
*** {48:52,25,53} PUSHS: E <= next = 25
*** {47:53,24,54} POPS: next E <= * = 25
*** {51:54,24,55} END: E, next F=25
E, F
* {47:55,25,56} PUSHS: next F <= * = 35
* {53:56,26,57} PUSHS: * <= * = 25

J, K =:
    J = E
    K = J + 1
        // J is write-only inside this subblock
ERROR: in line ##: cannot read write-only variable:
    K = J + 1
        ^
[no output due to compile error]

// If statements in blocks.
//
S = 25
* {54:57,27,58} PUSHI: E "*" <= 25
next S =:
    if S > 20: next S = 20
        // S = 20 is a restricted statement.  It is an
        // operand of `if ... : ... ' and cannot have
        // operators with precedence 0000.  It cannot
        // allocate variables, but can write variables
        // that are write-only.
* {54:58,28,59} PUSHS: * <= F = 25
* {56:59,28,60} BEG
*** {56:60,29,61} PUSHS: * <= * = 25
*** {59:61,30,62} PUSHI: *MISSING* <= 20
*** {57:62,28,63} JMPLEQ E J is UNsuccessful: false <= 25 <= 20
*** {56:63,29,64} PUSHI: "*" J <= 20
*** {58:64,28,65} POPS: * <= * = 20
*** {58:65,28,66} END
S
* {58:66,29,67} PUSHS: * <= * = 20

T = 25
* {56:67,30,68} PUSHI: "*" K <= 25
SIGN T = do:
    // The `do' here is cosmetic and has no effect.
    if T < 0: SIGN T = -1
    else if T == 0: SIGN T = 0
    else: SIGN T = +1
* {59:68,31,69} PUSHI: *MISSING* <= 0
* {63:69,31,70} BEG
*** {64:70,32,71} PUSHS: S <= S = 25
*** {70:71,33,72} PUSHI: *MISSING* <= 0
*** {65:72,31,73} JMPGEQ S "*" is successful: true <= 25 >= 0
*** {64:76,32,74} PUSHS: next S <= * = 25
*** {70:77,33,75} PUSHI: *MISSING* <= 0
*** {71:78,31,76} JMPNEQ S "*" is successful: true <= 25 != 0
*** {76:82,32,77} PUSHI: T "*" <= 1
*** {76:83,31,78} POPS: * <= * = 1
*** {76:84,31,79} END
SIGN T
* {76:85,32,80} PUSHS: T <= SIGN = 1

next T = do:
    if T < -20:
        JX = 5        // Allocates JX to block.
        next T = -20   // Just writes next SIGN T.
        // JX is deallocated here (end of its block)
    else if T > 20:
        JX = 6
        next T = 20
* {74:86,33,81} PUSHS: SIGN T <= * = 25
* {76:87,33,82} BEG
*** {77:88,34,83} PUSHS: * <= T = 25
*** {77:89,35,84} PUSHI: * <= -20
*** {77:90,33,85} JMPGEQ location 97 is successful: true <= 25 >= -20
*** {79:97,34,86} PUSHS: * <= SIGN T = 25
*** {81:98,35,87} PUSHI: T T <= 20
*** {88:99,33,88} JMPLEQ location 105 is UNsuccessful: false <= 25 <= 20
*** {82:100,33,89} BEG: T, *=25
***** {82:101,34,90} PUSHI: * <= 6
***** {82:102,35,91} PUSHI: 14 <= 20
***** {84:103,34,92} POPS: * <= * = 20
***** {83:104,33,93} END
*** {84:105,33,94} END: next, T=20
T
* {81:106,34,95} PUSHS: next T <= * = 20
JX    // JX has been deallocated.
ERROR: in line ##: cannot understand expression:
JX    // JX has been deallocated.
^^
[no output due to compile error]


// Next variable promotion
//
E
* {84:107,35,96} PUSHS: * <= * = 35
do:
    next E = E + 10
        // next E is promoted replacing `do' by
        // `next E = do'.
* {82:108,36,97} PUSHS: * <= * = 35
* {86:109,36,98} BEG: T, *=35
*** {86:110,37,99} PUSHS: * <= * = 35
*** {86:111,38,100} PUSHI: 18 <= 10
*** {88:112,37,101} ADD: *MISSING* = 45 <= 35 + 10
*** {87:113,36,102} POPS: * <= * = 45
*** {88:114,36,103} END: next, T=45

// Exit statements in blocks.
//
exit
ERROR: in line ###: exit not inside block; statement ignored:
exit
^^^^
[no output due to compile error]

X1 =:
    X1 = 5
    X1 = 15
    exit
    X1 = 25
* {81:115,37,104} PUSHI: "*" next T <= 0
* {88:116,37,105} BEG
*** {88:117,38,106} PUSHI: *MISSING* <= 5
*** {89:118,37,107} POPS: * <= T = 5
*** {95:119,38,108} PUSHI: E "*" <= 15
*** {97:120,37,109} POPS: E <= E = 15
*** {99:121,37,110} JMP location 125

X1
* {97:125,38,111} PUSHS: next E <= * = 15

X2 = do BLOCK2:
    X2 = 5
    X2 = 15
    do BLOCK3:
        exit BLOCK2
    X2 = 25
* {99:126,39,112} PUSHI: *MISSING* <= 0
* {105:127,39,113} BEG
*** {109:128,40,114} PUSHI: *MISSING* <= 5
*** {106:129,39,115} POPS: * <= * = 5
*** {105:130,40,116} PUSHI: "*" X1 <= 15
*** {107:131,39,117} POPS: * <= * = 15
*** {105:132,39,118} BEG: *, X1=15
***** {108:133,39,119} JMP location 138

X2
* {113:138,40,120} PUSHS: * <= * = 15
