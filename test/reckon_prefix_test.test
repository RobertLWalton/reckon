*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
=== BRACKETED EXPRESSION: line ##:
{b} foo
^^^^^^^
    {b} foo
=== BRACKETED EXPRESSION: line ##:
{s|This is a sentence.|}
^^^^^^^^^^^^^^^^^^^^^^^^
    {s|This is a sentence "."|s}
=== BRACKETED EXPRESSION: line ##:
{s}This is a sentence.
^^^^^^^^^^^^^^^^^^^^^^
    {s} This is a sentence "."
=== BRACKETED EXPRESSION: line ##:
{section|{s}Fee Fie Foe|}
^^^^^^^^^^^^^^^^^^^^^^^^^
    {section|{s} Fee Fie Foe|section}
=== BRACKETED EXPRESSION: line ##:
``{s|This is a sentence.|}''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s|This is a sentence "."|s}''
=== BRACKETED EXPRESSION: line ##:
``{s}This is a sentence.''
^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|This is a sentence|s}''
=== BRACKETED EXPRESSION: line ##:
{p|This is a sentence.|}
^^^^^^^^^^^^^^^^^^^^^^^^
    {p|This is a sentence "."|p}
=== BRACKETED EXPRESSION: line ##:
{p}This is a sentence.
^^^^^^^^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is a sentence|s}|p}
=== BRACKETED EXPRESSION: line ##:
ID X is @<X> // From @<X> := {p}This ...
^^^^^^^^^^^^
    ID X is {|{p} This is a sentence "."|}
=== BRACKETED EXPRESSION: line ##:
ID Y is @<Y> // From !@<Y> := {p}This ...
^^^^^^^^^^^^
    ID Y is {|{p} This is a sentence "."|}
=== BRACKETED EXPRESSION: line ##:
ID Z is @<Z> // From @<Z> := x + y
^^^^^^^^^^^^
    ID Z is {|{|x|} + {|y|}|}
=== BRACKETED EXPRESSION: line ##:
{p}{a}B B B {b} C C C {a} D D D
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{s|{a} B B B {b} C C C {a} D D D|s}|p}
=== BRACKETED EXPRESSION: line ##:
hello there
^^^^^^^^^^^
    hello there
ERROR: in line ##: explicit prefix separator of type `p' has *PARAGRAPH*
       group but is not at beginning of a logical line that is in
       paragraph beginning position; prefix unrecognized:
{p}goodbye // Preceeded by non-blank line.
^^^
=== BRACKETED EXPRESSION: line ##:
{p}goodbye // Preceeded by non-blank line.
^^^^^^^^^^
    {p} goodbye
=== BRACKETED EXPRESSION: line ##:
ID X is @<X> // From @<X> := fee {fie} fo fum
^^^^^^^^^^^^
    ID X is {|fee {fie} fo fum|}
=== BRACKETED EXPRESSION: line ##:
ID Y is @<Y> // From !@<Y> := fee {fie} fo fum
^^^^^^^^^^^^
    ID Y is {|fee {fie} fo fum|}
=== BRACKETED EXPRESSION: line ##:
``{s}This is a quote: `{s}I came. I saw. I conquered.'. ''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|This is a quote ":"
          `{s: .terminator = "."|I came|s}
           {s: .terminator = "."|I saw|s}
           {s: .terminator = "."|I conquered|s}'|s}''
=== BRACKETED EXPRESSION: line ##:
``{s}I came. {s: i}I saw. {s: b}I conquered. ''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{s: .terminator = "."|I came|s} {s: .terminator = ".", i|I saw|s}
      {s: .terminator = ".", b|I conquered|s}''
=== BRACKETED EXPRESSION: line ##:
{p|This is a sentence.|}
^^^^^^^^^^^^^^^^^^^^^^^^
    {p|This is a sentence "."|p}
=== BRACKETED EXPRESSION: line ##:
{p|{b}This is a sentence.|}
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{b} This is a sentence "."|p}
=== BRACKETED EXPRESSION: line ##:
``{p|{s}This is a sentence.|}''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{p|{s} This is a sentence "."|p}''
=== BRACKETED EXPRESSION: line ##:
``{b|{s}This is a sentence.|}''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``{b|{s} This is a sentence "."|b}''
=== BRACKETED EXPRESSION: line ##:
({table|=====|})
^^^^^^^^^^^^^^^^
    ({table|=====|table})
=== BRACKETED EXPRESSION: line ##:
{section}First Example
^^^^^^^^^^^^^^^^^^^^^^
    {section|{s|First Example|s}|section}
=== BRACKETED EXPRESSION: lines ##-##:
{p}This is the first paragraph of the first
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        example.  And
^^^^^^^^^^^^^^^^^^^^^
its second sentence.  Line indentation does not
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter in this paragraph, which is ended by the
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                next blank line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{s: .terminator = "."|This is the first paragraph of the first
           example|s} {s: .terminator = "."|And its second sentence|s}
       {s: .terminator = "."|Line indentation does not matter in this
           paragraph "," which is ended by the next blank line|s}|p}
=== BRACKETED EXPRESSION: lines ##-##:
{p}This paragraph contains a quote:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // In text, `:' can start an indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
    {quote}
^^^^^^^^^^^
    Remember to begin at
^^^^^^^^^^^^^^^^^^^^^^^^
    the beginning and go to the end.  This quote
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                  is a paragraph by itself.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Within the paragraph, indentation does not
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    matter as long as it is at least the paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           indent.
^^^^^^^^^^^^^^^^^^
    // Comments do not end the paragraph, as they
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // are not blank lines.
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    So this is the last sentence in the paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p|{s|This paragraph contains a quote
          {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
               {quote|{s: .terminator = "."|Remember to begin at the
                          beginning and go to the end|s}
                      {s: .terminator = "."|This quote is a paragraph by
                          itself|s}
                      {s: .terminator = "."|Within the paragraph ","
                          indentation does not matter as long as it is
                          at least the paragraph indent|s}
                      {s: .terminator = "."|So this is the last sentence
                          in the paragraph|s}|quote}|}|s}|p}
=== BRACKETED EXPRESSION: lines ##-###:
This is a line of code:
^^^^^^^^^^^^^^^^^^^^^^^
   // In code, `:' can start an indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   This is a logical code
^^^^^^^^^^^^^^^^^^^^^^^^^
       line of the indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   And a second logical code line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
   {p}But we can have a text paragraph in an indented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   code paragraph.
^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
   This is the third logical line of code.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
   {p}Another piece of text.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|This is a line of code|}:
        This is a logical code line of the indented paragraph "."
        And a second logical code line "."
        {p|{s: .terminator = "."|But we can have a text paragraph in an
               indented code paragraph|s}|p}
        This is the third logical line of code "."
        {p|{s: .terminator = "."|Another piece of text|s}|p}
=== BRACKETED EXPRESSION: lines ###-###:
And a logical line of code that ends the indented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    paragraph.
^^^^^^^^^^^^^^
    And a logical line of code that ends the indented paragraph "."
=== BRACKETED EXPRESSION: line ###:
{section}Second Example
^^^^^^^^^^^^^^^^^^^^^^^
    {section|{s|Second Example|s}|section}
=== BRACKETED EXPRESSION: lines ###-###:
{p: indent = 5}
^^^^^^^^^^^^^^^
This is the first paragraph of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     the second example.
^^^^^^^^^^^^^^^^^^^^^^^^
    {p: indent = 5|
        {s: .terminator = "."|This is the first paragraph of the second
            example|s}|p}
=== BRACKETED EXPRESSION: lines ###-###:
{p: indent = 5}
^^^^^^^^^^^^^^^
This is the next paragraph, which contains a quote:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
     {quote}Simplify, simplify, SMPLFY!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {p: indent = 5|
        {s|This is the next paragraph "," which contains a quote
           {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                ":"|
                {quote|{s: .terminator = "!"|Simplify "," simplify ","
                           SMPLFY|s}|quote}|}|s}|p}
=== BRACKETED EXPRESSION: line ###:
This is a line of code.
^^^^^^^^^^^^^^^^^^^^^^^
    This is a line of code "."
=== BRACKETED EXPRESSION: lines ###-###:
{table} // This is a table
^^^^^^^^^^^^^^^^^^^^^^^^^^
X Y Z
^^^^^
| A | B; | C|
^^^^^^^^^^^^^
    {table|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|X
                Y Z|} {row|"|" A "|" B ";" "|" C "|"|row}|table}
=== BRACKETED EXPRESSION: lines ###-###:
{table}
^^^^^^^
{row}-----------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}| Name   | Weight   | Height     | Age       | BMI  | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}-----------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}| <name> | <weight> | <height>   | <age>     | B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}| /l/    | /U`lb'/  | /U`ft_in'/ | /u`yr'.0/ | /.2/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}| George |    205   | 6ft 3in    | 25        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}| Mary   |    135   | 5ft 5in    | 26        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{row}----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BMI: Body Mass Index
^^^^^^^^^^^^^^^^^^^^
B: <body mass index>
^^^^^^^^^^^^^^^^^^^^
ROW TYPE: person
^^^^^^^^^^^^^^^^
SORT ROWS BY: name
^^^^^^^^^^^^^^^^^^
    {table|{row|-----------------------------------------------------|row}
           {row|"|" Name "|" Weight "|" Height "|" Age "|" BMI "|"
                /ib/|row}
           {row|-----------------------------------------------------|row}
           {row|"|" <name> "|" <weight> "|" <height> "|" <age> "|"
                B|row}
           {row|"|" /l/ "|" /U`lb'/ "|" /U`ft_in'/ "|" /u`yr'.0/ "|"
                /.2/|row}
           {row|"|" George "|" 205 "|" 6ft 3in "|" 25 "|"|row}
           {row|"|" Mary "|" 135 "|" 5ft 5in "|" 26 "|"|row}
           {row|----------------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                BMI ":" Body Mass Index|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|B
                ":" <body mass index>|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                ROW TYPE ":" person|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                SORT ROWS BY ":" name|}|table}
=== BRACKETED EXPRESSION: lines ###-###:
-----------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Name   | Weight   | Height     | Age       | BMI  | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-----------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| <name> | <weight> | <height>   | <age>     | B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| /l/    | /U`lb'/  | /U`ft_in'/ | /u`yr'.0/ | /.2/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| George |    205   | 6ft 3in    | 25        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Mary   |    135   | 5ft 5in    | 26        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BMI: Body Mass Index
^^^^^^^^^^^^^^^^^^^^
B: <body mass index>
^^^^^^^^^^^^^^^^^^^^
ROW TYPE: person
^^^^^^^^^^^^^^^^
SORT ROWS BY: name
^^^^^^^^^^^^^^^^^^
    {table|{row|-----------------------------------------------------|row}
           {row|"|" Name "|" Weight "|" Height "|" Age "|" BMI "|"
                /ib/|row}
           {row|-----------------------------------------------------|row}
           {row|"|" <name> "|" <weight> "|" <height> "|" <age> "|"
                B|row}
           {row|"|" /l/ "|" /U`lb'/ "|" /U`ft_in'/ "|" /u`yr'.0/ "|"
                /.2/|row}
           {row|"|" George "|" 205 "|" 6ft 3in "|" 25 "|"|row}
           {row|"|" Mary "|" 135 "|" 5ft 5in "|" 26 "|"|row}
           {row|----------------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                BMI ":" Body Mass Index|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|B
                ":" <body mass index>|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                ROW TYPE ":" person|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                SORT ROWS BY ":" name|}|table}
=== BRACKETED EXPRESSION: lines ###-###:
{p}This is a text paragraph:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^^^^^^^^^^^^
        =============
^^^^^^^^^^^^^^^^^^^^^
        | A | B | C |
^^^^^^^^^^^^^^^^^^^^^
        =============
^^^^^^^^^^^^^^^^^^^^^
    {p|{s|This is a text paragraph
          {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
               {table|{row|=============|row}
                      {row|"|" A "|" B "|" C "|"|row}
                      {row|=============|row}|table}|}|s}|p}
*PARSER*:
    begin block BLOCK
    trace [+ subexpression details]
=== BRACKETED EXPRESSION: line ###:
{row}| A | B + C |
^^^^^^^^^^^^^^^^^^
    {|{row} "|" A "|" B|} + {|C "|"|}
!@@ := @@ "+" @@:
           .terminator = "<LF>"
           .initiator = [$ LOGICAL_LINE $]
           .position[H] = PACKED_VEC
!@@ := @@ "|" A "|" B:
           .position[H] = PACKED_VEC
!@@ := C "|":
           .position[H] = PACKED_VEC
!@@ :=:
           .type = row
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ###:
{row| "|" A "|" B "|" |}
^^^^^^^^^^^^^^^^^^^^^^^^
    {row|"|" A "|" B "|"|row}
!@@ := @@:
           .terminator = "<LF>"
           .position[H] = PACKED_VEC
           .initiator = [$ LOGICAL_LINE $]
!@@ := @@ A @@ B @@:
           .type = row
           .position[H] = PACKED_VEC
!@@ := "|":
           .type = "<Q>"
!@@ := "|":
           .type = "<Q>"
!@@ := "|":
           .type = "<Q>"
=== BRACKETED EXPRESSION: lines ###-###:
{table}
^^^^^^^
{row}| A | B + C |
^^^^^^^^^^^^^^^^^^
    {table|{row|"|" A "|" B + C "|"|row}|table}
!@@@ := @@@:
            .type = table
            .position[H] = PACKED_VEC
!@@@ := "|" A "|" B "+" C "|":
            .type = row
            .position[H] = PACKED_VEC
*PARSER*:
    end block BLOCK
=== BRACKETED EXPRESSION: lines ###-###:
------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| foo
^^^^^
A : [B + C]
^^^^^^^^^^^
    {table|{row|------------------------------|row} {row|"|" foo|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|A
                ":" [{|B|} + {|C|}]|}|table}
=== BRACKETED EXPRESSION: lines ###-###:
{p} This is a:
^^^^^^^^^^^^^^
    paragraph
^^^^^^^^^^^^^
    {p|{s|This is a
          {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
               {p|{s|paragraph|s}|p}|}|s}|p}
