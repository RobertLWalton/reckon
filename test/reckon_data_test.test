*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
BRACKETED EXPRESSION:
    kind = woman
    line ##:
    kind = woman
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Jill
    line ##:
    name = Jill
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    husband = PREALLOCATED(1*0) = wife
    line ##:
    husband = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = woman|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Jill|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              husband = PREALLOCATED(1*0) = wife|}|}
    lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<X> :=:
^
BRACKETED EXPRESSION:
    {"": husband = @@ = wife, kind = woman, name = Jill}
    lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name = Jill
BRACKETED EXPRESSION:
    kind = man
    line ##:
    kind = man
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Jack
    line ##:
    name = Jack
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    wife = {"": husband = @@ = wife, kind = woman, name = Jill} =
        husband
    line ##:
    wife = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = man|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Jack|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|wife
              = {"": husband = @@ = wife, kind = woman, name = Jill} =
              husband|}|}
    lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Y> :=:
^
BRACKETED EXPRESSION:
    {"": kind = man, name = Jack, wife = @@ = husband}
    lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 2 IS
        {"": husband = @@ = wife, kind = woman, name = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 2 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 1 IS
        {"": kind = man, name = Jack, wife = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 1 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = woman
    line ##:
    kind = woman
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [-]
    line ##:
    name[-] = Jill
        ^^^
BRACKETED EXPRESSION:
    name [-] = Jill
    line ##:
    name[-] = Jill
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [*]
    line ##:
    husband[*] = @<Y> = wife
           ^^^
BRACKETED EXPRESSION:
    husband [*] = PREALLOCATED(1*0) = wife
    line ##:
    husband[*] = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = woman|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              [-] = Jill|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              husband [*] = PREALLOCATED(1*0) = wife|}|}
    lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<X> :=:
^
BRACKETED EXPRESSION:
    {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
    lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband[*] = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name[-] = Jill
BRACKETED EXPRESSION:
    kind = man
    line ##:
    kind = man
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    [+]
    line ##:
    name[+] = Jack
        ^^^
BRACKETED EXPRESSION:
    name [+] = Jack
    line ##:
    name[+] = Jack
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [@]
    line ##:
    wife[@] = @<X> = husband
        ^^^
BRACKETED EXPRESSION:
    wife [@] =
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill} =
        husband
    line ##:
    wife[@] = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = man|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              [+] = Jack|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|wife
              [@] =
              {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
              = husband|}|}
    lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Y> :=:
^
BRACKETED EXPRESSION:
    {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
    lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 3 IS
        {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = boy
    line ##:
    kind = boy
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Giddy
    line ##:
    name = Giddy
    ^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
      {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}|}
    line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
       {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
    line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    parent =
        {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
           {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *} =
        child
    line ##:
    parent = {* @<X>, @<Y> *} = child
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = boy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Giddy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {* {"": husband[*] = @@ = wife, kind = woman, name[-] =
                      Jill},
                 {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
              = child|}|}
    lines ##-##:
!@<Z1> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Z1> :=:
^
BRACKETED EXPRESSION:
    {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
    lines ##-##:
!@<Z1> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = boy
    line ##:
    kind = boy
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Giddy
    line ##:
    name = Giddy
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    parent =
        {"": husband[*] = @@ = wife, child = @@ = parent, kind = woman,
             name[-] = Jill} = child
    line ##:
    parent = @<X> = child
    ^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           kind = boy
           parent = {* @@, @@ *} = child
           name = Giddy
BRACKETED EXPRESSION:
    parent =
        {"": child = @@ = parent, kind = man, name[+] = Jack, wife[@] =
             @@ = husband} = child
    line ##:
    parent = @<Y> = child
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = boy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Giddy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {"": husband[*] = @@ = wife, child = @@ = parent, kind =
                   woman, name[-] = Jill} = child|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {"": child = @@ = parent, kind = man, name[+] = Jack,
                   wife[@] = @@ = husband} = child|}|}
    lines ##-##:
!@<Z2> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Z2> :=:
^
BRACKETED EXPRESSION:
    {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
    lines ##-##:
!@<Z2> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, child = {* @@, @@ *} = parent,
             kind = woman, name[-] = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           parent = {* @@, @@ *} = child
           name = Giddy
           kind = boy
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 3 IS
        {"": child = {* @@, @@ *} = parent, kind = man, name[+] = Jack,
             wife[@] = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z1> ":" OUTPUT ID 5 IS
        {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
    line ##:
INPUT ID <Z1> : OUTPUT ID 5 IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z2> ":" OUTPUT ID 6 IS
        {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
    line ##:
INPUT ID <Z2> : OUTPUT ID 6 IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    a = PREALLOCATED(1*0) = b
    line ##:
        a = @<Y> = b
        ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|a =
              PREALLOCATED(1*0) = b|}|}
    lines ##-##:
@<X> :=:
       ^
        a = @<Y> = b
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<X> :=:
^
BRACKETED EXPRESSION:
    {"": a = @@ = b}
    lines ##-##:
@<X> :=:
^^^^^^^^
        a = @<Y> = b
^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           b = @@ = a
!@@ :=:
           a = @@ = b
           .position[H] = PACKED_VEC
BRACKETED EXPRESSION:
    b = {"": a = @@ = b} = a
    line ##:
        b = @<X> = a
        ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|b =
              {"": a = @@ = b} = a|}|}
    lines ##-##:
@<Y> :=:
       ^
        b = @<X> = a
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<Y> :=:
^
BRACKETED EXPRESSION:
    {"": b = @@ = a}
    lines ##-##:
@<Y> :=:
^^^^^^^^
        b = @<X> = a
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 7 IS {"": a = @@ = b}
    line ##:
INPUT ID <X> : OUTPUT ID 7 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 8 IS {"": b = @@ = a}
    line ##:
INPUT ID <Y> : OUTPUT ID 8 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x1 = "{" "["
    line ##:
    x1 = "{" "["
    ^^^^^^^^^^^^
DERIVED EXPRESSION:
    [< "{" "[" >]
    line ##:
    x2 = [< "{" "[" >]
         ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x2 = [< "{" "[" >]
    line ##:
    x2 = [< "{" "[" >]
    ^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x y = 5
    line ##:
    x y = 5
    ^^^^^^^
DERIVED EXPRESSION:
    [< x y >]
    line ##:
    [< x y >] = 6
    ^^^^^^^^^
BRACKETED EXPRESSION:
    [< x y >] = 6
    line ##:
    [< x y >] = 6
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x1 =
              "{" "["|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x2 =
              [< "{" "[" >]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x y
              = 5|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              [< x y >] = 6|}|}
    lines ##-##:
@<X> :=:
       ^
    x1 = "{" "["
^^^^^^^^^^^^^^^^
    x2 = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<X> :=:
^
ERROR: in line ##: not a legal label initial element `x y':
    [< x y >] = 6
    ^^^^^^^^^
ERROR: in line ##: line does not begin with a (possibly negated)
       attribute label; line ignored:
    [< x y >] = 6
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x1 = [< "{" "[" >], x2 = [< "{" "[" >], x y = 5}
    lines ##-##:
@<X> :=:
^^^^^^^^
    x1 = "{" "["
^^^^^^^^^^^^^^^^
    x2 = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS
        {"": x1 = [< "{" "[" >], x2 = [< "{" "[" >], x y = 5}
    line ##:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = TRUE
    line ##:
    x = TRUE
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = FALSE
    line ##:
    y = FALSE
    ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              TRUE|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              FALSE|}|}
    lines ##-##:
@<Z1> :=:
        ^
    x = TRUE
^^^^^^^^^^^^
    y = FALSE
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<Z1> :=:
^
BRACKETED EXPRESSION:
    {"": x, no y}
    lines ##-##:
@<Z1> :=:
^^^^^^^^^
    x = TRUE
^^^^^^^^^^^^
    y = FALSE
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x
    line ##:
    x
    ^
BRACKETED EXPRESSION:
    no y
    line ##:
    no y
    ^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|no
              y|}|}
    lines ##-##:
@<Z2> :=:
        ^
    x
^^^^^
    no y
^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<Z2> :=:
^
BRACKETED EXPRESSION:
    {"": x, no y}
    lines ##-##:
@<Z2> :=:
^^^^^^^^^
    x
^^^^^
    no y
^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z1> IS {"": x, no y}
    line ##:
INPUT ID <Z1> IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z2> IS {"": x, no y}
    line ##:
INPUT ID <Z2> IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [M]
    line ##:
    y[M] = A
     ^^^
BRACKETED EXPRESSION:
    y [M] = A
    line ##:
    y[M] = A
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = A
    line ##:
    y    = A
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = B
    line ##:
    y    = B
    ^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y
              [M] = A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              B|}|}
    lines ##-##:
@<X1> :=:
        ^
    y[M] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<X1> :=:
^
BRACKETED EXPRESSION:
    {"": y[M] = {* B, A, A *}}
    lines ##-##:
@<X1> :=:
^^^^^^^^^
    y[M] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [M]
    line ##:
    y[M] = {* A, A, B *}
     ^^^
BRACKETABLE EXPRESSION:
    {|A, A, B|}
    line ##:
    y[M] = {* A, A, B *}
           ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {* A, A, B *}
    line ##:
    y[M] = {* A, A, B *}
           ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    y [M] = {* A, A, B *}
    line ##:
    y[M] = {* A, A, B *}
    ^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y
              [M] = {* A, A, B *}|}|}
    lines ##-##:
@<X2> :=:
        ^
    y[M] = {* A, A, B *}
^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<X2> :=:
^
BRACKETED EXPRESSION:
    {"": y[M] = {* B, A, A *}}
    lines ##-##:
@<X2> :=:
^^^^^^^^^
    y[M] = {* A, A, B *}
^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X1> IS {"": y[M] = {* B, A, A *}}
    line ##:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X2> IS {"": y[M] = {* B, A, A *}}
    line ##:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [S]
    line ##:
    y[S] = A
     ^^^
BRACKETED EXPRESSION:
    y [S] = A
    line ##:
    y[S] = A
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = A
    line ###:
    y    = A
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = B
    line ###:
    y    = B
    ^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y
              [S] = A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              B|}|}
    lines ##-###:
@<X1> :=:
        ^
    y[S] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ##:
@<X1> :=:
^
BRACKETED EXPRESSION:
    {"": y[S] = {* B, A *}}
    lines ##-###:
@<X1> :=:
^^^^^^^^^
    y[S] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [S]
    line ###:
    y[S] = {* A, B *}
     ^^^
BRACKETABLE EXPRESSION:
    {|A, B|}
    line ###:
    y[S] = {* A, B *}
           ^^^^^^^^^^
BRACKETED EXPRESSION:
    {* A, B *}
    line ###:
    y[S] = {* A, B *}
           ^^^^^^^^^^
BRACKETED EXPRESSION:
    y [S] = {* A, B *}
    line ###:
    y[S] = {* A, B *}
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y
              [S] = {* A, B *}|}|}
    lines ###-###:
@<X2> :=:
        ^
    y[S] = {* A, B *}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ###:
@<X2> :=:
^
BRACKETED EXPRESSION:
    {"": y[S] = {* B, A *}}
    lines ###-###:
@<X2> :=:
^^^^^^^^^
    y[S] = {* A, B *}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X1> IS {"": y[S] = {* B, A *}}
    line ###:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X2> IS {"": y[S] = {* B, A *}}
    line ###:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    y = A
    line ###:
    y    = A
    ^^^^^^^^
BRACKETED EXPRESSION:
    y = B
    line ###:
    y    = B
    ^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              A|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              B|}|}
    lines ###-###:
@<X> :=:
       ^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data}
    line ###:
@<X> :=:
^
ERROR: in line ###: "y" already has different value(s); old value(s) not
       changed:
    y    = B
           ^
BRACKETED EXPRESSION:
    {"": y = A}
    lines ###-###:
@<X> :=:
^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {"": y = A}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (C D)
    line ###:
!@<X1> := A 2 (C D) E
              ^^^^^
BRACKETED EXPRESSION:
    {raw data|A 2 (C D) E|raw data}
    line ###:
!@<X1> := A 2 (C D) E
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A 2 (C D) E|}
    line ###:
!@<X1> := A 2 (C D) E
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|A 2 PREALLOCATED(1*0) E|raw data}
    line ###:
!@<X2> := A 2 @<X3> E
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A 2 PREALLOCATED(1*0) E|}
    line ###:
!@<X2> := A 2 @<X3> E
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    .initiator = "("
    line ###:
    .initiator = "("
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    .terminator = ")"
    line ###:
    .terminator = ")"
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              .initiator = "("|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              .terminator = ")"|}|}
    lines ###-###:
!@<X3> := C D:
             ^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|C D|raw data}
    line ###:
!@<X3> := C D:
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (C D)
    lines ###-###:
!@<X3> := C D:
^^^^^^^^^^^^^^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X1> IS {|A 2 (C D) E|}
    line ###:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X2> IS {|A 2 (C D) E|}
    line ###:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X3> IS (C D)
    line ###:
INPUT ID <X3> IS @<X3>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|{|b|} * {|c|}|}|data}
    line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|{|a|} + {|{|b|} * {|c|}|}|}
    line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {|{|a|} + {|{|b|} * {|c|}|}|}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|{|b|} * {|c|}|}|data}
    line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|{|a|} + {|{|b|} * {|c|}|}|}
    line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|PREALLOCATED(1*0) + PREALLOCATED(1*0)|raw data}
    line ###:
!@<X> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|PREALLOCATED(1*0) + PREALLOCATED(1*0)|}
    line ###:
!@<X> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|PREALLOCATED(1*0) * PREALLOCATED(1*0)|raw data}
    line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|PREALLOCATED(1*0) * PREALLOCATED(1*0)|}
    line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a|raw data}
    line ###:
!@<A> := a
^^^^^^^^^^
BRACKETED EXPRESSION:
    {|a|}
    line ###:
!@<A> := a
^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|b|raw data}
    line ###:
!@<B> := b
^^^^^^^^^^
BRACKETED EXPRESSION:
    {|b|}
    line ###:
!@<B> := b
^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|c|raw data}
    line ###:
!@<C> := c
^^^^^^^^^^
BRACKETED EXPRESSION:
    {|c|}
    line ###:
!@<C> := c
^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {|{|a|} + {|{|b|} * {|c|}|}|}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <PRODUCT> IS {|{|b|} * {|c|}|}
    line ###:
INPUT ID <PRODUCT> IS @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <A> IS {|a|}
    line ###:
INPUT ID <A> IS @<A>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <B> IS {|b|}
    line ###:
INPUT ID <B> IS @<B>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <C> IS {|c|}
    line ###:
INPUT ID <C> IS @<C>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|A "B" C|raw data}
    line ###:
!@<X> := A "B" C
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A "B" C|}
    line ###:
!@<X> := A "B" C
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {|A "B" C|}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|A PREALLOCATED(1*0) C|raw data}
    line ###:
!@<X> := A @<QUOTED> C
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A PREALLOCATED(1*0) C|}
    line ###:
!@<X> := A @<QUOTED> C
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    .type = "<Q>"
    line ###:
    .type = "<Q>"
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              .type = "<Q>"|}|}
    lines ###-###:
!@<QUOTED> := B:
               ^
    .type = "<Q>"
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|B|raw data}
    line ###:
!@<QUOTED> := B:
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    "B"
    lines ###-###:
!@<QUOTED> := B:
^^^^^^^^^^^^^^^^
    .type = "<Q>"
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {|A "B" C|}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <QUOTED> IS "B"
    line ###:
INPUT ID <QUOTED> IS @<QUOTED>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [S]
    line ###:
    x[S]
     ^^^
BRACKETED EXPRESSION:
    x [S]
    line ###:
    x[S]
    ^^^^
BRACKETED EXPRESSION:
    x = "X"
    line ###:
    x = "X"
    ^^^^^^^
BRACKETED EXPRESSION:
    "x" = "X"
    line ###:
    "x" = "X"
    ^^^^^^^^^
BRACKETED EXPRESSION:
    x = A "B" C
    line ###:
    x = A "B" C
    ^^^^^^^^^^^
DERIVED EXPRESSION:
    [< A B C >]
    line ###:
    x = [< A "B" C >]
        ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = [< A B C >]
    line ###:
    x = [< A "B" C >]
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x
              [S]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              "X"|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|"x"
              = "X"|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              A "B" C|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              [< A B C >]|}|}
    lines ###-###:
!@<X> :=:
        ^
    x[S]
^^^^^^^^
    x = "X"
^^^^^^^^^^^
    "x" = "X"
^^^^^^^^^^^^^
    x = A "B" C
^^^^^^^^^^^^^^^
    x = [< A "B" C >]
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ###:
!@<X> :=:
^
BRACKETED EXPRESSION:
    {"": x[S] = {* [< A B C >], X *}}
    lines ###-###:
!@<X> :=:
^^^^^^^^^
    x[S]
^^^^^^^^
    x = "X"
^^^^^^^^^^^
    "x" = "X"
^^^^^^^^^^^^^
    x = A "B" C
^^^^^^^^^^^^^^^
    x = [< A "B" C >]
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x + = 5
    line ###:
    x + = 5
    ^^^^^^^
BRACKETED EXPRESSION:
    x "+" = 5
    line ###:
    x "+" = 5
    ^^^^^^^^^
BRACKETED EXPRESSION:
    y = A +
    line ###:
    y = A +
    ^^^^^^^
BRACKETED EXPRESSION:
    y = A "+"
    line ###:
    y = A "+"
    ^^^^^^^^^
WARNING: in line ###: mark should be quoted:
    z = [< A + B >]
             ^
DERIVED EXPRESSION:
    [< A + B >]
    line ###:
    z = [< A + B >]
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    z = [< A + B >]
    line ###:
    z = [< A + B >]
    ^^^^^^^^^^^^^^^
DERIVED EXPRESSION:
    [< A + B >]
    line ###:
    z = [< A "+" B >]
        ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    z = [< A + B >]
    line ###:
    z = [< A "+" B >]
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x +
              = 5|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x
              "+" = 5|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              A +|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|y =
              A "+"|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|z =
              [< A + B >]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|z =
              [< A + B >]|}|}
    lines ###-###:
!@<Y> :=:
        ^
    x + = 5
^^^^^^^^^^^
    x "+" = 5
^^^^^^^^^^^^^
    y = A +
^^^^^^^^^^^
    y = A "+"
^^^^^^^^^^^^^
    z = [< A + B >]
^^^^^^^^^^^^^^^^^^^
    z = [< A "+" B >]
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ###:
!@<Y> :=:
^
ERROR: in line ###: not a legal label element `+':
    x + = 5
      ^
ERROR: in line ###: line does not begin with a (possibly negated)
       attribute label; line ignored:
    x + = 5
    ^^^^^^^
ERROR: in line ###: not a legal value element `+':
    y = A +
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    y = A +
      ^
BRACKETED EXPRESSION:
    {"": x "+" = 5, y = [< A "+" >], z = [< A "+" B >]}
    lines ###-###:
!@<Y> :=:
^^^^^^^^^
    x + = 5
^^^^^^^^^^^
    x "+" = 5
^^^^^^^^^^^^^
    y = A +
^^^^^^^^^^^
    y = A "+"
^^^^^^^^^^^^^
    z = [< A + B >]
^^^^^^^^^^^^^^^^^^^
    z = [< A "+" B >]
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> IS {"": x[S] = {* [< A B C >], X *}}
    line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> IS {"": x "+" = 5, y = [< A "+" >], z = [< A "+" B >]}
    line ###:
INPUT ID <Y> IS @<Y>
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (X "," Y)
    line ###:
!@<Z1> := A, B, C + F(X, Y)
                     ^^^^^^
BRACKETED EXPRESSION:
    {raw data|A "," B "," C + F (X "," Y)|raw data}
    line ###:
!@<Z1> := A, B, C + F(X, Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A "," B "," C + F (X "," Y)|}
    line ###:
!@<Z1> := A, B, C + F(X, Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|A "," B "," C + F PREALLOCATED(1*0)|raw data}
    line ###:
!@<Z2> := A, B, C + F @<ARGS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|A "," B "," C + F PREALLOCATED(1*0)|}
    line ###:
!@<Z2> := A, B, C + F @<ARGS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    .initiator = "("
    line ###:
    .initiator = "("
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    .terminator = ")"
    line ###:
    .terminator = ")"
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              .initiator = "("|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              .terminator = ")"|}|}
    lines ###-###:
!@<ARGS> := X , Y:
                 ^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|X "," Y|raw data}
    line ###:
!@<ARGS> := X , Y:
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (X "," Y)
    lines ###-###:
!@<ARGS> := X , Y:
^^^^^^^^^^^^^^^^^^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z1> IS {|A "," B "," C + F (X "," Y)|}
    line ###:
INPUT ID <Z1> IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z2> IS {|A "," B "," C + F (X "," Y)|}
    line ###:
INPUT ID <Z2> IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {b|sentence|b}
    line ###:
!@<X1> := ``This is a {b|sentence|b}.''
                      ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``This is a {b|sentence|b} "."''
    line ###:
!@<X1> := ``This is a {b|sentence|b}.''
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|``This is a {b|sentence|b} "."''|raw data}
    line ###:
!@<X1> := ``This is a {b|sentence|b}.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``This is a {b|sentence|b} "."''
    line ###:
!@<X1> := ``This is a {b|sentence|b}.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {b|sentence|b}
    line ###:
@<X2>  := ``This is a {b|sentence|b}.''
                      ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|This is a {b|sentence|b}|s}
    line ###:
@<X2>  := ``This is a {b|sentence|b}.''
            ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|This is a {b|sentence|b}|s}''
    line ###:
@<X2>  := ``This is a {b|sentence|b}.''
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|``{s: .terminator = "."|This is a {b|sentence|b}|s}''|data}
    line ###:
@<X2>  := ``This is a {b|sentence|b}.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|This is a {b|sentence|b}|s}''
    line ###:
@<X2>  := ``This is a {b|sentence|b}.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X1> IS ``This is a {b|sentence|b} "."''
    line ###:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X2> IS
        ``{s: .terminator = "."|This is a {b|sentence|b}|s}''
    line ###:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a b c d|raw data}
    line ###:
!@@@ := a b c d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|a b c d|}
    line ###:
!@@@ := a b c d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 30 IS {|a b c d|}
    line ###:
INPUT ID 30 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a b c d)
    line ###:
!@@@ := ( a b c d )
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|(a b c d)|raw data}
    line ###:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a b c d)
    line ###:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 31 IS (a b c d)
    line ###:
INPUT ID 31 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a b c d]
    line ###:
!@@@ := [ a b c d ]
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|[a b c d]|raw data}
    line ###:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a b c d]
    line ###:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 32 IS [a b c d]
    line ###:
INPUT ID 32 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a b c d}}
    line ###:
!@@@ := {{ a b c d }}
        ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|{{a b c d}}|raw data}
    line ###:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a b c d}}
    line ###:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 33 IS {{a b c d}}
    line ###:
INPUT ID 33 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a + b)
    line ###:
!@@@ := ( a + b )
        ^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|(a + b)|raw data}
    line ###:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a + b)
    line ###:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 34 IS (a + b)
    line ###:
INPUT ID 34 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a + b]
    line ###:
!@@@ := [ a + b ]
        ^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|[a + b]|raw data}
    line ###:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a + b]
    line ###:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 35 IS [a + b]
    line ###:
INPUT ID 35 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a + b}}
    line ###:
!@@@ := {{ a + b }}
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|{{a + b}}|raw data}
    line ###:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a + b}}
    line ###:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 36 IS {{a + b}}
    line ###:
INPUT ID 36 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({|a|} + {|b|})
    line ###:
@@@ := ( a + b )
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {data|({|a|} + {|b|})|data}
    line ###:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({|a|} + {|b|})
    line ###:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 37 IS ({|a|} + {|b|})
    line ###:
INPUT ID 37 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [{|a|} + {|b|}]
    line ###:
@@@ := [ a + b ]
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {data|[{|a|} + {|b|}]|data}
    line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [{|a|} + {|b|}]
    line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 38 IS [{|a|} + {|b|}]
    line ###:
INPUT ID 38 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{{|a|} + {|b|}}}
    line ###:
@@@ := {{ a + b }}
       ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{{{|a|} + {|b|}}}|data}
    line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{{|a|} + {|b|}}}
    line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 39 IS {{{|a|} + {|b|}}}
    line ###:
INPUT ID 39 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c + d
    line ###:
    x = c + d
    ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c + d|}|}
    lines ###-###:
!@@@ := a + b:
             ^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a + b|raw data}
    line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
BRACKETED EXPRESSION:
    {|a + b|}
    lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 40 IS {|a + b|}
    line ###:
INPUT ID 40 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c + d
    line ###:
    x = c + d
    ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c + d|}|}
    lines ###-###:
@@@ := a + b:
            ^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|b|}|data}
    line ###:
@@@ := a + b:
^^^^^^^^^^^^
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
BRACKETED EXPRESSION:
    {|{|a|} + {|b|}|}
    lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 41 IS {|{|a|} + {|b|}|}
    line ###:
INPUT ID 41 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c "+" d
    line ###:
    x = c "+" d
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c "+" d|}|}
    lines ###-###:
!@@@ := a + b:
             ^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a + b|raw data}
    line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x = [< c "+" d >]|a + b|}
    lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 42 IS {"": x = [< c "+" d >]|a + b|}
    line ###:
INPUT ID 42 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c "+" d
    line ###:
    x = c "+" d
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c "+" d|}|}
    lines ###-###:
@@@ := a + b:
            ^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|b|}|data}
    line ###:
@@@ := a + b:
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x = [< c "+" d >]|{|a|} + {|b|}|}
    lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 43 IS {"": x = [< c "+" d >]|{|a|} + {|b|}|}
    line ###:
INPUT ID 43 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    "hi there" = 44
    line ###:
    "hi there" = 44
    ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              "hi there" = 44|}|}
    lines ###-###:
!@@@ :=:
       ^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ###:
!@@@ :=:
^
BRACKETED EXPRESSION:
    {"": "hi there" = 44}
    lines ###-###:
!@@@ :=:
^^^^^^^^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 50 IS {"": "hi there" = 44}
    line ###:
INPUT ID 50 IS @@@
^^^^^^^^^^^^^^^^^^
