=== BRACKETED EXPRESSION: line ##:
    kind = woman
    ^^^^^^^^^^^^
    kind = woman
=== BRACKETED EXPRESSION: line ##:
    name = Jill
    ^^^^^^^^^^^
    name = Jill
=== BRACKETED EXPRESSION: line ##:
    husband = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^
    husband = PREALLOCATED(1*0) = wife
=== BRACKETED EXPRESSION: lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              woman|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name =
              Jill|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|husband
              = PREALLOCATED(1*0) = wife|}|}
=== BRACKETED EXPRESSION: line ##:
!@<X> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": husband = @@ = wife, kind = woman, name = Jill}
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name = Jill
=== BRACKETED EXPRESSION: line ##:
    kind = man
    ^^^^^^^^^^
    kind = man
=== BRACKETED EXPRESSION: line ##:
    name = Jack
    ^^^^^^^^^^^
    name = Jack
=== BRACKETED EXPRESSION: line ##:
    wife = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^
    wife = {"": husband = @@ = wife, kind = woman, name = Jill} =
        husband
=== BRACKETED EXPRESSION: lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              man|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name =
              Jack|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|wife =
              {"": husband = @@ = wife, kind = woman, name = Jill} =
              husband|}|}
=== BRACKETED EXPRESSION: line ##:
!@<Y> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": kind = man, name = Jack, wife = @@ = husband}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X> : OUTPUT ID 2 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X>: OUTPUT ID 2 IS
        {"": husband = @@ = wife, kind = woman, name = Jill}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Y> : OUTPUT ID 1 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Y>: OUTPUT ID 1 IS
        {"": kind = man, name = Jack, wife = @@ = husband}
=== BRACKETED EXPRESSION: line ##:
    kind = woman
    ^^^^^^^^^^^^
    kind = woman
=== BRACKETED EXPRESSION: line ##:
    name[-] = Jill
        ^^^
    [-]
=== BRACKETED EXPRESSION: line ##:
    name[-] = Jill
    ^^^^^^^^^^^^^^
    name [-] = Jill
=== BRACKETED EXPRESSION: line ##:
    husband[*] = @<Y> = wife
           ^^^
    [*]
=== BRACKETED EXPRESSION: line ##:
    husband[*] = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^^^^
    husband [*] = PREALLOCATED(1*0) = wife
=== BRACKETED EXPRESSION: lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              woman|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name [-]
              = Jill|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|husband
              [*] = PREALLOCATED(1*0) = wife|}|}
=== BRACKETED EXPRESSION: line ##:
!@<X> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband[*] = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name[-] = Jill
=== BRACKETED EXPRESSION: line ##:
    kind = man
    ^^^^^^^^^^
    kind = man
=== BRACKETED EXPRESSION: line ##:
    name[+] = Jack
        ^^^
    [+]
=== BRACKETED EXPRESSION: line ##:
    name[+] = Jack
    ^^^^^^^^^^^^^^
    name [+] = Jack
=== BRACKETED EXPRESSION: line ##:
    wife[@] = @<X> = husband
        ^^^
    [@]
=== BRACKETED EXPRESSION: line ##:
    wife[@] = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^^^^
    wife [@] =
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill} =
        husband
=== BRACKETED EXPRESSION: lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              man|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name [+]
              = Jack|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|wife [@]
              =
              {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
              = husband|}|}
=== BRACKETED EXPRESSION: line ##:
!@<Y> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X>: OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Y>: OUTPUT ID 3 IS
        {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
=== BRACKETED EXPRESSION: line ##:
    kind = boy
    ^^^^^^^^^^
    kind = boy
=== BRACKETED EXPRESSION: line ##:
    name = Giddy
    ^^^^^^^^^^^^
    name = Giddy
=== BRACKETABLE EXPRESSION: line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
    {|{"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
      {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}|}
=== BRACKETED EXPRESSION: line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
    {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
       {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
=== BRACKETED EXPRESSION: line ##:
    parent = {* @<X>, @<Y> *} = child
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    parent =
        {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
           {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *} =
        child
=== BRACKETED EXPRESSION: lines ##-##:
!@<Z1> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              boy|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name =
              Giddy|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|parent =
              {* {"": husband[*] = @@ = wife, kind = woman, name[-] =
                      Jill},
                 {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
              = child|}|}
=== BRACKETED EXPRESSION: line ##:
!@<Z1> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<Z1> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
=== BRACKETED EXPRESSION: line ##:
    kind = boy
    ^^^^^^^^^^
    kind = boy
=== BRACKETED EXPRESSION: line ##:
    name = Giddy
    ^^^^^^^^^^^^
    name = Giddy
=== BRACKETED EXPRESSION: line ##:
    parent = @<X> = child
    ^^^^^^^^^^^^^^^^^^^^^
    parent =
        {"": husband[*] = @@ = wife, child = @@ = parent, kind = woman,
             name[-] = Jill} = child
!@@ :=:
           .position[H] = PACKED_VEC
           kind = boy
           parent = {* @@, @@ *} = child
           name = Giddy
=== BRACKETED EXPRESSION: line ##:
    parent = @<Y> = child
    ^^^^^^^^^^^^^^^^^^^^^
    parent =
        {"": child = @@ = parent, kind = man, name[+] = Jack, wife[@] =
             @@ = husband} = child
=== BRACKETED EXPRESSION: lines ##-##:
!@<Z2> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|kind =
              boy|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|name =
              Giddy|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|parent =
              {"": husband[*] = @@ = wife, child = @@ = parent, kind =
                   woman, name[-] = Jill} = child|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|parent =
              {"": child = @@ = parent, kind = man, name[+] = Jack,
                   wife[@] = @@ = husband} = child|}|}
=== BRACKETED EXPRESSION: line ##:
!@<Z2> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
!@<Z2> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X>: OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, child = {* @@, @@ *} = parent,
             kind = woman, name[-] = Jill}
!@@ :=:
           .position[H] = PACKED_VEC
           parent = {* @@, @@ *} = child
           name = Giddy
           kind = boy
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Y>: OUTPUT ID 3 IS
        {"": child = {* @@, @@ *} = parent, kind = man, name[+] = Jack,
             wife[@] = @@ = husband}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Z1> : OUTPUT ID 5 IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z1>: OUTPUT ID 5 IS
        {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Z2> : OUTPUT ID 6 IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z2>: OUTPUT ID 6 IS
        {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
=== BRACKETED EXPRESSION: line ##:
        a = @<Y> = b
        ^^^^^^^^^^^^
    a = PREALLOCATED(1*0) = b
=== BRACKETED EXPRESSION: lines ##-##:
@<X> :=:
       ^
        a = @<Y> = b
^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|a =
              PREALLOCATED(1*0) = b|}|}
=== BRACKETED EXPRESSION: line ##:
@<X> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<X> :=:
^^^^^^^^
        a = @<Y> = b
^^^^^^^^^^^^^^^^^^^^
    {"": a = @@ = b}
!@@ :=:
           .position[H] = PACKED_VEC
           b = @@ = a
!@@ :=:
           a = @@ = b
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
        b = @<X> = a
        ^^^^^^^^^^^^
    b = {"": a = @@ = b} = a
=== BRACKETED EXPRESSION: lines ##-##:
@<Y> :=:
       ^
        b = @<X> = a
^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|b =
              {"": a = @@ = b} = a|}|}
=== BRACKETED EXPRESSION: line ##:
@<Y> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<Y> :=:
^^^^^^^^
        b = @<X> = a
^^^^^^^^^^^^^^^^^^^^
    {"": b = @@ = a}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X> : OUTPUT ID 7 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X>: OUTPUT ID 7 IS {"": a = @@ = b}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Y> : OUTPUT ID 8 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Y>: OUTPUT ID 8 IS {"": b = @@ = a}
=== BRACKETED EXPRESSION: line ##:
    x1 = "{" "["
    ^^^^^^^^^^^^
    x1 = "{" "["
=== DERIVED EXPRESSION: line ##:
    x2 = [< "{" "[" >]
         ^^^^^^^^^^^^^
    [< "{" "[" >]
=== BRACKETED EXPRESSION: line ##:
    x2 = [< "{" "[" >]
    ^^^^^^^^^^^^^^^^^^
    x2 = [< "{" "[" >]
=== BRACKETED EXPRESSION: line ##:
    x y = 5
    ^^^^^^^
    x y = 5
=== DERIVED EXPRESSION: line ##:
    [< x y >] = 6
    ^^^^^^^^^
    [< x y >]
=== BRACKETED EXPRESSION: line ##:
    [< x y >] = 6
    ^^^^^^^^^^^^^
    [< x y >] = 6
=== BRACKETED EXPRESSION: lines ##-##:
@<X> :=:
       ^
    x1 = "{" "["
^^^^^^^^^^^^^^^^
    x2 = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x1 = "{"
              "["|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x2 =
              [< "{" "[" >]|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x y =
              5|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              [< x y >] = 6|}|}
=== BRACKETED EXPRESSION: line ##:
@<X> :=:
^
    {*DATA*}
ERROR: in line ##: not a legal label initial element `x y':
    [< x y >] = 6
    ^^^^^^^^^
ERROR: in line ##: line does not begin with a (possibly negated)
       attribute label; line ignored:
    [< x y >] = 6
    ^^^^^^^^^^^^^
=== BRACKETED EXPRESSION: lines ##-##:
@<X> :=:
^^^^^^^^
    x1 = "{" "["
^^^^^^^^^^^^^^^^
    x2 = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
    {"": x1 = [< "{" "[" >], x2 = [< "{" "[" >], x y = 5}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS
        {"": x1 = [< "{" "[" >], x2 = [< "{" "[" >], x y = 5}
=== BRACKETED EXPRESSION: line ##:
    x = TRUE
    ^^^^^^^^
    x = TRUE
=== BRACKETED EXPRESSION: line ##:
    y = FALSE
    ^^^^^^^^^
    y = FALSE
=== BRACKETED EXPRESSION: lines ##-##:
@<Z1> :=:
        ^
    x = TRUE
^^^^^^^^^^^^
    y = FALSE
^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x =
              TRUE|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y =
              FALSE|}|}
=== BRACKETED EXPRESSION: line ##:
@<Z1> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<Z1> :=:
^^^^^^^^^
    x = TRUE
^^^^^^^^^^^^
    y = FALSE
^^^^^^^^^^^^^
    {"": x = TRUE, y = FALSE}
=== BRACKETED EXPRESSION: line ##:
    x
    ^
    x
=== BRACKETED EXPRESSION: line ##:
    no y
    ^^^^
    no y
=== BRACKETED EXPRESSION: lines ##-##:
@<Z2> :=:
        ^
    x
^^^^^
    no y
^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|no y|}|}
=== BRACKETED EXPRESSION: line ##:
@<Z2> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<Z2> :=:
^^^^^^^^^
    x
^^^^^
    no y
^^^^^^^^
    {"": x, no y}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Z1> IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z1> IS {"": x = TRUE, y = FALSE}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <Z2> IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z2> IS {"": x, no y}
=== BRACKETED EXPRESSION: line ##:
    y[M] = A
     ^^^
    [M]
=== BRACKETED EXPRESSION: line ##:
    y[M] = A
    ^^^^^^^^
    y [M] = A
=== BRACKETED EXPRESSION: line ##:
    y    = A
    ^^^^^^^^
    y = A
=== BRACKETED EXPRESSION: line ##:
    y    = B
    ^^^^^^^^
    y = B
=== BRACKETED EXPRESSION: lines ##-##:
@<X1> :=:
        ^
    y[M] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y [M] =
              A|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = A|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = B|}|}
=== BRACKETED EXPRESSION: line ##:
@<X1> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<X1> :=:
^^^^^^^^^
    y[M] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": y[M] = {* B, A, A *}}
=== BRACKETED EXPRESSION: line ##:
    y[M] = {* A, A, B *}
     ^^^
    [M]
=== BRACKETABLE EXPRESSION: line ##:
    y[M] = {* A, A, B *}
           ^^^^^^^^^^^^^
    {|A, A, B|}
=== BRACKETED EXPRESSION: line ##:
    y[M] = {* A, A, B *}
           ^^^^^^^^^^^^^
    {* A, A, B *}
=== BRACKETED EXPRESSION: line ##:
    y[M] = {* A, A, B *}
    ^^^^^^^^^^^^^^^^^^^^
    y [M] = {* A, A, B *}
=== BRACKETED EXPRESSION: lines ##-##:
@<X2> :=:
        ^
    y[M] = {* A, A, B *}
^^^^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y [M] =
              {* A, A, B *}|}|}
=== BRACKETED EXPRESSION: line ##:
@<X2> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<X2> :=:
^^^^^^^^^
    y[M] = {* A, A, B *}
^^^^^^^^^^^^^^^^^^^^^^^^
    {"": y[M] = {* B, A, A *}}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X1> IS {"": y[M] = {* B, A, A *}}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X2> IS {"": y[M] = {* B, A, A *}}
=== BRACKETED EXPRESSION: line ##:
    y[S] = A
     ^^^
    [S]
=== BRACKETED EXPRESSION: line ##:
    y[S] = A
    ^^^^^^^^
    y [S] = A
=== BRACKETED EXPRESSION: line ##:
    y    = A
    ^^^^^^^^
    y = A
=== BRACKETED EXPRESSION: line ##:
    y    = B
    ^^^^^^^^
    y = B
=== BRACKETED EXPRESSION: lines ##-##:
@<X1> :=:
        ^
    y[S] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y [S] =
              A|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = A|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = B|}|}
=== BRACKETED EXPRESSION: line ##:
@<X1> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<X1> :=:
^^^^^^^^^
    y[S] = A
^^^^^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": y[S] = {* B, A *}}
=== BRACKETED EXPRESSION: line ##:
    y[S] = {* A, B *}
     ^^^
    [S]
=== BRACKETABLE EXPRESSION: line ##:
    y[S] = {* A, B *}
           ^^^^^^^^^^
    {|A, B|}
=== BRACKETED EXPRESSION: line ##:
    y[S] = {* A, B *}
           ^^^^^^^^^^
    {* A, B *}
=== BRACKETED EXPRESSION: line ##:
    y[S] = {* A, B *}
    ^^^^^^^^^^^^^^^^^
    y [S] = {* A, B *}
=== BRACKETED EXPRESSION: lines ##-##:
@<X2> :=:
        ^
    y[S] = {* A, B *}
^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y [S] =
              {* A, B *}|}|}
=== BRACKETED EXPRESSION: line ##:
@<X2> :=:
^
    {*DATA*}
=== BRACKETED EXPRESSION: lines ##-##:
@<X2> :=:
^^^^^^^^^
    y[S] = {* A, B *}
^^^^^^^^^^^^^^^^^^^^^
    {"": y[S] = {* B, A *}}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X1> IS {"": y[S] = {* B, A *}}
=== BRACKETED EXPRESSION: line ##:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X2> IS {"": y[S] = {* B, A *}}
=== BRACKETED EXPRESSION: line ###:
    y    = A
    ^^^^^^^^
    y = A
=== BRACKETED EXPRESSION: line ###:
    y    = B
    ^^^^^^^^
    y = B
=== BRACKETED EXPRESSION: lines ###-###:
@<X> :=:
       ^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = A|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = B|}|}
=== BRACKETED EXPRESSION: line ###:
@<X> :=:
^
    {*DATA*}
ERROR: in line ###: "y" already has different value(s); old value(s) not
       changed:
    y    = B
           ^
=== BRACKETED EXPRESSION: lines ###-###:
@<X> :=:
^^^^^^^^
    y    = A
^^^^^^^^^^^^
    y    = B
^^^^^^^^^^^^
    {"": y = A}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {"": y = A}
=== BRACKETED EXPRESSION: line ###:
!@<X1> := A 2 (C D) E
              ^^^^^
    (C D)
=== BRACKETED EXPRESSION: line ###:
!@<X1> := A 2 (C D) E
^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A 2 (C D) E|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X1> := A 2 (C D) E
^^^^^^^^^^^^^^^^^^^^^
    {|A 2 (C D) E|}
=== BRACKETED EXPRESSION: line ###:
!@<X2> := A 2 @<X3> E
^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A 2 PREALLOCATED(1*0) E|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X2> := A 2 @<X3> E
^^^^^^^^^^^^^^^^^^^^^
    {|A 2 PREALLOCATED(1*0) E|}
=== BRACKETED EXPRESSION: line ###:
    .initiator = "("
    ^^^^^^^^^^^^^^^^
    .initiator = "("
=== BRACKETED EXPRESSION: line ###:
    .terminator = ")"
    ^^^^^^^^^^^^^^^^^
    .terminator = ")"
=== BRACKETED EXPRESSION: lines ###-###:
!@<X3> := C D:
             ^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              .initiator = "("|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              .terminator = ")"|}|}
=== BRACKETED EXPRESSION: line ###:
!@<X3> := C D:
^^^^^^^^^^^^^
    {*RAW* *DATA*|C D|*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@<X3> := C D:
^^^^^^^^^^^^^^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
    (C D)
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X1> IS @<X1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X1> IS {|A 2 (C D) E|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X2> IS @<X2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X2> IS {|A 2 (C D) E|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X3> IS @<X3>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X3> IS (C D)
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
        ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
            ^
    {|b|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
                ^
    {|c|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
            ^^^^^
    {|{|b|} * {|c|}|}
=== BRACKETED EXPRESSION: line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
    {*DATA*|{|a|} + {|{|b|} * {|c|}|}|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
    {|{|a|} + {|{|b|} * {|c|}|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {|{|a|} + {|{|b|} * {|c|}|}|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
        ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
            ^
    {|b|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
                ^
    {|c|}
=== PURELIST EXPRESSION: line ###:
@<X> := a + b * c
            ^^^^^
    {|{|b|} * {|c|}|}
=== BRACKETED EXPRESSION: line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
    {*DATA*|{|a|} + {|{|b|} * {|c|}|}|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@<X> := a + b * c
^^^^^^^^^^^^^^^^^
    {|{|a|} + {|{|b|} * {|c|}|}|}
=== BRACKETED EXPRESSION: line ###:
!@<X> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|PREALLOCATED(1*0) + PREALLOCATED(1*0)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|PREALLOCATED(1*0) + PREALLOCATED(1*0)|}
=== BRACKETED EXPRESSION: line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|PREALLOCATED(1*0) * PREALLOCATED(1*0)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|PREALLOCATED(1*0) * PREALLOCATED(1*0)|}
=== BRACKETED EXPRESSION: line ###:
!@<A> := a
^^^^^^^^^^
    {*RAW* *DATA*|a|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<A> := a
^^^^^^^^^^
    {|a|}
=== BRACKETED EXPRESSION: line ###:
!@<B> := b
^^^^^^^^^^
    {*RAW* *DATA*|b|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<B> := b
^^^^^^^^^^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
!@<C> := c
^^^^^^^^^^
    {*RAW* *DATA*|c|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<C> := c
^^^^^^^^^^
    {|c|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {|{|a|} + {|{|b|} * {|c|}|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <PRODUCT> IS @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <PRODUCT> IS {|{|b|} * {|c|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <A> IS @<A>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <A> IS {|a|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <B> IS @<B>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <B> IS {|b|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <C> IS @<C>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <C> IS {|c|}
=== BRACKETED EXPRESSION: line ###:
!@<X> := A "B" C
^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A "B" C|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X> := A "B" C
^^^^^^^^^^^^^^^^
    {|A "B" C|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {|A "B" C|}
=== BRACKETED EXPRESSION: line ###:
!@<X> := A @<QUOTED> C
^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A PREALLOCATED(1*0) C|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X> := A @<QUOTED> C
^^^^^^^^^^^^^^^^^^^^^^
    {|A PREALLOCATED(1*0) C|}
=== BRACKETED EXPRESSION: line ###:
    .type = "<Q>"
    ^^^^^^^^^^^^^
    .type = "<Q>"
=== BRACKETED EXPRESSION: lines ###-###:
!@<QUOTED> := B:
               ^
    .type = "<Q>"
^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|.type =
              "<Q>"|}|}
=== BRACKETED EXPRESSION: line ###:
!@<QUOTED> := B:
^^^^^^^^^^^^^^^
    {*RAW* *DATA*|B|*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@<QUOTED> := B:
^^^^^^^^^^^^^^^^
    .type = "<Q>"
^^^^^^^^^^^^^^^^^
    "B"
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {|A "B" C|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <QUOTED> IS @<QUOTED>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <QUOTED> IS "B"
=== BRACKETED EXPRESSION: line ###:
    x[S]
     ^^^
    [S]
=== BRACKETED EXPRESSION: line ###:
    x[S]
    ^^^^
    x [S]
=== BRACKETED EXPRESSION: line ###:
    x = "X"
    ^^^^^^^
    x = "X"
=== BRACKETED EXPRESSION: line ###:
    "x" = "X"
    ^^^^^^^^^
    "x" = "X"
=== BRACKETED EXPRESSION: line ###:
    x = A "B" C
    ^^^^^^^^^^^
    x = A "B" C
=== DERIVED EXPRESSION: line ###:
    x = [< A "B" C >]
        ^^^^^^^^^^^^^
    [< A B C >]
=== BRACKETED EXPRESSION: line ###:
    x = [< A "B" C >]
    ^^^^^^^^^^^^^^^^^
    x = [< A B C >]
=== BRACKETED EXPRESSION: lines ###-###:
!@<X> :=:
        ^
    x[S]
^^^^^^^^
    x = "X"
^^^^^^^^^^^
    "x" = "X"
^^^^^^^^^^^^^
    x = A "B" C
^^^^^^^^^^^^^^^
    x = [< A "B" C >]
^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x [S]|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x =
              "X"|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|"x" =
              "X"|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x = A
              "B" C|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x =
              [< A B C >]|}|}
=== BRACKETED EXPRESSION: line ###:
!@<X> :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@<X> :=:
^^^^^^^^^
    x[S]
^^^^^^^^
    x = "X"
^^^^^^^^^^^
    "x" = "X"
^^^^^^^^^^^^^
    x = A "B" C
^^^^^^^^^^^^^^^
    x = [< A "B" C >]
^^^^^^^^^^^^^^^^^^^^^
    {"": x[S] = {* [< A B C >], X *}}
=== BRACKETED EXPRESSION: line ###:
    x + = 5
    ^^^^^^^
    x + = 5
=== BRACKETED EXPRESSION: line ###:
    x "+" = 5
    ^^^^^^^^^
    x "+" = 5
=== BRACKETED EXPRESSION: line ###:
    y = A +
    ^^^^^^^
    y = A +
=== BRACKETED EXPRESSION: line ###:
    y = A "+"
    ^^^^^^^^^
    y = A "+"
WARNING: in line ###: mark should be quoted:
    z = [< A + B >]
             ^
=== DERIVED EXPRESSION: line ###:
    z = [< A + B >]
        ^^^^^^^^^^^
    [< A "+" B >]
=== BRACKETED EXPRESSION: line ###:
    z = [< A + B >]
    ^^^^^^^^^^^^^^^
    z = [< A "+" B >]
=== DERIVED EXPRESSION: line ###:
    z = [< A "+" B >]
        ^^^^^^^^^^^^^
    [< A "+" B >]
=== BRACKETED EXPRESSION: line ###:
    z = [< A "+" B >]
    ^^^^^^^^^^^^^^^^^
    z = [< A "+" B >]
=== BRACKETED EXPRESSION: lines ###-###:
!@<Y> :=:
        ^
    x + = 5
^^^^^^^^^^^
    x "+" = 5
^^^^^^^^^^^^^
    y = A +
^^^^^^^^^^^
    y = A "+"
^^^^^^^^^^^^^
    z = [< A + B >]
^^^^^^^^^^^^^^^^^^^
    z = [< A "+" B >]
^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x + =
              5|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x "+" =
              5|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = A
              +|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|y = A
              "+"|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|z =
              [< A "+" B >]|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|z =
              [< A "+" B >]|}|}
=== BRACKETED EXPRESSION: line ###:
!@<Y> :=:
^
    {*RAW* *DATA*}
ERROR: in line ###: not a legal label element `+':
    x + = 5
      ^
ERROR: in line ###: line does not begin with a (possibly negated)
       attribute label; line ignored:
    x + = 5
    ^^^^^^^
ERROR: in line ###: not a legal value element `+':
    y = A +
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    y = A +
      ^
=== BRACKETED EXPRESSION: lines ###-###:
!@<Y> :=:
^^^^^^^^^
    x + = 5
^^^^^^^^^^^
    x "+" = 5
^^^^^^^^^^^^^
    y = A +
^^^^^^^^^^^
    y = A "+"
^^^^^^^^^^^^^
    z = [< A + B >]
^^^^^^^^^^^^^^^^^^^
    z = [< A "+" B >]
^^^^^^^^^^^^^^^^^^^^^
    {"": x "+" = 5, y = [< A "+" >], z = [< A "+" B >]}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X> IS @<X>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X> IS {"": x[S] = {* [< A B C >], X *}}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <Y> IS @<Y>
^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Y> IS {"": x "+" = 5, y = [< A "+" >], z = [< A "+" B >]}
=== BRACKETED EXPRESSION: line ###:
!@<Z1> := A, B, C + F(X, Y)
                     ^^^^^^
    (X "," Y)
=== BRACKETED EXPRESSION: line ###:
!@<Z1> := A, B, C + F(X, Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A "," B "," C + F (X "," Y)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<Z1> := A, B, C + F(X, Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|A "," B "," C + F (X "," Y)|}
=== BRACKETED EXPRESSION: line ###:
!@<Z2> := A, B, C + F @<ARGS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|A "," B "," C + F PREALLOCATED(1*0)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<Z2> := A, B, C + F @<ARGS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|A "," B "," C + F PREALLOCATED(1*0)|}
=== BRACKETED EXPRESSION: line ###:
    .initiator = "("
    ^^^^^^^^^^^^^^^^
    .initiator = "("
=== BRACKETED EXPRESSION: line ###:
    .terminator = ")"
    ^^^^^^^^^^^^^^^^^
    .terminator = ")"
=== BRACKETED EXPRESSION: lines ###-###:
!@<ARGS> := X , Y:
                 ^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              .initiator = "("|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              .terminator = ")"|}|}
=== BRACKETED EXPRESSION: line ###:
!@<ARGS> := X , Y:
^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|X "," Y|*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@<ARGS> := X , Y:
^^^^^^^^^^^^^^^^^^
    .initiator = "("
^^^^^^^^^^^^^^^^^^^^
    .terminator = ")"
^^^^^^^^^^^^^^^^^^^^^
    (X "," Y)
=== BRACKETED EXPRESSION: line ###:
INPUT ID <Z1> IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z1> IS {|A "," B "," C + F (X "," Y)|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <Z2> IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <Z2> IS {|A "," B "," C + F (X "," Y)|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := a b c d
^^^^^^^^^^^^^^^
    {*RAW* *DATA*|a b c d|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := a b c d
^^^^^^^^^^^^^^^
    {|a b c d|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 30 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 30 IS {|a b c d|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a b c d )
        ^^^^^^^^^^^
    (a b c d)
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|(a b c d)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
    (a b c d)
=== BRACKETED EXPRESSION: line ###:
INPUT ID 31 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 31 IS (a b c d)
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a b c d ]
        ^^^^^^^^^^^
    [a b c d]
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|[a b c d]|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
    [a b c d]
=== BRACKETED EXPRESSION: line ###:
INPUT ID 32 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 32 IS [a b c d]
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a b c d }}
        ^^^^^^^^^^^^^
    {{a b c d}}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|{{a b c d}}|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
    {{a b c d}}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 33 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 33 IS {{a b c d}}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a + b )
        ^^^^^^^^^
    (a + b)
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|(a + b)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
    (a + b)
=== BRACKETED EXPRESSION: line ###:
INPUT ID 34 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 34 IS (a + b)
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a + b ]
        ^^^^^^^^^
    [a + b]
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|[a + b]|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
    [a + b]
=== BRACKETED EXPRESSION: line ###:
INPUT ID 35 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 35 IS [a + b]
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a + b }}
        ^^^^^^^^^^^
    {{a + b}}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|{{a + b}}|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
    {{a + b}}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 36 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 36 IS {{a + b}}
=== PURELIST EXPRESSION: line ###:
@@@ := ( a + b )
         ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@@@ := ( a + b )
             ^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
@@@ := ( a + b )
       ^^^^^^^^^
    ({|a|} + {|b|})
=== BRACKETED EXPRESSION: line ###:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
    {*DATA*|({|a|} + {|b|})|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
    ({|a|} + {|b|})
=== BRACKETED EXPRESSION: line ###:
INPUT ID 37 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 37 IS ({|a|} + {|b|})
=== PURELIST EXPRESSION: line ###:
@@@ := [ a + b ]
         ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@@@ := [ a + b ]
             ^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
@@@ := [ a + b ]
       ^^^^^^^^^
    [{|a|} + {|b|}]
=== BRACKETED EXPRESSION: line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
    {*DATA*|[{|a|} + {|b|}]|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
    [{|a|} + {|b|}]
=== BRACKETED EXPRESSION: line ###:
INPUT ID 38 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 38 IS [{|a|} + {|b|}]
=== PURELIST EXPRESSION: line ###:
@@@ := {{ a + b }}
          ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@@@ := {{ a + b }}
              ^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
@@@ := {{ a + b }}
       ^^^^^^^^^^^
    {{{|a|} + {|b|}}}
=== BRACKETED EXPRESSION: line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
    {*DATA*|{{{|a|} + {|b|}}}|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
    {{{|a|} + {|b|}}}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 39 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 39 IS {{{|a|} + {|b|}}}
=== BRACKETED EXPRESSION: line ###:
    x = c + d
    ^^^^^^^^^
    x = c + d
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := a + b:
             ^
    x = c + d
^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x = c +
              d|}|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
    {*RAW* *DATA*|a + b|*RAW* *DATA*}
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
    {|a + b|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 40 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 40 IS {|a + b|}
=== BRACKETED EXPRESSION: line ###:
    x = c + d
    ^^^^^^^^^
    x = c + d
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := a + b:
            ^
    x = c + d
^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x = c +
              d|}|}
=== PURELIST EXPRESSION: line ###:
@@@ := a + b:
       ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@@@ := a + b:
           ^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
@@@ := a + b:
^^^^^^^^^^^^
    {*DATA*|{|a|} + {|b|}|*DATA*}
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
    {|{|a|} + {|b|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 41 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 41 IS {|{|a|} + {|b|}|}
=== BRACKETED EXPRESSION: line ###:
    x = c "+" d
    ^^^^^^^^^^^
    x = c "+" d
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := a + b:
             ^
    x = c "+" d
^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x = c
              "+" d|}|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
    {*RAW* *DATA*|a + b|*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
    {"": x = [< c "+" d >]|a + b|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 42 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 42 IS {"": x = [< c "+" d >]|a + b|}
=== BRACKETED EXPRESSION: line ###:
    x = c "+" d
    ^^^^^^^^^^^
    x = c "+" d
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := a + b:
            ^
    x = c "+" d
^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|x = c
              "+" d|}|}
=== PURELIST EXPRESSION: line ###:
@@@ := a + b:
       ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@@@ := a + b:
           ^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
@@@ := a + b:
^^^^^^^^^^^^
    {*DATA*|{|a|} + {|b|}|*DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
    {"": x = [< c "+" d >]|{|a|} + {|b|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 43 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 43 IS {"": x = [< c "+" d >]|{|a|} + {|b|}|}
=== BRACKETED EXPRESSION: line ###:
    "hi there" = 44
    ^^^^^^^^^^^^^^^
    "hi there" = 44
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ :=:
       ^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|
              "hi there" = 44|}|}
=== BRACKETED EXPRESSION: line ###:
!@@@ :=:
^
    {*RAW* *DATA*}
=== BRACKETED EXPRESSION: lines ###-###:
!@@@ :=:
^^^^^^^^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
    {"": "hi there" = 44}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 50 IS @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 50 IS {"": "hi there" = 44}
=== PURELIST EXPRESSION: line ###:
!@@@ := {|X Y Z|}
        ^^^^^^^^^
    {|X Y Z|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {|X Y Z|}
^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|X Y Z|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := {|X Y Z|}
^^^^^^^^^^^^^^^^^
    {|X Y Z|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID 60 is @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 60 is {|X Y Z|}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ``X Y Z''
        ^^^^^^^^^
    ``X Y Z''
=== BRACKETED EXPRESSION: line ###:
!@@@ := ``X Y Z''
^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|``X Y Z''|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@@@ := ``X Y Z''
^^^^^^^^^^^^^^^^^
    ``X Y Z''
=== BRACKETED EXPRESSION: line ###:
INPUT ID 61 is @@@
^^^^^^^^^^^^^^^^^^
    INPUT ID 61 is ``X Y Z''
=== PURELIST EXPRESSION: line ###:
@<X1> := a + b * c
         ^
    {|a|}
=== PURELIST EXPRESSION: line ###:
@<X1> := a + b * c
             ^
    {|b|}
=== PURELIST EXPRESSION: line ###:
@<X1> := a + b * c
                 ^
    {|c|}
=== PURELIST EXPRESSION: line ###:
@<X1> := a + b * c
             ^^^^^
    {|{|b|} * {|c|}|}
=== BRACKETED EXPRESSION: line ###:
@<X1> := a + b * c
^^^^^^^^^^^^^^^^^^
    {*DATA*|{|a|} + {|{|b|} * {|c|}|}|*DATA*}
=== BRACKETED EXPRESSION: line ###:
@<X1> := a + b * c
^^^^^^^^^^^^^^^^^^
    {|{|a|} + {|{|b|} * {|c|}|}|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X1> is @<X1>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X1> is {|{|a|} + {|{|b|} * {|c|}|}|}
=== BRACKETED EXPRESSION: line ###:
!@<X2> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|PREALLOCATED(1*0) + PREALLOCATED(1*0)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<X2> := @<A> + @<PRODUCT>
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|PREALLOCATED(1*0) + PREALLOCATED(1*0)|}
=== BRACKETED EXPRESSION: line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {*RAW* *DATA*|PREALLOCATED(1*0) * PREALLOCATED(1*0)|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<PRODUCT> := @<B> * @<C>
^^^^^^^^^^^^^^^^^^^^^^^^^^
    {|PREALLOCATED(1*0) * PREALLOCATED(1*0)|}
=== BRACKETED EXPRESSION: line ###:
!@<A> := a
^^^^^^^^^^
    {*RAW* *DATA*|a|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<A> := a
^^^^^^^^^^
    {|a|}
=== BRACKETED EXPRESSION: line ###:
!@<B> := b
^^^^^^^^^^
    {*RAW* *DATA*|b|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<B> := b
^^^^^^^^^^
    {|b|}
=== BRACKETED EXPRESSION: line ###:
!@<C> := c
^^^^^^^^^^
    {*RAW* *DATA*|c|*RAW* *DATA*}
=== BRACKETED EXPRESSION: line ###:
!@<C> := c
^^^^^^^^^^
    {|c|}
=== BRACKETED EXPRESSION: line ###:
INPUT ID <X2> is @<X2>
^^^^^^^^^^^^^^^^^^^^^^
    INPUT ID <X2> is {|{|a|} + {|{|b|} * {|c|}|}|}
