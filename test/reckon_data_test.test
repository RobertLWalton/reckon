*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
BRACKETED EXPRESSION:
    kind = woman
    line ##:
    kind = woman
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Jill
    line ##:
    name = Jill
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    husband = PREALLOCATED(1*0) = wife
    line ##:
    husband = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = woman|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Jill|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              husband = PREALLOCATED(1*0) = wife|}|}
    lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<X> :=:
^
BRACKETED EXPRESSION:
    {"": husband = @@ = wife, kind = woman, name = Jill}
    lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name = Jill
^^^^^^^^^^^^^^^
    husband = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name = Jill
BRACKETED EXPRESSION:
    kind = man
    line ##:
    kind = man
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Jack
    line ##:
    name = Jack
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    wife = {"": husband = @@ = wife, kind = woman, name = Jill} =
        husband
    line ##:
    wife = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = man|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Jack|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|wife
              = {"": husband = @@ = wife, kind = woman, name = Jill} =
              husband|}|}
    lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Y> :=:
^
BRACKETED EXPRESSION:
    {"": kind = man, name = Jack, wife = @@ = husband}
    lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name = Jack
^^^^^^^^^^^^^^^
    wife = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 2 IS
        {"": husband = @@ = wife, kind = woman, name = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 2 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 1 IS
        {"": kind = man, name = Jack, wife = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 1 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = woman
    line ##:
    kind = woman
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [-]
    line ##:
    name[-] = Jill
        ^^^
BRACKETED EXPRESSION:
    name [-] = Jill
    line ##:
    name[-] = Jill
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [*]
    line ##:
    husband[*] = @<Y> = wife
           ^^^
BRACKETED EXPRESSION:
    husband [*] = PREALLOCATED(1*0) = wife
    line ##:
    husband[*] = @<Y> = wife
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = woman|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              [-] = Jill|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              husband [*] = PREALLOCATED(1*0) = wife|}|}
    lines ##-##:
!@<X> :=:
        ^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<X> :=:
^
BRACKETED EXPRESSION:
    {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
    lines ##-##:
!@<X> :=:
^^^^^^^^^
    kind = woman
^^^^^^^^^^^^^^^^
    name[-] = Jill
^^^^^^^^^^^^^^^^^^
    husband[*] = @<Y> = wife
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           wife = @@ = husband
!@@ :=:
           husband[*] = @@ = wife
           .position[H] = PACKED_VEC
           kind = woman
           name[-] = Jill
BRACKETED EXPRESSION:
    kind = man
    line ##:
    kind = man
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    [+]
    line ##:
    name[+] = Jack
        ^^^
BRACKETED EXPRESSION:
    name [+] = Jack
    line ##:
    name[+] = Jack
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [@]
    line ##:
    wife[@] = @<X> = husband
        ^^^
BRACKETED EXPRESSION:
    wife [@] =
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill} =
        husband
    line ##:
    wife[@] = @<X> = husband
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = man|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              [+] = Jack|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|wife
              [@] =
              {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
              = husband|}|}
    lines ##-##:
!@<Y> :=:
        ^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Y> :=:
^
BRACKETED EXPRESSION:
    {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
    lines ##-##:
!@<Y> :=:
^^^^^^^^^
    kind = man
^^^^^^^^^^^^^^
    name[+] = Jack
^^^^^^^^^^^^^^^^^^
    wife[@] = @<X> = husband
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 3 IS
        {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = boy
    line ##:
    kind = boy
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Giddy
    line ##:
    name = Giddy
    ^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
      {"": kind = man, name[+] = Jack, wife[@] = @@ = husband}|}
    line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
       {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
    line ##:
    parent = {* @<X>, @<Y> *} = child
             ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    parent =
        {* {"": husband[*] = @@ = wife, kind = woman, name[-] = Jill},
           {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *} =
        child
    line ##:
    parent = {* @<X>, @<Y> *} = child
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = boy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Giddy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {* {"": husband[*] = @@ = wife, kind = woman, name[-] =
                      Jill},
                 {"": kind = man, name[+] = Jack, wife[@] = @@ = husband} *}
              = child|}|}
    lines ##-##:
!@<Z1> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Z1> :=:
^
BRACKETED EXPRESSION:
    {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
    lines ##-##:
!@<Z1> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = {* @<X>, @<Y> *} = child
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    kind = boy
    line ##:
    kind = boy
    ^^^^^^^^^^
BRACKETED EXPRESSION:
    name = Giddy
    line ##:
    name = Giddy
    ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    parent =
        {"": husband[*] = @@ = wife, child = @@ = parent, kind = woman,
             name[-] = Jill} = child
    line ##:
    parent = @<X> = child
    ^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           kind = boy
           parent = {* @@, @@ *} = child
           name = Giddy
BRACKETED EXPRESSION:
    parent =
        {"": child = @@ = parent, kind = man, name[+] = Jack, wife[@] =
             @@ = husband} = child
    line ##:
    parent = @<Y> = child
    ^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|kind
              = boy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|name
              = Giddy|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {"": husband[*] = @@ = wife, child = @@ = parent, kind =
                   woman, name[-] = Jill} = child|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              parent =
              {"": child = @@ = parent, kind = man, name[+] = Jack,
                   wife[@] = @@ = husband} = child|}|}
    lines ##-##:
!@<Z2> :=:
         ^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@<Z2> :=:
^
BRACKETED EXPRESSION:
    {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
    lines ##-##:
!@<Z2> :=:
^^^^^^^^^^
    kind = boy
^^^^^^^^^^^^^^
    name = Giddy
^^^^^^^^^^^^^^^^
    parent = @<X> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
    parent = @<Y> = child
^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <X> ":" OUTPUT ID 4 IS
        {"": husband[*] = @@ = wife, child = {* @@, @@ *} = parent,
             kind = woman, name[-] = Jill}
    line ##:
INPUT ID <X> : OUTPUT ID 4 IS @<X>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
!@@ :=:
           .position[H] = PACKED_VEC
           parent = {* @@, @@ *} = child
           name = Giddy
           kind = boy
BRACKETED EXPRESSION:
    INPUT ID <Y> ":" OUTPUT ID 3 IS
        {"": child = {* @@, @@ *} = parent, kind = man, name[+] = Jack,
             wife[@] = @@ = husband}
    line ##:
INPUT ID <Y> : OUTPUT ID 3 IS @<Y>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z1> ":" OUTPUT ID 5 IS
        {"": kind = boy, parent = {* @@, @@ *} = child, name = Giddy}
    line ##:
INPUT ID <Z1> : OUTPUT ID 5 IS @<Z1>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID <Z2> ":" OUTPUT ID 6 IS
        {"": parent = {* @@, @@ *} = child, name = Giddy, kind = boy}
    line ##:
INPUT ID <Z2> : OUTPUT ID 6 IS @<Z2>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
DERIVED EXPRESSION:
    [< "{" "[" >]
    line ##:
    x = [< "{" "[" >]
        ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = [< "{" "[" >]
    line ##:
    x = [< "{" "[" >]
    ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x y = 5
    line ##:
    x y = 5
    ^^^^^^^
DERIVED EXPRESSION:
    [< x y >]
    line ##:
    [< x y >] = 6
    ^^^^^^^^^
BRACKETED EXPRESSION:
    [< x y >] = 6
    line ##:
    [< x y >] = 6
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              [< "{" "[" >]|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x y
              = 5|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              [< x y >] = 6|}|}
    lines ##-##:
!@@@ :=:
       ^
    x = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@@@ :=:
^
ERROR: in line ##: not a legal label initial element `x y':
    [< x y >] = 6
    ^^^^^^^^^
ERROR: in line ##: line does not begin with a (possibly negated)
       attribute label; line ignored:
    [< x y >] = 6
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x = [< "{" "[" >], x y = 5}
    lines ##-##:
!@@@ :=:
^^^^^^^^
    x = [< "{" "[" >]
^^^^^^^^^^^^^^^^^^^^^
    x y = 5
^^^^^^^^^^^
    [< x y >] = 6
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 21 IS {"": x = [< "{" "[" >], x y = 5}
    line ##:
INPUT ID 21 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = y 1
    line ##:
    x = y 1
    ^^^^^^^
BRACKETED EXPRESSION:
    x = y 2
    line ##:
    x = y 2
    ^^^^^^^
BRACKETABLE EXPRESSION:
    {|[< y 1 >], [< y 2 >]|}
    line ##:
    z = {* y 1, y 2 *}
        ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {* [< y 1 >], [< y 2 >] *}
    line ##:
    z = {* y 1, y 2 *}
        ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    z = {* [< y 1 >], [< y 2 >] *}
    line ##:
    z = {* y 1, y 2 *}
    ^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              y 1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              y 2|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|z =
              {* [< y 1 >], [< y 2 >] *}|}|}
    lines ##-##:
!@@@ :=:
       ^
    x = y 1
^^^^^^^^^^^
    x = y 2
^^^^^^^^^^^
    z = {* y 1, y 2 *}
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@@@ :=:
^
ERROR: in line ##: "x" already has value(s); old value(s) not changed:
    x = y 2
      ^^^^^
BRACKETED EXPRESSION:
    {"": x = [< y 1 >], z = {* [< y 1 >], [< y 2 >] *}}
    lines ##-##:
!@@@ :=:
^^^^^^^^
    x = y 1
^^^^^^^^^^^
    x = y 2
^^^^^^^^^^^
    z = {* y 1, y 2 *}
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 22 IS {"": x = [< y 1 >], z = {* [< y 1 >], [< y 2 >] *}}
    line ##:
INPUT ID 22 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x
    line ##:
    x
    ^
BRACKETED EXPRESSION:
    no y
    line ##:
    no y
    ^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|no
              y|}|}
    lines ##-##:
!@@@ :=:
       ^
    x
^^^^^
    no y
^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ##:
!@@@ :=:
^
BRACKETED EXPRESSION:
    {"": x, no y}
    lines ##-##:
!@@@ :=:
^^^^^^^^
    x
^^^^^
    no y
^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 23 IS {"": x, no y}
    line ##:
INPUT ID 23 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a b c d|raw data}
    line ##:
!@@@ := a b c d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {|a b c d|}
    line ##:
!@@@ := a b c d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 30 IS {|a b c d|}
    line ##:
INPUT ID 30 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a b c d)
    line ##:
!@@@ := ( a b c d )
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|(a b c d)|raw data}
    line ##:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a b c d)
    line ##:
!@@@ := ( a b c d )
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 31 IS (a b c d)
    line ##:
INPUT ID 31 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a b c d]
    line ##:
!@@@ := [ a b c d ]
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|[a b c d]|raw data}
    line ##:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a b c d]
    line ##:
!@@@ := [ a b c d ]
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 32 IS [a b c d]
    line ##:
INPUT ID 32 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a b c d}}
    line ##:
!@@@ := {{ a b c d }}
        ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|{{a b c d}}|raw data}
    line ##:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a b c d}}
    line ##:
!@@@ := {{ a b c d }}
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 33 IS {{a b c d}}
    line ##:
INPUT ID 33 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a + b)
    line ##:
!@@@ := ( a + b )
        ^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|(a + b)|raw data}
    line ##:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a + b)
    line ##:
!@@@ := ( a + b )
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 34 IS (a + b)
    line ##:
INPUT ID 34 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a + b]
    line ##:
!@@@ := [ a + b ]
        ^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|[a + b]|raw data}
    line ##:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [a + b]
    line ##:
!@@@ := [ a + b ]
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 35 IS [a + b]
    line ##:
INPUT ID 35 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a + b}}
    line ##:
!@@@ := {{ a + b }}
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|{{a + b}}|raw data}
    line ##:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{a + b}}
    line ##:
!@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 36 IS {{a + b}}
    line ##:
INPUT ID 36 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({|a|} + {|b|})
    line ##:
@@@ := ( a + b )
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {data|({|a|} + {|b|})|data}
    line ##:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({|a|} + {|b|})
    line ##:
@@@ := ( a + b )
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 37 IS ({|a|} + {|b|})
    line ###:
INPUT ID 37 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [{|a|} + {|b|}]
    line ###:
@@@ := [ a + b ]
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {data|[{|a|} + {|b|}]|data}
    line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [{|a|} + {|b|}]
    line ###:
@@@ := [ a + b ]
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 38 IS [{|a|} + {|b|}]
    line ###:
INPUT ID 38 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{{|a|} + {|b|}}}
    line ###:
@@@ := {{ a + b }}
       ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{{{|a|} + {|b|}}}|data}
    line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{{|a|} + {|b|}}}
    line ###:
@@@ := {{ a + b }}
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 39 IS {{{|a|} + {|b|}}}
    line ###:
INPUT ID 39 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c + d
    line ###:
    x = c + d
    ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c + d|}|}
    lines ###-###:
!@@@ := a + b:
             ^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a + b|raw data}
    line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
BRACKETED EXPRESSION:
    {|a + b|}
    lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 40 IS {|a + b|}
    line ###:
INPUT ID 40 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c + d
    line ###:
    x = c + d
    ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c + d|}|}
    lines ###-###:
@@@ := a + b:
            ^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|b|}|data}
    line ###:
@@@ := a + b:
^^^^^^^^^^^^
ERROR: in line ###: not a legal value element `+':
    x = c + d
          ^
ERROR: in line ###: after `=' attribute value (label or single bracketed
       subexpression) was expected but none found; line ignored:
    x = c + d
      ^
BRACKETED EXPRESSION:
    {|{|a|} + {|b|}|}
    lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c + d
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 41 IS {|{|a|} + {|b|}|}
    line ###:
INPUT ID 41 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c "+" d
    line ###:
    x = c "+" d
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c "+" d|}|}
    lines ###-###:
!@@@ := a + b:
             ^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data|a + b|raw data}
    line ###:
!@@@ := a + b:
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x = [< c "+" d >]|a + b|}
    lines ###-###:
!@@@ := a + b:
^^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 42 IS {"": x = [< c "+" d >]|a + b|}
    line ###:
INPUT ID 42 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    x = c "+" d
    line ###:
    x = c "+" d
    ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|x =
              c "+" d|}|}
    lines ###-###:
@@@ := a + b:
            ^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {data|{|a|} + {|b|}|data}
    line ###:
@@@ := a + b:
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": x = [< c "+" d >]|{|a|} + {|b|}|}
    lines ###-###:
@@@ := a + b:
^^^^^^^^^^^^^
    x = c "+" d
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 43 IS {"": x = [< c "+" d >]|{|a|} + {|b|}|}
    line ###:
INPUT ID 43 IS @@@
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    "hi there" = 44
    line ###:
    "hi there" = 44
    ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              "hi there" = 44|}|}
    lines ###-###:
!@@@ :=:
       ^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {raw data}
    line ###:
!@@@ :=:
^
BRACKETED EXPRESSION:
    {"": "hi there" = 44}
    lines ###-###:
!@@@ :=:
^^^^^^^^
    "hi there" = 44
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    INPUT ID 50 IS {"": "hi there" = 44}
    line ###:
INPUT ID 50 IS @@@
^^^^^^^^^^^^^^^^^^
