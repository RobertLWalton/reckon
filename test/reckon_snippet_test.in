// Reckon Snippet Test Data
//
// File:	reckon_snippet_test.in
// Author:	Bob Walton (walton@acm.org)
// Date:	Mon Feb  1 02:01:10 EST 2021
//
// The authors have placed this data in the public
// domain; they make no warranty and accept no liability
// for this data.

*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
    trace [+ operator subexpressions]
    print selector ""
    print bracket ""

9
9 + 8
x = 9
y = 9 + 8
x + y
f (b, c, x) = b * x + c
f (10, x, y)

g = `hello'
`[g] there'
z = `I thought he said `[g]'.'
// ` should be text; `` needs work

f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
h = (- 0.96 + 0.67 * x) in x
(f + h) in x
solve (f + h = 0) for x
(f + h) at (x = (3, 4, 5))
g = {{ integral (x ^ 2 * dx) }}
simplify g
v = g from (x = 1) to (x = 5)
out = `The value of {{[g] from (x = 1) to (x = 5)}}
       is [v].'
V =# {| 1 2 3 |}
M =#:
   0   1   1
   -1  1   0
   1   0  -1
V ^ T
M * V ^ T

a person:
    name = `Jack'
    weight = 123 lb
    height = 5 ft 9 in
    age = 23 yr 2 mo
a person:
    name = `Jill'
    weight = 110 lb
    height = 5 ft 7 in
    age = 21 yr 8 mo
the person named Jack's height
the weight of the person named Jack
// the weight of @1000001
for every person:
    body mass index = 703.06958 * weight in lbs
                    / height in inches ^ 2

sum from X through Y <-- is an integer X,
                          is an integer Y:
    `Sum of integers from X through Y.'
    if (X > Y):
        value = 0
    else:
        value = X + sum (X + 1) through Y
sum from 5 through 10
all (sums from X through Y)
sum from 1 through 2
all (sums from X through Y)

sum from X through Y <-- is an integer X,
                         is an integer Y:
    `Sum of integers from X through Y.'
    value = 0
    while ( X <= Y ):
        next value = value + X
	next X = X + 1
sum from 5 through 10
all ( sums from X through Y)

average weight of X <-- list X of persons:
    count = 0
    sum = 0
    while X != ():
        next count = count + 1
	next sum = sum + the weight of (first X)
	next X = rest X
    if count == 0:
        value = error ``Cannot average 0 things.''
    else:
        value = sum / count
average weight of (all persons)
z = 10 + average weight of (all persons named `Bill')
