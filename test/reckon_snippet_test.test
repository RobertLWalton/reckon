*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
    trace [+ operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print bracket ""
        block standard: bracket "``" ... "''" [data, code, math, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with label reformatter
        block standard: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [data, code, math, text]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block reckon: bracket "[" ... "]" [code, text]
                      with parsing selectors [- code, + math, - text]
        block standard: bracket "[" ... "]" [data, code, math, text]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block reckon: bracket "`" ... "'" [code, math, text]
                      with parsing selectors [- data, - code, - math,
                                              + text]
        block standard: bracket "`" ... "'" [data, code, math, text]
                        with parsing selectors [- data, + atom, - code,
                                                - math, - text]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [- data, + atom]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [code, math, text]
                        with parsing selectors [- code, + math, - text]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with special reformatter
BRACKETED EXPRESSION:
    9
    line ##:
9
^
NATURAL LEXEME:
    9
    line ##:
9 + 8
^
NATURAL LEXEME:
    8
    line ##:
9 + 8
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ 9 8|}
    line ##:
9 + 8
^^^^^
WORD LEXEME:
    x
    line ##:
x = 9
^
NATURAL LEXEME:
    9
    line ##:
x = 9
    ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x 9|}
    line ##:
x = 9
^^^^^
WORD LEXEME:
    y
    line ##:
y = 9 + 8
^
NATURAL LEXEME:
    9
    line ##:
y = 9 + 8
    ^
NATURAL LEXEME:
    8
    line ##:
y = 9 + 8
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ 9 8|}
    line ##:
y = 9 + 8
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= y {"": .operator = "+"|+ 9 8|}|}
    line ##:
y = 9 + 8
^^^^^^^^^
WORD LEXEME:
    x
    line ##:
x + y
^
WORD LEXEME:
    y
    line ##:
x + y
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ x y|}
    line ##:
x + y
^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
   ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
      ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
         ^
BRACKETED EXPRESSION:
    (b, c, x)
    line ##:
f (b, c, x) = b * x + c
  ^^^^^^^^^
PURELIST EXPRESSION:
    {|f (b, c, x)|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
              ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
                  ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
                      ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* b x|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|f (b, c, x)|}
         {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f (10, x, y)
   ^^
WORD LEXEME:
    x
    line ##:
f (10, x, y)
       ^
WORD LEXEME:
    y
    line ##:
f (10, x, y)
          ^
BRACKETED EXPRESSION:
    (10, x, y)
    line ##:
f (10, x, y)
  ^^^^^^^^^^
BRACKETED EXPRESSION:
    f (10, x, y)
    line ##:
f (10, x, y)
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
WORD LEXEME:
    g
    line ##:
g = `hello'
^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g `hello'|}
    line ##:
g = `hello'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
`[g] there'
 ^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
z = `I thought he said `[g]'.'
                        ^^^
BRACKETED EXPRESSION:
    `[g]'
    line ##:
z = `I thought he said `[g]'.'
                       ^^^^^
BRACKETED EXPRESSION:
    `I thought he said `[g]' "."'
    line ##:
z = `I thought he said `[g]'.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    z
    line ##:
z = `I thought he said `[g]'.'
^
BRACKETED EXPRESSION:
    `I thought he said `[g]' "."'
    line ##:
z = `I thought he said `[g]'.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= z `I thought he said `[g]' "."'|}
    line ##:
z = `I thought he said `[g]'.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^
NATURAL LEXEME:
    2
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                ^
BRACKETED EXPRESSION:
    {# 3.67 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                           ^
BRACKETED EXPRESSION:
    {# 0.04 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                               ^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 3.67 #} x|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                  ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.04 #}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                             ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= f
         {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
              [< "{" "{" >]|+
              {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
              {"": .operator = "-"|-
                   {"": .operator = "*"|* {# 3.67 #} x|}|}
              {"": .operator = "-"|- {# 0.04 #}|}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 0.96 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
       ^^^^
BRACKETED EXPRESSION:
    {# 0.67 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^
WORD LEXEME:
    x
    line ##:
h = (- 0.96 + 0.67 * x) in x
                     ^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.96 #}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 0.67 #} x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+
         {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    h
    line ##:
h = (- 0.96 + 0.67 * x) in x
^
PURELIST EXPRESSION:
    {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
           {"": .operator = "-"|- {# 0.96 #}|}
           {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= h
         {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
                {"": .operator = "-"|- {# 0.96 #}|}
                {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) in x
 ^
WORD LEXEME:
    h
    line ##:
(f + h) in x
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) in x
^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} in
        x
    line ##:
(f + h) in x
^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
solve (f + h = 0) for x
       ^
WORD LEXEME:
    h
    line ##:
solve (f + h = 0) for x
           ^
NATURAL LEXEME:
    0
    line ##:
solve (f + h = 0) for x
               ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ f h|}
    line ##:
solve (f + h = 0) for x
       ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "="|= {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|=
         {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
      ^^^^^^^^^^^
BRACKETED EXPRESSION:
    solve
        {"": .operator = "=", .terminator = ")", .initiator = "("|=
             {"": .operator = "+"|+ f h|} 0|} for x
    line ##:
solve (f + h = 0) for x
^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) at (x = (3, 4, 5))
 ^
WORD LEXEME:
    h
    line ##:
(f + h) at (x = (3, 4, 5))
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^
NATURAL LEXEME:
    3
    line ##:
(f + h) at (x = (3, 4, 5))
                 ^
NATURAL LEXEME:
    4
    line ##:
(f + h) at (x = (3, 4, 5))
                    ^
NATURAL LEXEME:
    5
    line ##:
(f + h) at (x = (3, 4, 5))
                       ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
WORD LEXEME:
    x
    line ##:
(f + h) at (x = (3, 4, 5))
            ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x
         (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
           ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} at
        {"": .operator = "=", .terminator = ")", .initiator = "("|= x
             (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    x
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^
NATURAL LEXEME:
    2
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                     ^
WORD LEXEME:
    dx
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                         ^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = ")", .initiator = "("|*
         {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    g
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g
         {{integral
           {"": .operator = "*", .terminator = ")", .initiator = "("|*
                {"": .operator = "^"|^ x 2|} dx|}}}|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    simplify g
    line ##:
simplify g
^^^^^^^^^^
WORD LEXEME:
    x
    line ##:
v = g from (x = 1) to (x = 5)
            ^
NATURAL LEXEME:
    1
    line ##:
v = g from (x = 1) to (x = 5)
                ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
    line ##:
v = g from (x = 1) to (x = 5)
           ^^^^^^^
WORD LEXEME:
    x
    line ##:
v = g from (x = 1) to (x = 5)
                       ^
NATURAL LEXEME:
    5
    line ##:
v = g from (x = 1) to (x = 5)
                           ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}
    line ##:
v = g from (x = 1) to (x = 5)
                      ^^^^^^^
WORD LEXEME:
    v
    line ##:
v = g from (x = 1) to (x = 5)
^
PURELIST EXPRESSION:
    {|g from
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
      to
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}|}
    line ##:
v = g from (x = 1) to (x = 5)
    ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= v
         {|g from
           {"": .operator = "=", .terminator = ")", .initiator = "("|= x
                1|} to
           {"": .operator = "=", .terminator = ")", .initiator = "("|= x
                5|}|}|}
    line ##:
v = g from (x = 1) to (x = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                      ^^^
WORD LEXEME:
    x
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                                ^
NATURAL LEXEME:
    1
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                                    ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                               ^^^^^^^
WORD LEXEME:
    x
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                                           ^
NATURAL LEXEME:
    5
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                                               ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                                          ^^^^^^^
BRACKETED EXPRESSION:
    {{[g] from
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
      to
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}}}
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [v]
    line ##:
       is [v].'
          ^^^
BRACKETED EXPRESSION:
    `The value of
     {{[g] from
       {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
       to
       {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}}}
     is [v] "."'
    lines ##-##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       is [v].'
^^^^^^^^^^^^^^^
WORD LEXEME:
    out
    line ##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
^^^
BRACKETED EXPRESSION:
    `The value of
     {{[g] from
       {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
       to
       {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}}}
     is [v] "."'
    lines ##-##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       is [v].'
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= out
         `The value of
          {{[g] from
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 1|} to
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 5|}}} is [v] "."'|}
    lines ##-##:
out = `The value of {{[g] from (x = 1) to (x = 5)}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       is [v].'
^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|1 2 3|}
    line ##:
V =# {| 1 2 3 |}
     ^^^^^^^^^^^
WORD LEXEME:
    V
    line ##:
V =# {| 1 2 3 |}
^
PURELIST EXPRESSION:
    {|1 2 3|}
    line ##:
V =# {| 1 2 3 |}
     ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=#", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|=# V {|1 2 3|}|}
    line ##:
V =# {| 1 2 3 |}
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    0 1 1
    line ##:
   0   1   1
   ^^^^^^^^^
BRACKETED EXPRESSION:
    {# -1 #} 1 0
    line ##:
   -1  1   0
   ^^^^^^^^^
BRACKETED EXPRESSION:
    1 0 {# -1 #}
    line ##:
   1   0  -1
   ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0 1
              1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              {# -1 #} 1 0|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|1 0
              {# -1 #}|}|}
    lines ##-##:
M =#:
    ^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
WORD LEXEME:
    M
    line ##:
M =#:
^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0 1
              1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              {# -1 #} 1 0|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|1 0
              {# -1 #}|}|}
    lines ##-##:
M =#:
    ^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=#", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|=# M
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|0 1 1|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|{# -1 #} 1 0|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|1 0 {# -1 #}|}|}|}
    lines ##-##:
M =#:
^^^^^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
WORD LEXEME:
    V
    line ##:
V ^ T
^
WORD LEXEME:
    T
    line ##:
V ^ T
    ^
BRACKETED EXPRESSION:
    {"": .operator = "^", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|^ V T|}
    line ##:
V ^ T
^^^^^
WORD LEXEME:
    M
    line ##:
M * V ^ T
^
WORD LEXEME:
    V
    line ##:
M * V ^ T
    ^
WORD LEXEME:
    T
    line ##:
M * V ^ T
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ V T|}
    line ##:
M * V ^ T
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|* M {"": .operator = "^"|^ V T|}|}
    line ##:
M * V ^ T
^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ##:
    name = `Jack'
           ^^^^^^
WORD LEXEME:
    name
    line ##:
    name = `Jack'
    ^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ##:
    name = `Jack'
           ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= name `Jack'|}
    line ##:
    name = `Jack'
    ^^^^^^^^^^^^^
WORD LEXEME:
    weight
    line ##:
    weight = 123 lb
    ^^^^^^
PURELIST EXPRESSION:
    {|123 lb|}
    line ##:
    weight = 123 lb
             ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
    line ##:
    weight = 123 lb
    ^^^^^^^^^^^^^^^
WORD LEXEME:
    height
    line ##:
    height = 5 ft 9 in
    ^^^^^^
PURELIST EXPRESSION:
    {|5 ft 9 in|}
    line ##:
    height = 5 ft 9 in
             ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
    line ##:
    height = 5 ft 9 in
    ^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    age
    line ##:
    age = 23 yr 2 mo
    ^^^
PURELIST EXPRESSION:
    {|23 yr 2 mo|}
    line ##:
    age = 23 yr 2 mo
          ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}
    line ##:
    age = 23 yr 2 mo
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= name `Jack'|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}|}
    lines ##-##:
a person:
        ^
    name = `Jack'
^^^^^^^^^^^^^^^^^
    weight = 123 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 9 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 23 yr 2 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    a person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= name `Jack'|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}
    lines ##-##:
a person:
^^^^^^^^^
    name = `Jack'
^^^^^^^^^^^^^^^^^
    weight = 123 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 9 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 23 yr 2 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ##:
    name = `Jill'
           ^^^^^^
WORD LEXEME:
    name
    line ##:
    name = `Jill'
    ^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ##:
    name = `Jill'
           ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= name `Jill'|}
    line ##:
    name = `Jill'
    ^^^^^^^^^^^^^
WORD LEXEME:
    weight
    line ##:
    weight = 110 lb
    ^^^^^^
PURELIST EXPRESSION:
    {|110 lb|}
    line ##:
    weight = 110 lb
             ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
    line ##:
    weight = 110 lb
    ^^^^^^^^^^^^^^^
WORD LEXEME:
    height
    line ##:
    height = 5 ft 7 in
    ^^^^^^
PURELIST EXPRESSION:
    {|5 ft 7 in|}
    line ##:
    height = 5 ft 7 in
             ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
    line ##:
    height = 5 ft 7 in
    ^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    age
    line ##:
    age = 21 yr 8 mo
    ^^^
PURELIST EXPRESSION:
    {|21 yr 8 mo|}
    line ##:
    age = 21 yr 8 mo
          ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}
    line ##:
    age = 21 yr 8 mo
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= name `Jill'|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}|}
    lines ##-##:
a person:
        ^
    name = `Jill'
^^^^^^^^^^^^^^^^^
    weight = 110 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 7 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 21 yr 8 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    a person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= name `Jill'|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}
    lines ##-##:
a person:
^^^^^^^^^
    name = `Jill'
^^^^^^^^^^^^^^^^^
    weight = 110 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 7 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 21 yr 8 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    the person named Jack's height
    line ##:
the person named Jack's height
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    the weight of the person named Jack
    line ##:
the weight of the person named Jack
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|body mass index|}
    line ##:
    body mass index = 703.06958 * weight in lbs
    ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 703.06958 #}
    line ##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^
PURELIST EXPRESSION:
    {|weight in lbs|}
    line ##:
    body mass index = 703.06958 * weight in lbs
                                  ^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|height in inches|}
    line ##:
                    / height in inches ^ 2
                      ^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    2
    line ##:
                    / height in inches ^ 2
                                         ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
    line ##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ {|height in inches|} 2|}
    line ##:
                    / height in inches ^ 2
                      ^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "/"|/
         {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
         {"": .operator = "^"|^ {|height in inches|} 2|}|}
    lines ##-##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|body mass index|}
         {"": .operator = "/"|/
              {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
              {"": .operator = "^"|^ {|height in inches|} 2|}|}|}
    lines ##-##:
    body mass index = 703.06958 * weight in lbs
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|body mass index|}
              {"": .operator = "/"|/
                   {"": .operator = "*"|* {# 703.06958 #}
                        {|weight in lbs|}|}
                   {"": .operator = "^"|^ {|height in inches|} 2|}|}|}|}
    lines ##-##:
for every person:
                ^
    body mass index = 703.06958 * weight in lbs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    for every person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= {|body mass index|}
             {"": .operator = "/"|/
                  {"": .operator = "*"|* {# 703.06958 #}
                       {|weight in lbs|}|}
                  {"": .operator = "^"|^ {|height in inches|} 2|}|}|}
    lines ##-##:
for every person:
^^^^^^^^^^^^^^^^^
    body mass index = 703.06958 * weight in lbs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Sum of integers from X through Y "."'
    line ##:
    `Sum of integers from X through Y.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Sum of integers from X through Y "."'
    line ##:
    `Sum of integers from X through Y.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    if (X > Y):
        ^
WORD LEXEME:
    Y
    line ##:
    if (X > Y):
            ^
BRACKETED EXPRESSION:
    {"": .operator = ">", .terminator = ")", .initiator = "("|> X Y|}
    line ##:
    if (X > Y):
       ^^^^^^^
WORD LEXEME:
    value
    line ##:
        value = 0
        ^^^^^
NATURAL LEXEME:
    0
    line ##:
        value = 0
                ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value 0|}
    line ##:
        value = 0
        ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value 0|}|}
    lines ##-##:
    if (X > Y):
              ^
        value = 0
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    if {"": .operator = ">", .terminator = ")", .initiator = "("|> X Y|}:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= value 0|}
    lines ##-##:
    if (X > Y):
    ^^^^^^^^^^^
        value = 0
^^^^^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
        value = X + sum (X + 1) through Y
                         ^
NATURAL LEXEME:
    1
    line ##:
        value = X + sum (X + 1) through Y
                             ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ X 1|}
    line ##:
        value = X + sum (X + 1) through Y
                        ^^^^^^^
WORD LEXEME:
    value
    line ##:
        value = X + sum (X + 1) through Y
        ^^^^^
WORD LEXEME:
    X
    line ##:
        value = X + sum (X + 1) through Y
                ^
PURELIST EXPRESSION:
    {|sum
      {"": .operator = "+", .terminator = ")", .initiator = "("|+ X 1|}
      through Y|}
    line ##:
        value = X + sum (X + 1) through Y
                    ^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ X
         {|sum
           {"": .operator = "+", .terminator = ")", .initiator = "("|+ X
                1|} through Y|}|}
    line ##:
        value = X + sum (X + 1) through Y
                ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value
         {"": .operator = "+"|+ X
              {|sum
                {"": .operator = "+", .terminator = ")", .initiator =
                     "("|+ X 1|} through Y|}|}|}
    line ##:
        value = X + sum (X + 1) through Y
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value
              {"": .operator = "+"|+ X
                   {|sum
                     {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ X 1|} through Y|}|}|}|}
    lines ##-##:
    else:
        ^
        value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    else:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= value
             {"": .operator = "+"|+ X
                  {|sum
                    {"": .operator = "+", .terminator = ")",
                         .initiator = "("|+ X 1|} through Y|}|}|}
    lines ##-##:
    else:
    ^^^^^
        value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              `Sum of integers from X through Y "."'|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|if
              {"": .operator = ">", .terminator = ")", .initiator = "("|
                   > X Y|}
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= value 0|}|}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|else
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= value
                        {"": .operator = "+"|+ X
                             {|sum
                               {"": .operator = "+", .terminator = ")",
                                    .initiator = "("|+ X 1|} through Y|}|}|}|}|}|}
    lines ##-##:
                          is an integer Y:
                                         ^
    `Sum of integers from X through Y.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    if (X > Y):
^^^^^^^^^^^^^^^
        value = 0
^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|sum from X through Y|}
    line ##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer X|}
    line ##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer Y|}
    line ##:
                          is an integer Y:
                          ^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{|is an integer X|}, {|is an integer Y|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^^
                          is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|sum from X through Y|}
         {|{|is an integer X|}, {|is an integer Y|}|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|
                   `Sum of integers from X through Y "."'|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|if
                   {"": .operator = ">", .terminator = ")", .initiator =
                        "("|> X Y|}
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|= value 0|}|}|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|else
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|= value
                             {"": .operator = "+"|+ X
                                  {|sum
                                    {"": .operator = "+", .terminator =
                                         ")", .initiator = "("|+ X 1|}
                                    through Y|}|}|}|}|}|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                          is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    `Sum of integers from X through Y.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    if (X > Y):
^^^^^^^^^^^^^^^
        value = 0
^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 5 through 10
    line ##:
sum from 5 through 10
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all (sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all (sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 1 through 2
    line ##:
sum from 1 through 2
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all (sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all (sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Sum of integers from X through Y "."'
    line ##:
    `Sum of integers from X through Y.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Sum of integers from X through Y "."'
    line ##:
    `Sum of integers from X through Y.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|first sum|}
    line ##:
    first sum = 0
    ^^^^^^^^^
NATURAL LEXEME:
    0
    line ##:
    first sum = 0
                ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|first sum|} 0|}
    line ##:
    first sum = 0
    ^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    if ( X <= Y ):
         ^
WORD LEXEME:
    Y
    line ##:
    if ( X <= Y ):
              ^
BRACKETED EXPRESSION:
    {"": .operator = "<=", .terminator = ")", .initiator = "("|<= X Y|}
    line ##:
    if ( X <= Y ):
       ^^^^^^^^^^
PURELIST EXPRESSION:
    {|next sum|}
    line ##:
        next sum = sum + X
        ^^^^^^^^
WORD LEXEME:
    sum
    line ##:
        next sum = sum + X
                   ^^^
WORD LEXEME:
    X
    line ##:
        next sum = sum + X
                         ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ sum X|}
    line ##:
        next sum = sum + X
                   ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next sum|}
         {"": .operator = "+"|+ sum X|}|}
    line ##:
        next sum = sum + X
        ^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|next X|}
    line ##:
        next X = X + 1
        ^^^^^^
WORD LEXEME:
    X
    line ##:
        next X = X + 1
                 ^
NATURAL LEXEME:
    1
    line ##:
        next X = X + 1
                     ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ X 1|}
    line ##:
        next X = X + 1
                 ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next X|} {"": .operator = "+"|+ X 1|}|}
    line ##:
        next X = X + 1
        ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next sum|}
              {"": .operator = "+"|+ sum X|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next X|}
              {"": .operator = "+"|+ X 1|}|}|}
    lines ##-##:
    if ( X <= Y ):
                 ^
        next sum = sum + X
^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    if {"": .operator = "<=", .terminator = ")", .initiator = "("|<= X
            Y|}:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= {|next sum|}
             {"": .operator = "+"|+ sum X|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= {|next X|}
             {"": .operator = "+"|+ X 1|}|}
    lines ##-##:
    if ( X <= Y ):
    ^^^^^^^^^^^^^^
        next sum = sum + X
^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    value
    line ##:
        value = sum
        ^^^^^
WORD LEXEME:
    sum
    line ##:
        value = sum
                ^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value sum|}
    line ##:
        value = sum
        ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value sum|}|}
    lines ##-##:
    else:
        ^
        value = sum
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    else:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= value sum|}
    lines ##-##:
    else:
    ^^^^^
        value = sum
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              `Sum of integers from X through Y "."'|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|first sum|} 0|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|if
              {"": .operator = "<=", .terminator = ")", .initiator =
                   "("|<= X Y|}
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next sum|}
                        {"": .operator = "+"|+ sum X|}|}
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next X|}
                        {"": .operator = "+"|+ X 1|}|}|}|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|else
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= value sum|}|}|}|}
    lines ##-##:
                         is an integer Y:
                                        ^
    `Sum of integers from X through Y.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    first sum = 0
^^^^^^^^^^^^^^^^^
    if ( X <= Y ):
^^^^^^^^^^^^^^^^^^
        next sum = sum + X
^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = sum
^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|sum from X through Y|}
    line ##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer X|}
    line ##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer Y|}
    line ##:
                         is an integer Y:
                         ^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{|is an integer X|}, {|is an integer Y|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^^
                         is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|sum from X through Y|}
         {|{|is an integer X|}, {|is an integer Y|}|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|
                   `Sum of integers from X through Y "."'|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|first sum|} 0|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|if
                   {"": .operator = "<=", .terminator = ")",
                        .initiator = "("|<= X Y|}
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next sum|}
                             {"": .operator = "+"|+ sum X|}|}
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next X|} {"": .operator = "+"|+ X 1|}|}|}|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|else
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|= value
                             sum|}|}|}|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                         is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    `Sum of integers from X through Y.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    first sum = 0
^^^^^^^^^^^^^^^^^
    if ( X <= Y ):
^^^^^^^^^^^^^^^^^^
        next sum = sum + X
^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = sum
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 5 through 10
    line ##:
sum from 5 through 10
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all ( sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all ( sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
