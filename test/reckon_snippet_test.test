*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
    trace [+ operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print bracket ""
        block standard: bracket "``" ... "''" [data, code, math, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with label reformatter
        block standard: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [data, code, math, text]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block reckon: bracket "[" ... "]" [atom]
                      with parsing selectors [- atom, + code]
        block standard: bracket "[" ... "]" [data, code, math, text]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block standard: bracket "`" ... "'" [data, code, math, text]
                        with parsing selectors [- data, + atom, - code,
                                                - math, - text]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [- data, + atom]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [code, math, text]
                        with parsing selectors [- code, + math, - text]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with special reformatter
BRACKETED EXPRESSION:
    9
    line ##:
9
^
NATURAL LEXEME:
    9
    line ##:
9 + 8
^
NATURAL LEXEME:
    8
    line ##:
9 + 8
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ 9 8|}
    line ##:
9 + 8
^^^^^
WORD LEXEME:
    x
    line ##:
x = 9
^
NATURAL LEXEME:
    9
    line ##:
x = 9
    ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x 9|}
    line ##:
x = 9
^^^^^
WORD LEXEME:
    y
    line ##:
y = 9 + 8
^
NATURAL LEXEME:
    9
    line ##:
y = 9 + 8
    ^
NATURAL LEXEME:
    8
    line ##:
y = 9 + 8
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ 9 8|}
    line ##:
y = 9 + 8
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= y {"": .operator = "+"|+ 9 8|}|}
    line ##:
y = 9 + 8
^^^^^^^^^
WORD LEXEME:
    x
    line ##:
x + y
^
WORD LEXEME:
    y
    line ##:
x + y
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ x y|}
    line ##:
x + y
^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
   ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
      ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
         ^
BRACKETED EXPRESSION:
    (b, c, x)
    line ##:
f (b, c, x) = b * x + c
  ^^^^^^^^^
PURELIST EXPRESSION:
    {|f (b, c, x)|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
              ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
                  ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
                      ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* b x|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|f (b, c, x)|}
         {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f (10, x, y)
   ^^
WORD LEXEME:
    x
    line ##:
f (10, x, y)
       ^
WORD LEXEME:
    y
    line ##:
f (10, x, y)
          ^
BRACKETED EXPRESSION:
    (10, x, y)
    line ##:
f (10, x, y)
  ^^^^^^^^^^
BRACKETED EXPRESSION:
    f (10, x, y)
    line ##:
f (10, x, y)
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
WORD LEXEME:
    g
    line ##:
g = `hello'
^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g `hello'|}
    line ##:
g = `hello'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
`[g] there'
 ^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
