*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
    trace [+ operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: TOP LEVEL
    print bracket ""
        block standard: bracket "``" ... "''" [data, code, math, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with label reformatter
        block standard: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block standard: bracket "(" ... ")" [data, code, math, text]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block reckon: bracket "[" ... "]" [atom]
                      with parsing selectors [- atom, + code]
        block standard: bracket "[" ... "]" [data, code, math, text]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block reckon: bracket "`" ... "'" [atom]
        block standard: bracket "`" ... "'" [data, code, math, text]
                        with parsing selectors [- data, + atom, - code,
                                                - math, - text]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [- data, + atom]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [code, math, text]
                        with parsing selectors [- code, + math, - text]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [data, atom, code, math, text]
                        with parsing selectors [data]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with special reformatter
BRACKETED EXPRESSION:
    9
    line ##:
9
^
NATURAL LEXEME:
    9
    line ##:
9 + 8
^
NATURAL LEXEME:
    8
    line ##:
9 + 8
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ 9 8|}
    line ##:
9 + 8
^^^^^
WORD LEXEME:
    x
    line ##:
x = 9
^
NATURAL LEXEME:
    9
    line ##:
x = 9
    ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x 9|}
    line ##:
x = 9
^^^^^
WORD LEXEME:
    y
    line ##:
y = 9 + 8
^
NATURAL LEXEME:
    9
    line ##:
y = 9 + 8
    ^
NATURAL LEXEME:
    8
    line ##:
y = 9 + 8
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ 9 8|}
    line ##:
y = 9 + 8
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= y {"": .operator = "+"|+ 9 8|}|}
    line ##:
y = 9 + 8
^^^^^^^^^
WORD LEXEME:
    x
    line ##:
x + y
^
WORD LEXEME:
    y
    line ##:
x + y
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ x y|}
    line ##:
x + y
^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
   ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
      ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
         ^
BRACKETED EXPRESSION:
    (b, c, x)
    line ##:
f (b, c, x) = b * x + c
  ^^^^^^^^^
PURELIST EXPRESSION:
    {|f (b, c, x)|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
              ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
                  ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
                      ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* b x|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|f (b, c, x)|}
         {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f (10, x, y)
   ^^
WORD LEXEME:
    x
    line ##:
f (10, x, y)
       ^
WORD LEXEME:
    y
    line ##:
f (10, x, y)
          ^
BRACKETED EXPRESSION:
    (10, x, y)
    line ##:
f (10, x, y)
  ^^^^^^^^^^
BRACKETED EXPRESSION:
    f (10, x, y)
    line ##:
f (10, x, y)
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
WORD LEXEME:
    g
    line ##:
g = `hello'
^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g `hello'|}
    line ##:
g = `hello'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
`[g] there'
 ^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
z = `I thought he said `[g]'.'
                        ^^^
BRACKETED EXPRESSION:
    `[g]'
    line ##:
z = `I thought he said `[g]'.'
                       ^^^^^
BRACKETED EXPRESSION:
    `I thought he said `[g]' "."'
    line ##:
z = `I thought he said `[g]'.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    z
    line ##:
z = `I thought he said `[g]'.'
^
BRACKETED EXPRESSION:
    `I thought he said `[g]' "."'
    line ##:
z = `I thought he said `[g]'.'
    ^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= z `I thought he said `[g]' "."'|}
    line ##:
z = `I thought he said `[g]'.'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^
NATURAL LEXEME:
    2
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                ^
BRACKETED EXPRESSION:
    {# 3.67 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                           ^
BRACKETED EXPRESSION:
    {# 0.04 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                               ^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 3.67 #} x|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                  ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.04 #}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                             ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= f
         {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
              [< "{" "{" >]|+
              {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
              {"": .operator = "-"|-
                   {"": .operator = "*"|* {# 3.67 #} x|}|}
              {"": .operator = "-"|- {# 0.04 #}|}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 0.96 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
       ^^^^
BRACKETED EXPRESSION:
    {# 0.67 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^
WORD LEXEME:
    x
    line ##:
h = (- 0.96 + 0.67 * x) in x
                     ^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.96 #}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 0.67 #} x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+
         {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    h
    line ##:
h = (- 0.96 + 0.67 * x) in x
^
PURELIST EXPRESSION:
    {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
           {"": .operator = "-"|- {# 0.96 #}|}
           {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= h
         {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
                {"": .operator = "-"|- {# 0.96 #}|}
                {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) in x
 ^
WORD LEXEME:
    h
    line ##:
(f + h) in x
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) in x
^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} in
        x
    line ##:
(f + h) in x
^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
solve (f + h = 0) for x
       ^
WORD LEXEME:
    h
    line ##:
solve (f + h = 0) for x
           ^
NATURAL LEXEME:
    0
    line ##:
solve (f + h = 0) for x
               ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ f h|}
    line ##:
solve (f + h = 0) for x
       ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "="|= {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|=
         {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
      ^^^^^^^^^^^
BRACKETED EXPRESSION:
    solve
        {"": .operator = "=", .terminator = ")", .initiator = "("|=
             {"": .operator = "+"|+ f h|} 0|} for x
    line ##:
solve (f + h = 0) for x
^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) at (x = (3, 4, 5))
 ^
WORD LEXEME:
    h
    line ##:
(f + h) at (x = (3, 4, 5))
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^
NATURAL LEXEME:
    3
    line ##:
(f + h) at (x = (3, 4, 5))
                 ^
NATURAL LEXEME:
    4
    line ##:
(f + h) at (x = (3, 4, 5))
                    ^
NATURAL LEXEME:
    5
    line ##:
(f + h) at (x = (3, 4, 5))
                       ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
WORD LEXEME:
    x
    line ##:
(f + h) at (x = (3, 4, 5))
            ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x
         (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
           ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} at
        {"": .operator = "=", .terminator = ")", .initiator = "("|= x
             (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    x
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^
NATURAL LEXEME:
    2
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                     ^
WORD LEXEME:
    dx
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                         ^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = ")", .initiator = "("|*
         {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    g
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g
         {{integral
           {"": .operator = "*", .terminator = ")", .initiator = "("|*
                {"": .operator = "^"|^ x 2|} dx|}}}|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
