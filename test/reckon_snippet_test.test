*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
    trace [+ bracketed subexpressions]
    trace [+ operator subexpressions]
    print selector ""
        block standard: data paragraph
        block standard: text
        block standard: math
        block standard: code
        block TOP LEVEL: atom
        block TOP LEVEL: data
        block TOP LEVEL: LINE LEVEL
        block TOP LEVEL: TOP LEVEL
    print bracket ""
        block standard: bracket "``" ... "''" [data, code, math, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
                        with text reformatter ( "s", ".", "?", "!", ":",
                        ";" )
        block TOP LEVEL: bracket "``" ... "''" [data]
        block standard: bracket [< "[" "<" >] ... [< ">" "]" >]
                        [code, math, text]
                        with parsing selectors [atom]
                        with label reformatter
        block TOP LEVEL: bracket [< "[" "<" >] ... [< ">" "]" >]
                         [data, atom]
                         with parsing selectors [atom]
                         with label reformatter
        block reckon: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
        block TOP LEVEL: bracket [< "{" "*" >] ... [< "*" "}" >] [data]
                         with multivalue reformatter ( "," )
        block reckon: bracket "(" ... ")" [code, math]
                      with parsing selectors [- code, + math]
        block standard: bracket "(" ... ")" [code, math, text]
        block TOP LEVEL: bracket "(" ... ")" [data]
        block reckon: bracket "[" ... "]" [atom, code, math, text]
                      with parsing selectors [- atom, - code, + math,
                                              - text]
        block standard: bracket "[" ... "]" [code, math, text]
        block TOP LEVEL: bracket "[" ... "]" [data]
        block standard: bracket "`" ... "'" [code, math, text]
                        with parsing selectors [atom]
        block TOP LEVEL: bracket "`" ... "'" [data]
                         with parsing selectors [atom]
        block standard: bracket [< "{" "{" >] ... [< "}" "}" >]
                        [data, code, math, text]
                        with parsing selectors [- data, - code, + math,
                                                - text]
        block TOP LEVEL: bracket [< "{" "{" >] ... [< "}" "}" >] [data]
        block standard: bracket [< "[" "$" >] ... [< "$" "]" >]
                        [code, math, text]
                        with parsing selectors [atom]
                        with special reformatter
        block TOP LEVEL: bracket [< "[" "$" >] ... [< "$" "]" >]
                         [data, atom]
                         with parsing selectors [atom]
                         with special reformatter
    print bracket type ""
        block standard: bracket type "p" [code, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
                        with parsing options [- end at indent,
                                              - end at le indent,
                                              + end at lt indent,
                                              + end at paragraph break,
                                              - end at line separator,
                                              - end at outer closing,
                                              + enable table prefix,
                                              + sticky]
                        with group paragraph
                        with implied subprefix {s||s}
        block standard: bracket type "s" [text]
                        with sentence reformatter ( ".", "?", "!", ":",
                        ";" )
        block standard: bracket type "quote" [code, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
                        with parsing options [- end at indent,
                                              - end at le indent,
                                              + end at lt indent,
                                              + end at paragraph break,
                                              - end at line separator,
                                              - end at outer closing,
                                              + enable table prefix,
                                              + sticky]
                        with group paragraph
                        with implied subprefix {s||s}
        block standard: bracket type "section" [code, text]
                        with parsing selectors [- data, - code, - math,
                                                + text]
                        with parsing options [- end at indent,
                                              - end at le indent,
                                              + end at lt indent,
                                              + end at paragraph break,
                                              - end at line separator,
                                              - end at outer closing,
                                              + enable table prefix]
                        with group paragraph
                        with implied subprefix {s||s}
        block standard: bracket type "***" [TOP LEVEL, code, text]
                        with group reset
        block standard: bracket type [< "raw" "data" >]
                        [TOP LEVEL, data, code, math, text]
                        with parsing selectors [data, data paragraph]
                        with group line
                        with data reformatter ( "=", "no", "[",
                        [< "{" "*" >] )
        block standard: bracket type "table" [code, text]
                        with parsing selectors [text]
                        with group paragraph
                        with line lexical master "ROW-CHECK"
        block standard: bracket type "row" [text]
                        with group line
        block standard: bracket type "data"
                        [TOP LEVEL, data, code, math, text]
                        with parsing selectors [+ data paragraph]
                        with group line
                        with data reformatter ( "=", "no", "[",
                        [< "{" "*" >] )
    print operator ""
        block standard: operator "*" [code, math]
                        infix
                        with precedence 5200
                        with infix reformatter
        block standard: operator "+" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "+" [code, math]
                        infix
                        with precedence 5000
                        with sum reformatter ( "+", "-" )
        block standard: operator "," [code, math]
                        nofix
                        with precedence 2000
                        with separator reformatter
        block standard: operator "-" [code, math]
                        prefix
                        with precedence 999999
                        with unary reformatter
        block standard: operator "-" [code, math]
                        infix
                        with precedence 5000
                        with sum reformatter ( "+", "-" )
        block standard: operator "/" [code, math]
                        infix
                        with precedence 5100
                        with binary reformatter
        block reckon: operator ":" [code]
                      right afix line
                      with precedence 0
        block standard: operator "<" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "=" [code]
                        infix line
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "=" [math]
                        infix
                        with precedence 1000
                        with binary reformatter
        block standard: operator ">" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "!=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "^" [code, math]
                        infix
                        with precedence 5300
                        with binary reformatter
        block standard: operator "NOT" [code, math]
                        prefix
                        with precedence 3200
                        with unary reformatter
        block reckon: operator "<--" [code]
                      nofix line
                      with precedence 0
                      with declare reformatter
        block reckon: operator "while" [code]
                      prefix line
                      with precedence 0
        block standard: operator [< "BUT" "NOT" >] [code, math]
                        infix
                        with precedence 3000
                        with binary reformatter
        block reckon: operator "if" [code]
                      prefix line
                      with precedence 0
        block reckon: operator "else" [code]
                      nofix line
                      with precedence 0
        block standard: operator "*=" [code]
                        infix line
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "+=" [code]
                        infix line
                        with precedence 1000
                        with right associative reformatter
        block standard: operator "<=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block reckon: operator "=#" [code, math]
                      infix line
                      with precedence 1000
                      with right associative reformatter
        block standard: operator "AND" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter
        block standard: operator "==" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "-=" [code]
                        infix line
                        with precedence 1000
                        with right associative reformatter
        block standard: operator ">=" [code, math]
                        infix
                        with precedence 4000
                        with infix and reformatter ( "AND" )
        block standard: operator "OR" [code, math]
                        infix
                        with precedence 3100
                        with infix reformatter
        block standard: operator "/=" [code]
                        infix line
                        with precedence 1000
                        with right associative reformatter
        block reckon: bracket [< "{" "$" >] ... [< "$" "}" >] [code]
                      nofix afix line
                      with precedence 0
        block reckon: bracket ":" [code]
                      nofix afix line
                      with precedence 0
BRACKETED EXPRESSION:
    9
    line ##:
9
^
NATURAL LEXEME:
    9
    line ##:
9 + 8
^
NATURAL LEXEME:
    8
    line ##:
9 + 8
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ 9 8|}
    line ##:
9 + 8
^^^^^
WORD LEXEME:
    x
    line ##:
x = 9
^
NATURAL LEXEME:
    9
    line ##:
x = 9
    ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x 9|}
    line ##:
x = 9
^^^^^
WORD LEXEME:
    y
    line ##:
y = 9 + 8
^
NATURAL LEXEME:
    9
    line ##:
y = 9 + 8
    ^
NATURAL LEXEME:
    8
    line ##:
y = 9 + 8
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ 9 8|}
    line ##:
y = 9 + 8
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= y {"": .operator = "+"|+ 9 8|}|}
    line ##:
y = 9 + 8
^^^^^^^^^
WORD LEXEME:
    x
    line ##:
x + y
^
WORD LEXEME:
    y
    line ##:
x + y
    ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|+ x y|}
    line ##:
x + y
^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
   ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
      ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
         ^
BRACKETED EXPRESSION:
    (b, c, x)
    line ##:
f (b, c, x) = b * x + c
  ^^^^^^^^^
PURELIST EXPRESSION:
    {|f (b, c, x)|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^
WORD LEXEME:
    b
    line ##:
f (b, c, x) = b * x + c
              ^
WORD LEXEME:
    x
    line ##:
f (b, c, x) = b * x + c
                  ^
WORD LEXEME:
    c
    line ##:
f (b, c, x) = b * x + c
                      ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* b x|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}
    line ##:
f (b, c, x) = b * x + c
              ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|f (b, c, x)|}
         {"": .operator = "+"|+ {"": .operator = "*"|* b x|} c|}|}
    line ##:
f (b, c, x) = b * x + c
^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f (10, x, y)
   ^^
WORD LEXEME:
    x
    line ##:
f (10, x, y)
       ^
WORD LEXEME:
    y
    line ##:
f (10, x, y)
          ^
BRACKETED EXPRESSION:
    (10, x, y)
    line ##:
f (10, x, y)
  ^^^^^^^^^^
BRACKETED EXPRESSION:
    f (10, x, y)
    line ##:
f (10, x, y)
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
WORD LEXEME:
    g
    line ##:
g = `hello'
^
BRACKETED EXPRESSION:
    `hello'
    line ##:
g = `hello'
    ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g `hello'|}
    line ##:
g = `hello'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
`[g] there'
 ^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    `[g] there'
    line ##:
`[g] there'
^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
z = ``I thought he said `[g]'.''
                         ^^^
BRACKETED EXPRESSION:
    `[g]'
    line ##:
z = ``I thought he said `[g]'.''
                        ^^^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|I thought he said `[g]'|s}
    line ##:
z = ``I thought he said `[g]'.''
      ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|I thought he said `[g]'|s}''
    line ##:
z = ``I thought he said `[g]'.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    z
    line ##:
z = ``I thought he said `[g]'.''
^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|I thought he said `[g]'|s}''
    line ##:
z = ``I thought he said `[g]'.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= z
         ``{s: .terminator = "."|I thought he said `[g]'|s}''|}
    line ##:
z = ``I thought he said `[g]'.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    10
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^
NATURAL LEXEME:
    2
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                ^
BRACKETED EXPRESSION:
    {# 3.67 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^
WORD LEXEME:
    x
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                           ^
BRACKETED EXPRESSION:
    {# 0.04 #}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                               ^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
            ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 3.67 #} x|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                    ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                  ^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.04 #}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
                             ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
         [< "{" "{" >]|+
         {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
         {"": .operator = "-"|- {"": .operator = "*"|* {# 3.67 #} x|}|}
         {"": .operator = "-"|- {# 0.04 #}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= f
         {"": .operator = "+", .terminator = [< "}" "}" >], .initiator =
              [< "{" "{" >]|+
              {"": .operator = "*"|* 10 {"": .operator = "^"|^ x 2|}|}
              {"": .operator = "-"|-
                   {"": .operator = "*"|* {# 3.67 #} x|}|}
              {"": .operator = "-"|- {# 0.04 #}|}|}|}
    line ##:
f = {{ 10 * x ^ 2 - 3.67 * x - 0.04 }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 0.96 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
       ^^^^
BRACKETED EXPRESSION:
    {# 0.67 #}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^
WORD LEXEME:
    x
    line ##:
h = (- 0.96 + 0.67 * x) in x
                     ^
BRACKETABLE EXPRESSION:
    {"": .operator = "-"|- {# 0.96 #}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 0.67 #} x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
              ^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
     ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+
         {"": .operator = "-"|- {# 0.96 #}|}
         {"": .operator = "*"|* {# 0.67 #} x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    h
    line ##:
h = (- 0.96 + 0.67 * x) in x
^
PURELIST EXPRESSION:
    {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
           {"": .operator = "-"|- {# 0.96 #}|}
           {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= h
         {|{"": .operator = "+", .terminator = ")", .initiator = "("|+
                {"": .operator = "-"|- {# 0.96 #}|}
                {"": .operator = "*"|* {# 0.67 #} x|}|} in x|}|}
    line ##:
h = (- 0.96 + 0.67 * x) in x
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) in x
 ^
WORD LEXEME:
    h
    line ##:
(f + h) in x
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) in x
^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} in
        x
    line ##:
(f + h) in x
^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
solve (f + h = 0) for x
       ^
WORD LEXEME:
    h
    line ##:
solve (f + h = 0) for x
           ^
NATURAL LEXEME:
    0
    line ##:
solve (f + h = 0) for x
               ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ f h|}
    line ##:
solve (f + h = 0) for x
       ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "="|= {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
       ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|=
         {"": .operator = "+"|+ f h|} 0|}
    line ##:
solve (f + h = 0) for x
      ^^^^^^^^^^^
BRACKETED EXPRESSION:
    solve
        {"": .operator = "=", .terminator = ")", .initiator = "("|=
             {"": .operator = "+"|+ f h|} 0|} for x
    line ##:
solve (f + h = 0) for x
^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    f
    line ##:
(f + h) at (x = (3, 4, 5))
 ^
WORD LEXEME:
    h
    line ##:
(f + h) at (x = (3, 4, 5))
     ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^
NATURAL LEXEME:
    3
    line ##:
(f + h) at (x = (3, 4, 5))
                 ^
NATURAL LEXEME:
    4
    line ##:
(f + h) at (x = (3, 4, 5))
                    ^
NATURAL LEXEME:
    5
    line ##:
(f + h) at (x = (3, 4, 5))
                       ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
WORD LEXEME:
    x
    line ##:
(f + h) at (x = (3, 4, 5))
            ^
BRACKETED EXPRESSION:
    (3, 4, 5)
    line ##:
(f + h) at (x = (3, 4, 5))
                ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x
         (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
           ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ f h|} at
        {"": .operator = "=", .terminator = ")", .initiator = "("|= x
             (3, 4, 5)|}
    line ##:
(f + h) at (x = (3, 4, 5))
^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    x
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^
NATURAL LEXEME:
    2
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                     ^
WORD LEXEME:
    dx
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                         ^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ x 2|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                 ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = ")", .initiator = "("|*
         {"": .operator = "^"|^ x 2|} dx|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
                ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    g
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^
BRACKETED EXPRESSION:
    {{integral
      {"": .operator = "*", .terminator = ")", .initiator = "("|*
           {"": .operator = "^"|^ x 2|} dx|}}}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= g
         {{integral
           {"": .operator = "*", .terminator = ")", .initiator = "("|*
                {"": .operator = "^"|^ x 2|} dx|}}}|}
    line ##:
g = {{ integral (x ^ 2 * dx) }}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    simplify g
    line ##:
simplify g
^^^^^^^^^^
WORD LEXEME:
    x
    line ##:
v = g from (x = 1) to (x = 5)
            ^
NATURAL LEXEME:
    1
    line ##:
v = g from (x = 1) to (x = 5)
                ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
    line ##:
v = g from (x = 1) to (x = 5)
           ^^^^^^^
WORD LEXEME:
    x
    line ##:
v = g from (x = 1) to (x = 5)
                       ^
NATURAL LEXEME:
    5
    line ##:
v = g from (x = 1) to (x = 5)
                           ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}
    line ##:
v = g from (x = 1) to (x = 5)
                      ^^^^^^^
WORD LEXEME:
    v
    line ##:
v = g from (x = 1) to (x = 5)
^
PURELIST EXPRESSION:
    {|g from
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
      to
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}|}
    line ##:
v = g from (x = 1) to (x = 5)
    ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= v
         {|g from
           {"": .operator = "=", .terminator = ")", .initiator = "("|= x
                1|} to
           {"": .operator = "=", .terminator = ")", .initiator = "("|= x
                5|}|}|}
    line ##:
v = g from (x = 1) to (x = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [g]
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                       ^^^
WORD LEXEME:
    x
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                 ^
NATURAL LEXEME:
    1
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                     ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                ^^^^^^^
WORD LEXEME:
    x
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                            ^
NATURAL LEXEME:
    5
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                                ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                                           ^^^^^^^
BRACKETED EXPRESSION:
    {{[g] from
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 1|}
      to
      {"": .operator = "=", .terminator = ")", .initiator = "("|= x 5|}}}
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [v]
    line ##:
        is [v].''
           ^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|The value of
        {{[g] from
          {"": .operator = "=", .terminator = ")", .initiator = "("|= x
               1|} to
          {"": .operator = "=", .terminator = ")", .initiator = "("|= x
               5|}}} is [v]|s}
    lines ##-##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is [v].''
^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|The value of
          {{[g] from
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 1|} to
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 5|}}} is [v]|s}''
    lines ##-##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is [v].''
^^^^^^^^^^^^^^^^^
WORD LEXEME:
    out
    line ##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|The value of
          {{[g] from
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 1|} to
            {"": .operator = "=", .terminator = ")", .initiator = "("|=
                 x 5|}}} is [v]|s}''
    lines ##-##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is [v].''
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= out
         ``{s: .terminator = "."|The value of
               {{[g] from
                 {"": .operator = "=", .terminator = ")", .initiator =
                      "("|= x 1|} to
                 {"": .operator = "=", .terminator = ")", .initiator =
                      "("|= x 5|}}} is [v]|s}''|}
    lines ##-##:
out = ``The value of {{[g] from (x = 1) to (x = 5)}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        is [v].''
^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|1 2 3|}
    line ##:
V =# {| 1 2 3 |}
     ^^^^^^^^^^^
WORD LEXEME:
    V
    line ##:
V =# {| 1 2 3 |}
^
PURELIST EXPRESSION:
    {|1 2 3|}
    line ##:
V =# {| 1 2 3 |}
     ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=#", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|=# V {|1 2 3|}|}
    line ##:
V =# {| 1 2 3 |}
^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    0 1 1
    line ##:
   0   1   1
   ^^^^^^^^^
BRACKETED EXPRESSION:
    {# -1 #} 1 0
    line ##:
   -1  1   0
   ^^^^^^^^^
BRACKETED EXPRESSION:
    1 0 {# -1 #}
    line ##:
   1   0  -1
   ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0 1
              1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              {# -1 #} 1 0|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|1 0
              {# -1 #}|}|}
    lines ##-##:
M =#:
    ^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
WORD LEXEME:
    M
    line ##:
M =#:
^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|0 1
              1|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              {# -1 #} 1 0|}
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|1 0
              {# -1 #}|}|}
    lines ##-##:
M =#:
    ^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=#", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|=# M
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|0 1 1|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|{# -1 #} 1 0|}
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|1 0 {# -1 #}|}|}|}
    lines ##-##:
M =#:
^^^^^
   0   1   1
^^^^^^^^^^^^
   -1  1   0
^^^^^^^^^^^^
   1   0  -1
^^^^^^^^^^^^
WORD LEXEME:
    V
    line ##:
V ^ T
^
WORD LEXEME:
    T
    line ##:
V ^ T
    ^
BRACKETED EXPRESSION:
    {"": .operator = "^", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|^ V T|}
    line ##:
V ^ T
^^^^^
WORD LEXEME:
    M
    line ##:
M * V ^ T
^
WORD LEXEME:
    V
    line ##:
M * V ^ T
    ^
WORD LEXEME:
    T
    line ##:
M * V ^ T
        ^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ V T|}
    line ##:
M * V ^ T
    ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|* M {"": .operator = "^"|^ V T|}|}
    line ##:
M * V ^ T
^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ##:
    name = `Jack'
           ^^^^^^
WORD LEXEME:
    name
    line ##:
    name = `Jack'
    ^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ##:
    name = `Jack'
           ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= name `Jack'|}
    line ##:
    name = `Jack'
    ^^^^^^^^^^^^^
WORD LEXEME:
    weight
    line ##:
    weight = 123 lb
    ^^^^^^
PURELIST EXPRESSION:
    {|123 lb|}
    line ##:
    weight = 123 lb
             ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
    line ##:
    weight = 123 lb
    ^^^^^^^^^^^^^^^
WORD LEXEME:
    height
    line ##:
    height = 5 ft 9 in
    ^^^^^^
PURELIST EXPRESSION:
    {|5 ft 9 in|}
    line ##:
    height = 5 ft 9 in
             ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
    line ##:
    height = 5 ft 9 in
    ^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    age
    line ##:
    age = 23 yr 2 mo
    ^^^
PURELIST EXPRESSION:
    {|23 yr 2 mo|}
    line ##:
    age = 23 yr 2 mo
          ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}
    line ##:
    age = 23 yr 2 mo
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= name `Jack'|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}|}
    lines ##-##:
a person:
        ^
    name = `Jack'
^^^^^^^^^^^^^^^^^
    weight = 123 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 9 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 23 yr 2 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    a person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= name `Jack'|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= weight {|123 lb|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= height {|5 ft 9 in|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= age {|23 yr 2 mo|}|}
    lines ##-##:
a person:
^^^^^^^^^
    name = `Jack'
^^^^^^^^^^^^^^^^^
    weight = 123 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 9 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 23 yr 2 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ##:
    name = `Jill'
           ^^^^^^
WORD LEXEME:
    name
    line ##:
    name = `Jill'
    ^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ##:
    name = `Jill'
           ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= name `Jill'|}
    line ##:
    name = `Jill'
    ^^^^^^^^^^^^^
WORD LEXEME:
    weight
    line ##:
    weight = 110 lb
    ^^^^^^
PURELIST EXPRESSION:
    {|110 lb|}
    line ##:
    weight = 110 lb
             ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
    line ##:
    weight = 110 lb
    ^^^^^^^^^^^^^^^
WORD LEXEME:
    height
    line ##:
    height = 5 ft 7 in
    ^^^^^^
PURELIST EXPRESSION:
    {|5 ft 7 in|}
    line ##:
    height = 5 ft 7 in
             ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
    line ##:
    height = 5 ft 7 in
    ^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    age
    line ##:
    age = 21 yr 8 mo
    ^^^
PURELIST EXPRESSION:
    {|21 yr 8 mo|}
    line ##:
    age = 21 yr 8 mo
          ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}
    line ##:
    age = 21 yr 8 mo
    ^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= name `Jill'|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}|}
    lines ##-##:
a person:
        ^
    name = `Jill'
^^^^^^^^^^^^^^^^^
    weight = 110 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 7 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 21 yr 8 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    a person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= name `Jill'|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= weight {|110 lb|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= height {|5 ft 7 in|}|}
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= age {|21 yr 8 mo|}|}
    lines ##-##:
a person:
^^^^^^^^^
    name = `Jill'
^^^^^^^^^^^^^^^^^
    weight = 110 lb
^^^^^^^^^^^^^^^^^^^
    height = 5 ft 7 in
^^^^^^^^^^^^^^^^^^^^^^
    age = 21 yr 8 mo
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    the person named Jack's height
    line ##:
the person named Jack's height
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    the weight of the person named Jack
    line ##:
the weight of the person named Jack
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|body mass index|}
    line ##:
    body mass index = 703.06958 * weight in lbs
    ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 703.06958 #}
    line ##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^
PURELIST EXPRESSION:
    {|weight in lbs|}
    line ##:
    body mass index = 703.06958 * weight in lbs
                                  ^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|height in inches|}
    line ##:
                    / height in inches ^ 2
                      ^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    2
    line ##:
                    / height in inches ^ 2
                                         ^
BRACKETABLE EXPRESSION:
    {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
    line ##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "^"|^ {|height in inches|} 2|}
    line ##:
                    / height in inches ^ 2
                      ^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "/"|/
         {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
         {"": .operator = "^"|^ {|height in inches|} 2|}|}
    lines ##-##:
    body mass index = 703.06958 * weight in lbs
                      ^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|body mass index|}
         {"": .operator = "/"|/
              {"": .operator = "*"|* {# 703.06958 #} {|weight in lbs|}|}
              {"": .operator = "^"|^ {|height in inches|} 2|}|}|}
    lines ##-##:
    body mass index = 703.06958 * weight in lbs
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|body mass index|}
              {"": .operator = "/"|/
                   {"": .operator = "*"|* {# 703.06958 #}
                        {|weight in lbs|}|}
                   {"": .operator = "^"|^ {|height in inches|} 2|}|}|}|}
    lines ##-##:
for every person:
                ^
    body mass index = 703.06958 * weight in lbs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    for every person:
        {"": .operator = "=", .terminator = "<LF>", .initiator =
             [$ LOGICAL_LINE $]|= {|body mass index|}
             {"": .operator = "/"|/
                  {"": .operator = "*"|* {# 703.06958 #}
                       {|weight in lbs|}|}
                  {"": .operator = "^"|^ {|height in inches|} 2|}|}|}
    lines ##-##:
for every person:
^^^^^^^^^^^^^^^^^
    body mass index = 703.06958 * weight in lbs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    / height in inches ^ 2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|Sum of integers from X through Y|s}
    line ##:
    ``Sum of integers from X through Y.''
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|Sum of integers from X through Y|s}''
    line ##:
    ``Sum of integers from X through Y.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|Sum of integers from X through Y|s}''
    line ##:
    ``Sum of integers from X through Y.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    if (X > Y):   value = 0
        ^
WORD LEXEME:
    Y
    line ##:
    if (X > Y):   value = 0
            ^
BRACKETED EXPRESSION:
    {"": .operator = ">", .terminator = ")", .initiator = "("|> X Y|}
    line ##:
    if (X > Y):   value = 0
       ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = ">", .terminator = ")", .initiator = "("|> X Y|}
    line ##:
    if (X > Y):   value = 0
       ^^^^^^^
WORD LEXEME:
    value
    line ##:
    if (X > Y):   value = 0
                  ^^^^^
NATURAL LEXEME:
    0
    line ##:
    if (X > Y):   value = 0
                          ^
BRACKETABLE EXPRESSION:
    {"": .operator = "="|= value 0|}
    line ##:
    if (X > Y):   value = 0
                  ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "if", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|if
         {"": .operator = ">", .terminator = ")", .initiator = "("|> X
              Y|} ":" {"": .operator = "="|= value 0|}|}
    line ##:
    if (X > Y):   value = 0
    ^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    else:         value = X + sum (X + 1) through Y
                                   ^
NATURAL LEXEME:
    1
    line ##:
    else:         value = X + sum (X + 1) through Y
                                       ^
BRACKETED EXPRESSION:
    {"": .operator = "+", .terminator = ")", .initiator = "("|+ X 1|}
    line ##:
    else:         value = X + sum (X + 1) through Y
                                  ^^^^^^^
WORD LEXEME:
    value
    line ##:
    else:         value = X + sum (X + 1) through Y
                  ^^^^^
WORD LEXEME:
    X
    line ##:
    else:         value = X + sum (X + 1) through Y
                          ^
PURELIST EXPRESSION:
    {|sum
      {"": .operator = "+", .terminator = ")", .initiator = "("|+ X 1|}
      through Y|}
    line ##:
    else:         value = X + sum (X + 1) through Y
                              ^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ X
         {|sum
           {"": .operator = "+", .terminator = ")", .initiator = "("|+ X
                1|} through Y|}|}
    line ##:
    else:         value = X + sum (X + 1) through Y
                          ^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "="|= value
         {"": .operator = "+"|+ X
              {|sum
                {"": .operator = "+", .terminator = ")", .initiator =
                     "("|+ X 1|} through Y|}|}|}
    line ##:
    else:         value = X + sum (X + 1) through Y
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "else", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|else ":"
         {"": .operator = "="|= value
              {"": .operator = "+"|+ X
                   {|sum
                     {"": .operator = "+", .terminator = ")",
                          .initiator = "("|+ X 1|} through Y|}|}|}|}
    line ##:
    else:         value = X + sum (X + 1) through Y
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              ``{s: .terminator = "."|Sum of integers from X through
                    Y|s}''|}
         {"": .operator = "if", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|if
              {"": .operator = ">", .terminator = ")", .initiator = "("|
                   > X Y|} ":" {"": .operator = "="|= value 0|}|}
         {"": .operator = "else", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|else ":"
              {"": .operator = "="|= value
                   {"": .operator = "+"|+ X
                        {|sum
                          {"": .operator = "+", .terminator = ")",
                               .initiator = "("|+ X 1|} through Y|}|}|}|}|}
    lines ##-##:
                          is an integer Y:
                                         ^
    ``Sum of integers from X through Y.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    if (X > Y):   value = 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    else:         value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|sum from X through Y|}
    line ##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer X|}
    line ##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer Y|}
    line ##:
                          is an integer Y:
                          ^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{|is an integer X|}, {|is an integer Y|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^^
                          is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|sum from X through Y|}
         {|{|is an integer X|}, {|is an integer Y|}|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|
                   ``{s: .terminator = "."|Sum of integers from X
                         through Y|s}''|}
              {"": .operator = "if", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|if
                   {"": .operator = ">", .terminator = ")", .initiator =
                        "("|> X Y|} ":"
                   {"": .operator = "="|= value 0|}|}
              {"": .operator = "else", .terminator = "<LF>",
                   .initiator = [$ LOGICAL_LINE $]|else ":"
                   {"": .operator = "="|= value
                        {"": .operator = "+"|+ X
                             {|sum
                               {"": .operator = "+", .terminator = ")",
                                    .initiator = "("|+ X 1|} through Y|}|}|}|}|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                          is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``Sum of integers from X through Y.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    if (X > Y):   value = 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    else:         value = X + sum (X + 1) through Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 5 through 10
    line ##:
sum from 5 through 10
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all (sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all (sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 1 through 2
    line ##:
sum from 1 through 2
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all (sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all (sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|Sum of integers from X through Y|s}
    line ##:
    ``Sum of integers from X through Y.''
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|Sum of integers from X through Y|s}''
    line ##:
    ``Sum of integers from X through Y.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|Sum of integers from X through Y|s}''
    line ##:
    ``Sum of integers from X through Y.''
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    value
    line ##:
    value = 0
    ^^^^^
NATURAL LEXEME:
    0
    line ##:
    value = 0
            ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value 0|}
    line ##:
    value = 0
    ^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    while ( X <= Y ):
            ^
WORD LEXEME:
    Y
    line ##:
    while ( X <= Y ):
                 ^
BRACKETED EXPRESSION:
    {"": .operator = "<=", .terminator = ")", .initiator = "("|<= X Y|}
    line ##:
    while ( X <= Y ):
          ^^^^^^^^^^
PURELIST EXPRESSION:
    {|next value|}
    line ##:
        next value = value + X
        ^^^^^^^^^^
WORD LEXEME:
    value
    line ##:
        next value = value + X
                     ^^^^^
WORD LEXEME:
    X
    line ##:
        next value = value + X
                             ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ value X|}
    line ##:
        next value = value + X
                     ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next value|}
         {"": .operator = "+"|+ value X|}|}
    line ##:
        next value = value + X
        ^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|next X|}
    line ##:
        next X = X + 1
        ^^^^^^
WORD LEXEME:
    X
    line ##:
        next X = X + 1
                 ^
NATURAL LEXEME:
    1
    line ##:
        next X = X + 1
                     ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ X 1|}
    line ##:
        next X = X + 1
                 ^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next X|} {"": .operator = "+"|+ X 1|}|}
    line ##:
        next X = X + 1
        ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next value|}
              {"": .operator = "+"|+ value X|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next X|}
              {"": .operator = "+"|+ X 1|}|}|}
    lines ##-##:
    while ( X <= Y ):
                    ^
        next value = value + X
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<=", .terminator = ")", .initiator = "("|<= X Y|}
    line ##:
    while ( X <= Y ):
          ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "while", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|while
         {"": .operator = "<=", .terminator = ")", .initiator = "("|<= X
              Y|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|next value|}
                   {"": .operator = "+"|+ value X|}|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|next X|}
                   {"": .operator = "+"|+ X 1|}|}|}|}
    lines ##-##:
    while ( X <= Y ):
    ^^^^^^^^^^^^^^^^^
        next value = value + X
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
              ``{s: .terminator = "."|Sum of integers from X through
                    Y|s}''|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value 0|}
         {"": .operator = "while", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|while
              {"": .operator = "<=", .terminator = ")", .initiator =
                   "("|<= X Y|}
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next value|}
                        {"": .operator = "+"|+ value X|}|}
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next X|}
                        {"": .operator = "+"|+ X 1|}|}|}|}|}
    lines ##-##:
                         is an integer Y:
                                        ^
    ``Sum of integers from X through Y.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    value = 0
^^^^^^^^^^^^^
    while ( X <= Y ):
^^^^^^^^^^^^^^^^^^^^^
        next value = value + X
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|sum from X through Y|}
    line ##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer X|}
    line ##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|is an integer Y|}
    line ##:
                         is an integer Y:
                         ^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {|{|is an integer X|}, {|is an integer Y|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
                         ^^^^^^^^^^^^^^^^
                         is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|sum from X through Y|}
         {|{|is an integer X|}, {|is an integer Y|}|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|
                   ``{s: .terminator = "."|Sum of integers from X
                         through Y|s}''|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= value 0|}
              {"": .operator = "while", .terminator = "<LF>",
                   .initiator = [$ LOGICAL_LINE $]|while
                   {"": .operator = "<=", .terminator = ")",
                        .initiator = "("|<= X Y|}
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next value|}
                             {"": .operator = "+"|+ value X|}|}
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next X|} {"": .operator = "+"|+ X 1|}|}|}|}|}|}
    lines ##-##:
sum from X through Y <-- is an integer X,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                         is an integer Y:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ``Sum of integers from X through Y.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    value = 0
^^^^^^^^^^^^^
    while ( X <= Y ):
^^^^^^^^^^^^^^^^^^^^^
        next value = value + X
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = X + 1
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    sum from 5 through 10
    line ##:
sum from 5 through 10
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (sums from X through Y)
    line ##:
all ( sums from X through Y)
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    all (sums from X through Y)
    line ##:
all ( sums from X through Y)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    count
    line ##:
    count = 0
    ^^^^^
NATURAL LEXEME:
    0
    line ##:
    count = 0
            ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= count 0|}
    line ##:
    count = 0
    ^^^^^^^^^
WORD LEXEME:
    sum
    line ##:
    sum = 0
    ^^^
NATURAL LEXEME:
    0
    line ##:
    sum = 0
          ^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= sum 0|}
    line ##:
    sum = 0
    ^^^^^^^
BRACKETED EXPRESSION:
    ()
    line ##:
    while X != ():
               ^^
PURELIST EXPRESSION:
    {|next count|}
    line ##:
        next count = count + 1
        ^^^^^^^^^^
WORD LEXEME:
    count
    line ##:
        next count = count + 1
                     ^^^^^
NATURAL LEXEME:
    1
    line ##:
        next count = count + 1
                             ^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ count 1|}
    line ##:
        next count = count + 1
                     ^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next count|}
         {"": .operator = "+"|+ count 1|}|}
    line ##:
        next count = count + 1
        ^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (first X)
    line ##:
        next sum = sum + the weight of (first X)
                                       ^^^^^^^^^
PURELIST EXPRESSION:
    {|next sum|}
    line ##:
        next sum = sum + the weight of (first X)
        ^^^^^^^^
WORD LEXEME:
    sum
    line ##:
        next sum = sum + the weight of (first X)
                   ^^^
PURELIST EXPRESSION:
    {|the weight of (first X)|}
    line ##:
        next sum = sum + the weight of (first X)
                         ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ sum {|the weight of (first X)|}|}
    line ##:
        next sum = sum + the weight of (first X)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next sum|}
         {"": .operator = "+"|+ sum {|the weight of (first X)|}|}|}
    line ##:
        next sum = sum + the weight of (first X)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|next X|}
    line ##:
        next X = rest X
        ^^^^^^
PURELIST EXPRESSION:
    {|rest X|}
    line ##:
        next X = rest X
                 ^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= {|next X|} {|rest X|}|}
    line ##:
        next X = rest X
        ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next count|}
              {"": .operator = "+"|+ count 1|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next sum|}
              {"": .operator = "+"|+ sum {|the weight of (first X)|}|}|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= {|next X|} {|rest X|}|}|}
    lines ##-##:
    while X != ():
                 ^
        next count = count + 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next sum = sum + the weight of (first X)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = rest X
^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    X
    line ##:
    while X != ():
          ^
BRACKETED EXPRESSION:
    ()
    line ##:
    while X != ():
               ^^
BRACKETABLE EXPRESSION:
    {"": .operator = "!="|!= X ()|}
    line ##:
    while X != ():
          ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "while", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|while {"": .operator = "!="|!= X ()|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|next count|}
                   {"": .operator = "+"|+ count 1|}|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|next sum|}
                   {"": .operator = "+"|+ sum
                        {|the weight of (first X)|}|}|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= {|next X|} {|rest X|}|}|}|}
    lines ##-##:
    while X != ():
    ^^^^^^^^^^^^^^
        next count = count + 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next sum = sum + the weight of (first X)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = rest X
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {s: .terminator = "."|Cannot average 0 things|s}
    line ##:
        value = error ``Cannot average 0 things.''
                        ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``{s: .terminator = "."|Cannot average 0 things|s}''
    line ##:
        value = error ``Cannot average 0 things.''
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    value
    line ##:
        value = error ``Cannot average 0 things.''
        ^^^^^
PURELIST EXPRESSION:
    {|error ``{s: .terminator = "."|Cannot average 0 things|s}''|}
    line ##:
        value = error ``Cannot average 0 things.''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value
         {|error ``{s: .terminator = "."|Cannot average 0 things|s}''|}|}
    line ##:
        value = error ``Cannot average 0 things.''
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value
              {|error
                ``{s: .terminator = "."|Cannot average 0 things|s}''|}|}|}
    lines ##-##:
    if count == 0:
                 ^
        value = error ``Cannot average 0 things.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    count
    line ##:
    if count == 0:
       ^^^^^
NATURAL LEXEME:
    0
    line ##:
    if count == 0:
                ^
BRACKETABLE EXPRESSION:
    {"": .operator = "=="|== count 0|}
    line ##:
    if count == 0:
       ^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "if", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|if {"": .operator = "=="|== count 0|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= value
                   {|error
                     ``{s: .terminator = "."|Cannot average 0 things|s}''|}|}|}|}
    lines ##-##:
    if count == 0:
    ^^^^^^^^^^^^^^
        value = error ``Cannot average 0 things.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    value
    line ##:
        value = sum / count
        ^^^^^
WORD LEXEME:
    sum
    line ##:
        value = sum / count
                ^^^
WORD LEXEME:
    count
    line ##:
        value = sum / count
                      ^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "/"|/ sum count|}
    line ##:
        value = sum / count
                ^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value {"": .operator = "/"|/ sum count|}|}
    line ##:
        value = sum / count
        ^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value
              {"": .operator = "/"|/ sum count|}|}|}
    lines ##-##:
    else:
        ^
        value = sum / count
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "else", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|else
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= value
                   {"": .operator = "/"|/ sum count|}|}|}|}
    lines ##-##:
    else:
    ^^^^^
        value = sum / count
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= count 0|}
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= sum 0|}
         {"": .operator = "while", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|while {"": .operator = "!="|!= X ()|}
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next count|}
                        {"": .operator = "+"|+ count 1|}|}
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next sum|}
                        {"": .operator = "+"|+ sum
                             {|the weight of (first X)|}|}|}
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= {|next X|}
                        {|rest X|}|}|}|}
         {"": .operator = "if", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|if {"": .operator = "=="|== count 0|}
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= value
                        {|error
                          ``{s: .terminator = "."|Cannot average 0
                                things|s}''|}|}|}|}
         {"": .operator = "else", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|else
              {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator =
                   ":"|
                   {"": .operator = "=", .terminator = "<LF>",
                        .initiator = [$ LOGICAL_LINE $]|= value
                        {"": .operator = "/"|/ sum count|}|}|}|}|}
    lines ##-##:
average weight of X <-- list X of persons:
                                         ^
    count = 0
^^^^^^^^^^^^^
    sum = 0
^^^^^^^^^^^
    while X != ():
^^^^^^^^^^^^^^^^^^
        next count = count + 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next sum = sum + the weight of (first X)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = rest X
^^^^^^^^^^^^^^^^^^^^^^^
    if count == 0:
^^^^^^^^^^^^^^^^^^
        value = error ``Cannot average 0 things.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = sum / count
^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|average weight of X|}
    line ##:
average weight of X <-- list X of persons:
^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|list X of persons|}
    line ##:
average weight of X <-- list X of persons:
                        ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|average weight of X|}
         {|list X of persons|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= count 0|}
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= sum 0|}
              {"": .operator = "while", .terminator = "<LF>",
                   .initiator = [$ LOGICAL_LINE $]|while
                   {"": .operator = "!="|!= X ()|}
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next count|}
                             {"": .operator = "+"|+ count 1|}|}
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next sum|}
                             {"": .operator = "+"|+ sum
                                  {|the weight of (first X)|}|}|}
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|=
                             {|next X|} {|rest X|}|}|}|}
              {"": .operator = "if", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|if
                   {"": .operator = "=="|== count 0|}
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|= value
                             {|error
                               ``{s: .terminator = "."|Cannot average 0
                                     things|s}''|}|}|}|}
              {"": .operator = "else", .terminator = "<LF>",
                   .initiator = [$ LOGICAL_LINE $]|else
                   {"": .terminator = [$ INDENTED_PARAGRAPH $],
                        .initiator = ":"|
                        {"": .operator = "=", .terminator = "<LF>",
                             .initiator = [$ LOGICAL_LINE $]|= value
                             {"": .operator = "/"|/ sum count|}|}|}|}|}|}
    lines ##-##:
average weight of X <-- list X of persons:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    count = 0
^^^^^^^^^^^^^
    sum = 0
^^^^^^^^^^^
    while X != ():
^^^^^^^^^^^^^^^^^^
        next count = count + 1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next sum = sum + the weight of (first X)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        next X = rest X
^^^^^^^^^^^^^^^^^^^^^^^
    if count == 0:
^^^^^^^^^^^^^^^^^^
        value = error ``Cannot average 0 things.''
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        value = sum / count
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (all persons)
    line ###:
average weight of (all persons)
                  ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    average weight of (all persons)
    line ###:
average weight of (all persons)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Bill'
    line ###:
z = 10 + average weight of (all persons named `Bill')
                                              ^^^^^^
BRACKETED EXPRESSION:
    (all persons named `Bill')
    line ###:
z = 10 + average weight of (all persons named `Bill')
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    z
    line ###:
z = 10 + average weight of (all persons named `Bill')
^
NATURAL LEXEME:
    10
    line ###:
z = 10 + average weight of (all persons named `Bill')
    ^^
PURELIST EXPRESSION:
    {|average weight of (all persons named `Bill')|}
    line ###:
z = 10 + average weight of (all persons named `Bill')
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETABLE EXPRESSION:
    {"": .operator = "+"|+ 10
         {|average weight of (all persons named `Bill')|}|}
    line ###:
z = 10 + average weight of (all persons named `Bill')
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= z
         {"": .operator = "+"|+ 10
              {|average weight of (all persons named `Bill')|}|}|}
    line ###:
z = 10 + average weight of (all persons named `Bill')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (all persons)
    line ###:
raw (all persons)
    ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    raw (all persons)
    line ###:
raw (all persons)
^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (all persons)
    line ###:
really raw (all persons)
           ^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    really raw (all persons)
    line ###:
really raw (all persons)
^^^^^^^^^^^^^^^^^^^^^^^^
NATURAL LEXEME:
    2
    line ###:
x = (1, (2, 3), 4)
         ^
NATURAL LEXEME:
    3
    line ###:
x = (1, (2, 3), 4)
            ^
BRACKETED EXPRESSION:
    (2, 3)
    line ###:
x = (1, (2, 3), 4)
        ^^^^^^
NATURAL LEXEME:
    1
    line ###:
x = (1, (2, 3), 4)
     ^
BRACKETED EXPRESSION:
    (2, 3)
    line ###:
x = (1, (2, 3), 4)
        ^^^^^^
NATURAL LEXEME:
    4
    line ###:
x = (1, (2, 3), 4)
                ^
BRACKETED EXPRESSION:
    (1, (2, 3), 4)
    line ###:
x = (1, (2, 3), 4)
    ^^^^^^^^^^^^^^
WORD LEXEME:
    x
    line ###:
x = (1, (2, 3), 4)
^
BRACKETED EXPRESSION:
    (1, (2, 3), 4)
    line ###:
x = (1, (2, 3), 4)
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x (1, (2, 3), 4)|}
    line ###:
x = (1, (2, 3), 4)
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    first x
    line ###:
first x
^^^^^^^
BRACKETED EXPRESSION:
    rest x
    line ###:
rest x
^^^^^^
BRACKETED EXPRESSION:
    (rest x)
    line ###:
rest (rest x)
     ^^^^^^^^
BRACKETED EXPRESSION:
    rest (rest x)
    line ###:
rest (rest x)
^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (rest x)
    line ###:
rest (rest (rest x))
           ^^^^^^^^
BRACKETED EXPRESSION:
    (rest (rest x))
    line ###:
rest (rest (rest x))
     ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    rest (rest (rest x))
    line ###:
rest (rest (rest x))
^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    rest 4
    line ###:
rest 4
^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
(a person named `Jack') is husband of
                ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack')
    line ###:
(a person named `Jack') is husband of
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ###:
    (a person named `Jill')
                    ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jill')
    line ###:
    (a person named `Jill')
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack') is husband of (a person named `Jill')
    lines ###-###:
(a person named `Jack') is husband of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (a person named `Jill')
^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|Y is wife of X|}
    line ###:
Y is wife of X <-- X is husband of Y
^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|X is husband of Y|}
    line ###:
Y is wife of X <-- X is husband of Y
                   ^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|Y is wife of X|}
         {|X is husband of Y|}|}
    line ###:
Y is wife of X <-- X is husband of Y
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ###:
(a person named `Jill') is wife of
                ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jill')
    line ###:
(a person named `Jill') is wife of
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
    (a person named `Jack')?
                    ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack')
    line ###:
    (a person named `Jack')?
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jill') is wife of (a person named `Jack') "?"
    lines ###-###:
(a person named `Jill') is wife of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (a person named `Jack')?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
(a person named `Jack') is wife of
                ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack')
    line ###:
(a person named `Jack') is wife of
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ###:
    (a person named `Jill')?
                    ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jill')
    line ###:
    (a person named `Jill')?
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack') is wife of (a person named `Jill') "?"
    lines ###-###:
(a person named `Jack') is wife of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (a person named `Jill')?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a person named X)
    line ###:
(a person named X) is wife of
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
    (a person named `Jack')?
                    ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack')
    line ###:
    (a person named `Jack')?
    ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (a person named X) is wife of (a person named `Jack') "?"
    lines ###-###:
(a person named X) is wife of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    (a person named `Jack')?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
X is wife of (a person named `Jack')
                             ^^^^^^
BRACKETED EXPRESSION:
    (a person named `Jack')
    line ###:
X is wife of (a person named `Jack')
             ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    X is wife of (a person named `Jack')
    line ###:
X is wife of (a person named `Jack')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|--------------------------------------------------------|row}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|-------------------------------------------------------#
                #-|row}|table}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" header 1 "|" header 2 "|" header 3 "|" header 4 "|" header
         5 "|"|row}
    line ###:
| header 1 | header 2 | header 3 | header 4 | header 5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|--------------------------------------------------------|row}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" entry 11 "|" entry 12 "|" entry 13 "|" entry 14 "|" entry
         15 "|"|row}
    line ###:
| entry 11 | entry 12 | entry 13 | entry 14 | entry 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" entry 21 "|" entry 22 "|" entry 23 "|" entry 24 "|" entry
         25 "|"|row}
    line ###:
| entry 21 | entry 22 | entry 23 | entry 24 | entry 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" entry 31 "|" entry 32 "|" entry 33 "|" entry 34 "|" entry
         35 "|"|row}
    line ###:
| entry 31 | entry 32 | entry 33 | entry 34 | entry 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|--------------------------------------------------------|row}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|-------------------------------------------------------#
                #-|row}
           {row|"|" header 1 "|" header 2 "|" header 3 "|" header 4 "|"
                header 5 "|"|row}
           {row|--------------------------------------------------------|row}
           {row|"|" entry 11 "|" entry 12 "|" entry 13 "|" entry 14 "|"
                entry 15 "|"|row}
           {row|"|" entry 21 "|" entry 22 "|" entry 23 "|" entry 24 "|"
                entry 25 "|"|row}
           {row|"|" entry 31 "|" entry 32 "|" entry 33 "|" entry 34 "|"
                entry 35 "|"|row}
           {row|--------------------------------------------------------|row}|table}
    lines ###-###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| header 1 | header 2 | header 3 | header 4 | header 5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| entry 11 | entry 12 | entry 13 | entry 14 | entry 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| entry 21 | entry 22 | entry 23 | entry 24 | entry 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| entry 31 | entry 32 | entry 33 | entry 34 | entry 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}|table}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
    line ###:
| H  1 | H  2 | H  3 | H  4 | H  5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 11 "|" E 12 "|" E 13 "|" E 14 "|" E 15 "|"|row}
    line ###:
| E 11 | E 12 | E 13 | E 14 | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 21 "|" E 22 "|" E 23 "|" E 24 "|" E 25 "|"|row}
    line ###:
| E 21 | E 22 | E 23 | E 24 | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
    line ###:
| E 31 | E 32 | E 33 | E 34 | E 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}
           {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
           {row|------------------------------------|row}
           {row|"|" E 11 "|" E 12 "|" E 13 "|" E 14 "|" E 15 "|"|row}
           {row|"|" E 21 "|" E 22 "|" E 23 "|" E 24 "|" E 25 "|"|row}
           {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
           {row|------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|H
                ":" header|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|E
                ":" entry|}|table}
    lines ###-###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| H  1 | H  2 | H  3 | H  4 | H  5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 11 | E 12 | E 13 | E 14 | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 21 | E 22 | E 23 | E 24 | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 31 | E 32 | E 33 | E 34 | E 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
H: header
^^^^^^^^^
E: entry
^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}|table}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
    line ###:
| H  1 | H  2 | H  3 | H  4 | H  5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 11 "|" E 12 "|" ABOT "|" < "|" E 15 "|"|row}
    line ###:
| E 11 | E 12 | ABOT | <    | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 21 "|" E 22 "|" > "|" ^ "|" E 25 "|"|row}
    line ###:
| E 21 | E 22 |    > | ^    | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
    line ###:
| E 31 | E 32 | E 33 | E 34 | E 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}
           {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|"|row}
           {row|------------------------------------|row}
           {row|"|" E 11 "|" E 12 "|" ABOT "|" < "|" E 15 "|"|row}
           {row|"|" E 21 "|" E 22 "|" > "|" ^ "|" E 25 "|"|row}
           {row|"|" E 31 "|" E 32 "|" E 33 "|" E 34 "|" E 35 "|"|row}
           {row|------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|H
                ":" header|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|E
                ":" entry|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                ABOT ":" a bit of text|}|table}
    lines ###-###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| H  1 | H  2 | H  3 | H  4 | H  5 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 11 | E 12 | ABOT | <    | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 21 | E 22 |    > | ^    | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 31 | E 32 | E 33 | E 34 | E 35 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
H: header
^^^^^^^^^
E: entry
^^^^^^^^
ABOT: a bit of text
^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}|table}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|" /ib/|row}
    line ###:
| H  1 | H  2 | H  3 | H  4 | H  5 | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" /l/ "|" /r/ "|" c "|" P "|" cb "|"|row}
    line ###:
| /l/  | /r/  | c    | P    | cb   |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" 11 "|" 12 "|" 13 "|" {# 5.4% #} "|" E 15 "|"|row}
    line ###:
|   11 |   12 |   13 | 5.4% | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 21 "|" E 22 "|" E23 "|" {# 0.8% #} "|" E 25 "|"|row}
    line ###:
| E 21 | E 22 | E23  | 0.8% | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" E 31 "|" E 32 "|" E 33 "|" {# 0.09 #} "|" E 35 "|"
         /!b/|row}
    line ###:
| E 31 | E 32 | E 33 | 0.09 | E 35 | /!b/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|------------------------------------|row}
    line ###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|------------------------------------|row}
           {row|"|" H 1 "|" H 2 "|" H 3 "|" H 4 "|" H 5 "|" /ib/|row}
           {row|------------------------------------|row}
           {row|"|" /l/ "|" /r/ "|" c "|" P "|" cb "|"|row}
           {row|"|" 11 "|" 12 "|" 13 "|" {# 5.4% #} "|" E 15 "|"|row}
           {row|"|" E 21 "|" E 22 "|" E23 "|" {# 0.8% #} "|" E 25
                "|"|row}
           {row|"|" E 31 "|" E 32 "|" E 33 "|" {# 0.09 #} "|" E 35 "|"
                /!b/|row} {row|------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|H
                ":" header|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|E
                ":" entry|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                E23 ":" /b/ entry 23|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|P
                ":" {# /.0u%r/ #}|}|table}
    lines ###-###:
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| H  1 | H  2 | H  3 | H  4 | H  5 | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| /l/  | /r/  | c    | P    | cb   |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
|   11 |   12 |   13 | 5.4% | E 15 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 21 | E 22 | E23  | 0.8% | E 25 |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| E 31 | E 32 | E 33 | 0.09 | E 35 | /!b/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
H: header
^^^^^^^^^
E: entry
^^^^^^^^
E23: /b/ entry 23
^^^^^^^^^^^^^^^^^
P: /.0u%r/
^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|---------------------------------|row}
    line ###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|---------------------------------|row}|table}
    line ###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" Value "|" Factor "|" Contribution "|"|row}
    line ###:
| Value | Factor | Contribution |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|---------------------------------|row}
    line ###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" <V> "|" <F> "|" "|"|row}
    line ###:
| <V>   | <F>    |              |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" /u$/ "|" /u%/ "|" /u$.00/ "|"|row}
    line ###:
| /u$/  | /u%/   | /u$.00/      |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" 100 "|" 20 "|" C "|"|row}
    line ###:
| 100   | 20     | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" 200 "|" 5 "|" C "|"|row}
    line ###:
| 200   | 5      | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" 300 "|" 8 "|" C "|"|row}
    line ###:
| 300   | 8      | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|---------------------------------|row}
    line ###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" /lb/ Total "|" < "|" T "|"|row}
    line ###:
| /lb/ Total | < | T            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|---------------------------------|row}
    line ###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({# 0,<V> #})
    line ###:
C: [(0,<V>) * (@,<F>)]
    ^^^^^^^
BRACKETED EXPRESSION:
    (@,<F>)
    line ###:
C: [(0,<V>) * (@,<F>)]
              ^^^^^^^
BRACKETED EXPRESSION:
    ({# 0,<V> #})
    line ###:
C: [(0,<V>) * (@,<F>)]
    ^^^^^^^
BRACKETED EXPRESSION:
    (@,<F>)
    line ###:
C: [(0,<V>) * (@,<F>)]
              ^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "*", .terminator = "]", .initiator = "["|*
         ({# 0,<V> #}) (@,<F>)|}
    line ###:
C: [(0,<V>) * (@,<F>)]
   ^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    <FIRST>
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
         ^^^^^^^
SEPARATOR LEXEME:
    "..."
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
                  ^^^
BRACKETED EXPRESSION:
    {# @-1 #}
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
                       ^^^
BRACKETED EXPRESSION:
    [<FIRST>, "...", {# @-1 #}]
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
        ^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [<FIRST>, "...", {# @-1 #}]
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
        ^^^^^^^^^^^^^^^^^^^
MARK LEXEME:
    @
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
                             ^
BRACKETED EXPRESSION:
    ([<FIRST>, "...", {# @-1 #}], @)
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
       ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [sum ([<FIRST>, "...", {# @-1 #}], @)]
    line ###:
T: [sum([<FIRST>, ..., @-1], @)]
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|---------------------------------|row}
           {row|"|" Value "|" Factor "|" Contribution "|"|row}
           {row|---------------------------------|row}
           {row|"|" <V> "|" <F> "|" "|"|row}
           {row|"|" /u$/ "|" /u%/ "|" /u$.00/ "|"|row}
           {row|"|" 100 "|" 20 "|" C "|"|row}
           {row|"|" 200 "|" 5 "|" C "|"|row}
           {row|"|" 300 "|" 8 "|" C "|"|row}
           {row|---------------------------------|row}
           {row|"|" /lb/ Total "|" < "|" T "|"|row}
           {row|---------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|C
                ":"
                {"": .operator = "*", .terminator = "]", .initiator =
                     "["|* ({# 0,<V> #}) (@,<F>)|}|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|T
                ":" [sum ([<FIRST>, "...", {# @-1 #}], @)]|}|table}
    lines ###-###:
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Value | Factor | Contribution |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| <V>   | <F>    |              |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| /u$/  | /u%/   | /u$.00/      |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| 100   | 20     | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| 200   | 5      | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| 300   | 8      | C            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| /lb/ Total | < | T            |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C: [(0,<V>) * (@,<F>)]
^^^^^^^^^^^^^^^^^^^^^^
T: [sum([<FIRST>, ..., @-1], @)]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|--------------------------------------------------------|row}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|-------------------------------------------------------#
                #-|row}|table}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" Name "|" Weight "|" Height "|" Age "|" BMI "|" /ib/|row}
    line ###:
| Name   | Weight   | Height     | Age       | BMI  | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|--------------------------------------------------------|row}
    line ###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" <name> "|" <weight> "|" <height> "|" <age> "|" B|row}
    line ###:
| <name> | <weight> | <height>   | <age>     | B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|----------------------------------------------|row}
    line ###:
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" /l/ "|" /U`lb'/ "|" /U`ft_in'/ "|" /u`yr'.0/ "|"
         {# /.2/ #}|row}
    line ###:
| /l/    | /U`lb'/  | /U`ft_in'/ | /u`yr'.0/ | /.2/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|----------------------------------------------|row}
    line ###:
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" George "|" {# 205lb #} "|" {# 6ft #} {# 3in #} "|" 25
         "|"|row}
    line ###:
| George | 205lb    | 6ft 3in    | 25        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|"|" Mary "|" {# 135lb #} "|" {# 5ft #} {# 5in #} "|" 26
         "|"|row}
    line ###:
| Mary   | 135lb    | 5ft 5in    | 26        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {row|----------------------------------------------|row}
    line ###:
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {table|{row|-------------------------------------------------------#
                #-|row}
           {row|"|" Name "|" Weight "|" Height "|" Age "|" BMI "|"
                /ib/|row}
           {row|--------------------------------------------------------|row}
           {row|"|" <name> "|" <weight> "|" <height> "|" <age> "|"
                B|row}
           {row|----------------------------------------------|row}
           {row|"|" /l/ "|" /U`lb'/ "|" /U`ft_in'/ "|" /u`yr'.0/ "|"
                {# /.2/ #}|row}
           {row|----------------------------------------------|row}
           {row|"|" George "|" {# 205lb #} "|" {# 6ft #} {# 3in #} "|"
                25 "|"|row}
           {row|"|" Mary "|" {# 135lb #} "|" {# 5ft #} {# 5in #} "|" 26
                "|"|row}
           {row|----------------------------------------------|row}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                BMI ":" Body Mass Index|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|B
                ":" <body mass index>|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                ROW_TYPE ":" person|}
           {"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                SORT ROWS BY ":" name|}|table}
    lines ###-###:
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Name   | Weight   | Height     | Age       | BMI  | /ib/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--------------------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| <name> | <weight> | <height>   | <age>     | B
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| /l/    | /U`lb'/  | /U`ft_in'/ | /u`yr'.0/ | /.2/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| George | 205lb    | 6ft 3in    | 25        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
| Mary   | 135lb    | 5ft 5in    | 26        |
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BMI: Body Mass Index
^^^^^^^^^^^^^^^^^^^^
B: <body mass index>
^^^^^^^^^^^^^^^^^^^^
ROW_TYPE: person
^^^^^^^^^^^^^^^^
SORT ROWS BY: name
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{circle {# 0.4 #}}}
    line ###:
x = {{circle 0.4}}
    ^^^^^^^^^^^^^^
WORD LEXEME:
    x
    line ###:
x = {{circle 0.4}}
^
BRACKETED EXPRESSION:
    {{circle {# 0.4 #}}}
    line ###:
x = {{circle 0.4}}
    ^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= x {{circle {# 0.4 #}}}|}
    line ###:
x = {{circle 0.4}}
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {# 0.4 #}
    line ###:
y = {{rectangle (0.4, 0.2)}}
                 ^^^
BRACKETED EXPRESSION:
    {# 0.2 #}
    line ###:
y = {{rectangle (0.4, 0.2)}}
                      ^^^
BRACKETED EXPRESSION:
    ({# 0.4 #}, {# 0.2 #})
    line ###:
y = {{rectangle (0.4, 0.2)}}
                ^^^^^^^^^^
BRACKETED EXPRESSION:
    {{rectangle ({# 0.4 #}, {# 0.2 #})}}
    line ###:
y = {{rectangle (0.4, 0.2)}}
    ^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    y
    line ###:
y = {{rectangle (0.4, 0.2)}}
^
BRACKETED EXPRESSION:
    {{rectangle ({# 0.4 #}, {# 0.2 #})}}
    line ###:
y = {{rectangle (0.4, 0.2)}}
    ^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= y {{rectangle ({# 0.4 #}, {# 0.2 #})}}|}
    line ###:
y = {{rectangle (0.4, 0.2)}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    (circle {# 0.4 #})
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
      ^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
                           ^^^^^^
BRACKETED EXPRESSION:
    {{(circle {# 0.4 #}) labeled `Jack'}}
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    z
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
^
BRACKETED EXPRESSION:
    {{(circle {# 0.4 #}) labeled `Jack'}}
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= z {{(circle {# 0.4 #}) labeled `Jack'}}|}
    line ###:
z = {{(circle 0.4) labeled `Jack'}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
{{([x] right of [y]) above [z]}}
   ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
{{([x] right of [y]) above [z]}}
                ^^^
BRACKETED EXPRESSION:
    ([x] right of [y])
    line ###:
{{([x] right of [y]) above [z]}}
  ^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
{{([x] right of [y]) above [z]}}
                           ^^^
BRACKETED EXPRESSION:
    {{([x] right of [y]) above [z]}}
    line ###:
{{([x] right of [y]) above [z]}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{([x] right of [y]) above [z]}}
    line ###:
{{([x] right of [y]) above [z]}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
{{row([x], [y], [z])}}
      ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
{{row([x], [y], [z])}}
           ^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
{{row([x], [y], [z])}}
                ^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
{{row([x], [y], [z])}}
      ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
{{row([x], [y], [z])}}
           ^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
{{row([x], [y], [z])}}
                ^^^
BRACKETED EXPRESSION:
    ([x], [y], [z])
    line ###:
{{row([x], [y], [z])}}
     ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{row ([x], [y], [z])}}
    line ###:
{{row([x], [y], [z])}}
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{row ([x], [y], [z])}}
    line ###:
{{row([x], [y], [z])}}
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
p = {{column ( row([x], [y], [z]),
                   ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
p = {{column ( row([x], [y], [z]),
                        ^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
p = {{column ( row([x], [y], [z]),
                             ^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
p = {{column ( row([x], [y], [z]),
                   ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
p = {{column ( row([x], [y], [z]),
                        ^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
p = {{column ( row([x], [y], [z]),
                             ^^^
BRACKETED EXPRESSION:
    ([x], [y], [z])
    line ###:
p = {{column ( row([x], [y], [z]),
                  ^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
               row([z], [y], [x]) )}}
                   ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
               row([z], [y], [x]) )}}
                        ^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
               row([z], [y], [x]) )}}
                             ^^^
BRACKETED EXPRESSION:
    [z]
    line ###:
               row([z], [y], [x]) )}}
                   ^^^
BRACKETED EXPRESSION:
    [y]
    line ###:
               row([z], [y], [x]) )}}
                        ^^^
BRACKETED EXPRESSION:
    [x]
    line ###:
               row([z], [y], [x]) )}}
                             ^^^
BRACKETED EXPRESSION:
    ([z], [y], [x])
    line ###:
               row([z], [y], [x]) )}}
                  ^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|row ([x], [y], [z])|}
    line ###:
p = {{column ( row([x], [y], [z]),
               ^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|row ([z], [y], [x])|}
    line ###:
               row([z], [y], [x]) )}}
               ^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ({|row ([x], [y], [z])|}, {|row ([z], [y], [x])|})
    lines ###-###:
p = {{column ( row([x], [y], [z]),
             ^^^^^^^^^^^^^^^^^^^^^
               row([z], [y], [x]) )}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {{column ({|row ([x], [y], [z])|}, {|row ([z], [y], [x])|})}}
    lines ###-###:
p = {{column ( row([x], [y], [z]),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
               row([z], [y], [x]) )}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    p
    line ###:
p = {{column ( row([x], [y], [z]),
^
BRACKETED EXPRESSION:
    {{column ({|row ([x], [y], [z])|}, {|row ([z], [y], [x])|})}}
    lines ###-###:
p = {{column ( row([x], [y], [z]),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
               row([z], [y], [x]) )}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= p
         {{column ({|row ([x], [y], [z])|}, {|row ([z], [y], [x])|})}}|}
    lines ###-###:
p = {{column ( row([x], [y], [z]),
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
               row([z], [y], [x]) )}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    raw x
    line ###:
raw x
^^^^^
BRACKETED EXPRESSION:
    raw p
    line ###:
raw p
^^^^^
BRACKETED EXPRESSION:
    (P)
    line ###:
display ( P ) <-- person ( P ) has name ( X ):
        ^^^^^
BRACKETED EXPRESSION:
    (P)
    line ###:
display ( P ) <-- person ( P ) has name ( X ):
                         ^^^^^
BRACKETED EXPRESSION:
    (X)
    line ###:
display ( P ) <-- person ( P ) has name ( X ):
                                        ^^^^^
BRACKETED EXPRESSION:
    ({# 0.4,0.2 #})
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
                   ^^^^^^^^^
BRACKETED EXPRESSION:
    [X]
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
                                     ^^^
BRACKETED EXPRESSION:
    {{oval ({# 0.4,0.2 #}) labeled [X]}}
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WORD LEXEME:
    value
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
    ^^^^^
BRACKETED EXPRESSION:
    {{oval ({# 0.4,0.2 #}) labeled [X]}}
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "=", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|= value
         {{oval ({# 0.4,0.2 #}) labeled [X]}}|}
    line ###:
    value = {{oval (0.4,0.2) labeled [X]}}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
         {"": .operator = "=", .terminator = "<LF>", .initiator =
              [$ LOGICAL_LINE $]|= value
              {{oval ({# 0.4,0.2 #}) labeled [X]}}|}|}
    lines ###-###:
display ( P ) <-- person ( P ) has name ( X ):
                                             ^
    value = {{oval (0.4,0.2) labeled [X]}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|display (P)|}
    line ###:
display ( P ) <-- person ( P ) has name ( X ):
^^^^^^^^^^^^^
PURELIST EXPRESSION:
    {|person (P) has name (X)|}
    line ###:
display ( P ) <-- person ( P ) has name ( X ):
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {"": .operator = "<--", .terminator = "<LF>", .initiator =
         [$ LOGICAL_LINE $]|<-- {|display (P)|}
         {|person (P) has name (X)|}
         {"": .terminator = [$ INDENTED_PARAGRAPH $], .initiator = ":"|
              {"": .operator = "=", .terminator = "<LF>", .initiator =
                   [$ LOGICAL_LINE $]|= value
                   {{oval ({# 0.4,0.2 #}) labeled [X]}}|}|}|}
    lines ###-###:
display ( P ) <-- person ( P ) has name ( X ):
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    value = {{oval (0.4,0.2) labeled [X]}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
a person named `Jack'
               ^^^^^^
BRACKETED EXPRESSION:
    a person named `Jack'
    line ###:
a person named `Jack'
^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jill'
    line ###:
``[a person named `Jill'] is the wife of
                  ^^^^^^
BRACKETED EXPRESSION:
    [a person named `Jill']
    line ###:
``[a person named `Jill'] is the wife of
  ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    `Jack'
    line ###:
  [a person named `Jack']''
                  ^^^^^^
BRACKETED EXPRESSION:
    [a person named `Jack']
    line ###:
  [a person named `Jack']''
  ^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``[a person named `Jill'] is the wife of [a person named `Jack']''
    lines ###-###:
``[a person named `Jill'] is the wife of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  [a person named `Jack']''
^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    ``[a person named `Jill'] is the wife of [a person named `Jack']''
    lines ###-###:
``[a person named `Jill'] is the wife of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  [a person named `Jack']''
^^^^^^^^^^^^^^^^^^^^^^^^^^^
