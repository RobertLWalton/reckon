*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression elements]
BRACKETED EXPRESSION:
    {section|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                  First Example|}|section}
    line ##:
{section}First Example
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|This
            is the first paragraph of the first example "." And its
            second sentence "." Line indentation does not matter in this
            paragraph "," which is ended by the next blank line "."|}|p}
    lines ##-##:
{p}This is the first paragraph of the first
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        example.  And
^^^^^^^^^^^^^^^^^^^^^
its second sentence.  Line indentation does not
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
matter in this paragraph, which is ended by the
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                next blank line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|This
            paragraph introduces a quote ":"|}|p}
    line ##:
{p}This paragraph introduces a quote:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {quote|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                Remember to begin at the beginning and go to the end "."
                This quote is a paragraph by itself "."|}|quote}
    lines ##-##:
    {quote} // In text, `:'s do not introduce indented
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // paragraphs, but you can still use comments,
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // and you can indent the input paragraph
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // as you like.
^^^^^^^^^^^^^^^^^^^^^^^^^^^
            Remember to begin at
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            the beginning and go to the end.  This quote
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                          is a paragraph by itself.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    This is a line of code:
        And this is a logical line of an indented paragraph "."
        And a second logical line "."
        {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                But we can have a text paragraph in an indented
                paragraph "."|}|p}
        This is the third logical line of code "."
        {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                Another piece of text "."|}|p}
    lines ##-##:
This is a line of code:
^^^^^^^^^^^^^^^^^^^^^^^
   And this is a logical line of an indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   And a second logical line.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // In code, `:' can start an indented paragraph.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
   {p}But we can have a text paragraph in an indented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      paragraph.
^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
   {code}This is the third logical line of code.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<BLANK-LINE>
^
   {p}Another piece of text.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    And a logical line of code that ends the indented paragraph "."
    lines ##-##:
And a logical line of code that ends the indented
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    paragraph.
^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {section|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                  Second Example|}|section}
    line ##:
{section}Second Example
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|This
            is the first paragraph of the second example "."|}|p}
    lines ##-##:
{p}
^^^
This is the first paragraph of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    the second example.
^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|This
            is the next paragraph "," which begins with an implied
            `"{" p "}"' "," and which introduces a quote ":"|}|p}
    lines ##-##:
This is the next paragraph, which begins
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
with an implied `{p}', and which
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   introduces a quote:
^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {quote|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|
                Simplify "," simplify "."|}|quote}
    line ##:
{quote}Simplify, simplify.
^^^^^^^^^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    {p|{"": .terminator = "<LF>", .initiator = [$ LOGICAL_LINE $]|This
            is the third paragraph of the section "." If it did not
            begin with `"{" p "}"' "," it would begin with an implied
            `"{" quote "}"' "."|}|p}
    lines ##-##:
{p}
^^^
This is the third paragraph of the section.  If it
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
did not begin with `{p}', it would begin with an
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
implied `{quote}'.
^^^^^^^^^^^^^^^^^^
BRACKETED EXPRESSION:
    [$ LOGICAL_LINE $] {|This is a line of code "." If is was not
                         preceeded by or begin with `"{" code "}"'|},
                       {|it would begin with an implied `"{" p "}"'
                         "."|} "<LF>"
    lines ##-##:
This is a line of code.  If is was not preceeded by
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     or begin with `{code}', it would begin with
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     an implied `{p}'.
^^^^^^^^^^^^^^^^^^^^^^
