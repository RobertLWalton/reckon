*PARSER*:
    trace [+ parser output]
    trace [+ subexpression lines]
    trace [+ subexpression details]
BRACKETED EXPRESSION:
!@@ := @@ "+" @@:
           .terminator = "<LF>"
           .initiator = [$ LOGICAL_LINE $]
           .position[H] = PACKED_VEC
!@@ := x:
           .position[H] = PACKED_VEC
!@@ := y:
           .position[H] = PACKED_VEC
    line ##:
x + y
^^^^^
BRACKETED EXPRESSION:
!@@ := @@ "<--" @@ @@:
           .terminator = "<LF>"
           .initiator = [$ LOGICAL_LINE $]
           .position[H] = PACKED_VEC
!@@ := min @@:
           .position[H] = PACKED_VEC
!@@ :=:
           .position[H] = PACKED_VEC
!@@ := @@ @@@:
           .terminator = [$ INDENTED_PARAGRAPH $]
           .position[H] = PACKED_VEC
           .initiator = ":"
!@@ := @@@ @@@:
           .terminator = ")"
           .initiator = "("
           .separator = ","
           .position[H] = PACKED_VEC
!@@ := if @@@ @@@:
           .terminator = "<LF>"
           .initiator = [$ LOGICAL_LINE $]
           .position[H] = PACKED_VEC
!@@@ := else @@@:
            .terminator = "<LF>"
            .initiator = [$ LOGICAL_LINE $]
            .position[H] = PACKED_VEC
!@@@ := X:
            .position[H] = PACKED_VEC
!@@@ := Y:
            .position[H] = PACKED_VEC
!@@@ := @@@ ">" @@@:
            .position[H] = PACKED_VEC
!@@@ := @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
!@@@ := @@@:
            .terminator = [$ INDENTED_PARAGRAPH $]
            .position[H] = PACKED_VEC
            .initiator = ":"
!@@@ := X:
            .position[H] = PACKED_VEC
!@@@ := Y:
            .position[H] = PACKED_VEC
!@@@ := return Y:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
!@@@ := return X:
            .terminator = "<LF>"
            .position[H] = PACKED_VEC
            .initiator = [$ LOGICAL_LINE $]
    lines ##-##:
min (X, Y) <--:
^^^^^^^^^^^^^^^
    if X > Y:
^^^^^^^^^^^^^
        return Y
^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        return X
^^^^^^^^^^^^^^^^
