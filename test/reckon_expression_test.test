=== PURELIST EXPRESSION: line ##:
x + y
^
    {|x|}
!@@ := x:
           .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
x + y
    ^
    {|y|}
!@@ := y:
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
x + y
^^^^^
    {|x|} + {|y|}
!@@ := @@ "+" @@:
           .terminator = "<LF>"
           .initiator = *LOGICAL_LINE*
           .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
function min (X, Y):
              ^
    {|X|}
!@@ := X:
           .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
function min (X, Y):
                 ^
    {|Y|}
!@@ := Y:
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
function min (X, Y):
             ^^^^^^
    ({|X|}, {|Y|})
!@@ := @@ @@:
           .terminator = ")"
           .initiator = "("
           .separator = ","
           .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
        return Y
               ^
    {|Y|}
!@@ := Y:
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
        return Y
        ^^^^^^^^
    return {|Y|}
!@@ := return @@:
           .terminator = "<LF>"
           .initiator = *LOGICAL_LINE*
           .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
    if X > Y:
            ^
        return Y
^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
              {|Y|}|}|}
!@@ := @@:
           .terminator = *INDENTED_PARAGRAPH*
           .position[H] = PACKED_VEC
           .initiator = ":"
=== PURELIST EXPRESSION: line ##:
    if X > Y:
       ^
    {|X|}
!@@@ := X:
            .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
    if X > Y:
           ^
    {|Y|}
!@@@ := Y:
            .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
    if X > Y:
       ^^^^^
    {|{|X|} > {|Y|}|}
!@@@ := @@@ ">" @@@:
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
    if X > Y:
    ^^^^^^^^^
        return Y
^^^^^^^^^^^^^^^^
    if {|{|X|} > {|Y|}|}:
        return {|Y|}
!@@@ := if @@@ @@:
            .terminator = "<LF>"
            .initiator = *LOGICAL_LINE*
            .position[H] = PACKED_VEC
=== PURELIST EXPRESSION: line ##:
        return X
               ^
    {|X|}
!@@@ := X:
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: line ##:
        return X
        ^^^^^^^^
    return {|X|}
!@@@ := return @@@:
            .terminator = "<LF>"
            .initiator = *LOGICAL_LINE*
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
    else:
        ^
        return X
^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|return
              {|X|}|}|}
!@@@ := @@@:
            .terminator = *INDENTED_PARAGRAPH*
            .position[H] = PACKED_VEC
            .initiator = ":"
=== BRACKETED EXPRESSION: lines ##-##:
    else:
    ^^^^^
        return X
^^^^^^^^^^^^^^^^
    else:
        return {|X|}
!@@@ := else @@@:
            .terminator = "<LF>"
            .initiator = *LOGICAL_LINE*
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
function min (X, Y):
                   ^
    if X > Y:
^^^^^^^^^^^^^
        return Y
^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        return X
^^^^^^^^^^^^^^^^
    {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|if
              {|{|X|} > {|Y|}|}
              {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
                   {"": .terminator = "<LF>", .initiator =
                        *LOGICAL_LINE*|return {|Y|}|}|}|}
         {"": .terminator = "<LF>", .initiator = *LOGICAL_LINE*|else
              {"": .terminator = *INDENTED_PARAGRAPH*, .initiator = ":"|
                   {"": .terminator = "<LF>", .initiator =
                        *LOGICAL_LINE*|return {|X|}|}|}|}|}
!@@@ := @@@ @@@:
            .terminator = *INDENTED_PARAGRAPH*
            .position[H] = PACKED_VEC
            .initiator = ":"
=== PURELIST EXPRESSION: line ##:
function min (X, Y):
         ^^^^^^^^^^
    {|min ({|X|}, {|Y|})|}
!@@@ := min @@:
            .position[H] = PACKED_VEC
=== BRACKETED EXPRESSION: lines ##-##:
function min (X, Y):
^^^^^^^^^^^^^^^^^^^^
    if X > Y:
^^^^^^^^^^^^^
        return Y
^^^^^^^^^^^^^^^^
    else:
^^^^^^^^^
        return X
^^^^^^^^^^^^^^^^
    function {|min ({|X|}, {|Y|})|}:
        if {|{|X|} > {|Y|}|}:
            return {|Y|}
        else:
            return {|X|}
!@@@ := function @@@ @@@:
            .terminator = "<LF>"
            .initiator = *LOGICAL_LINE*
            .position[H] = PACKED_VEC
